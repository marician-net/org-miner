{
  "id": "f2f142daf3bdfb2c9b744596ace0783d",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.5.1",
  "solcLongVersion": "0.5.1+commit.c8a2cb62",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/ZapGetters.sol": {
        "content": "pragma solidity ^0.5.0;\n\n// import \"./libraries/SafeMathM.sol\";\nimport \"./libraries/ZapStorage.sol\";\nimport \"./libraries/ZapTransfer.sol\";\nimport \"./libraries/ZapGettersLibrary.sol\";\nimport \"./libraries/ZapStake.sol\";\n// import \"./libraries/Upgradable.sol\";\nimport \"./ZapToken.sol\";\n\n/**\n* @title Zap Getters\n* @dev Oracle contract with all zap getter functions. The logic for the functions on this contract \n* is saved on the ZapGettersLibrary, ZapTransfer, ZapGettersLibrary, and ZapStake\n*/\ncontract ZapGetters is ZapToken {\n    using SafeMath for uint256;\n\n    using ZapTransfer for ZapStorage.ZapStorageStruct;\n    using ZapGettersLibrary for ZapStorage.ZapStorageStruct;\n    using ZapStake for ZapStorage.ZapStorageStruct;\n\n    ZapStorage.ZapStorageStruct zap;\n    ZapToken token;\n\n    constructor (address zapToken) public {\n        token = ZapToken(zapToken);\n    }\n\n    // constructor (address coordinator) Upgradable(coordinator) public {\n    //     _updateDependencies();\n    // }\n\n    // function _updateDependencies() internal {\n    //     address ZapToken_Address = coordinator.getContract(\"ZAPTOKEN\");\n    //     token = ZapToken(ZapToken_Address);\n    // }\n\n    /**\n    * @param _user address\n    * @param _spender address\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\n    */\n    function allowance(address _user, address _spender) public view returns (uint) {\n    //    return zap.allowance(_user,_spender);\n        return token.allowance(_user, _spender);\n    }\n\n    /**\n    * @dev This function returns whether or not a given user is allowed to trade a given amount  \n    * @param _user address\n    * @param _amount uint of amount\n    * @return true if the user is alloed to trade the amount specified\n    */\n    function allowedToTrade(address _user,uint _amount) external view returns(bool){\n        return zap.allowedToTrade(_user,_amount);\n    }\n\n    /**\n    * @dev Gets balance of owner specified\n    * @param _user is the owner address used to look up the balance\n    * @return Returns the balance associated with the passed in _user\n    */\n    function balanceOf(address _user) public view returns (uint) { \n        // return zap.balanceOf(_user);\n        return token.balanceOf(_user);\n    }\n\n    /**\n    * @dev Queries the balance of _user at a specific _blockNumber\n    * @param _user The address from which the balance will be retrieved\n    * @param _blockNumber The block number when the balance is queried\n    * @return The balance at _blockNumber\n    */\n    // function balanceOfAt(address _user, uint _blockNumber) external view returns (uint) {\n    //     return zap.balanceOfAt(_user,_blockNumber);\n    // }\n\n    /**\n    * @dev This function tells you if a given challenge has been completed by a given miner\n    * @param _challenge the challenge to search for\n    * @param _miner address that you want to know if they solved the challenge\n    * @return true if the _miner address provided solved the \n    */\n    function didMine(bytes32 _challenge, address _miner) external view returns(bool){\n        return zap.didMine(_challenge,_miner);\n    }\n\n\n    /**\n    * @dev Checks if an address voted in a given dispute\n    * @param _disputeId to look up\n    * @param _address to look up\n    * @return bool of whether or not party voted\n    */\n    function didVote(uint _disputeId, address _address) external view returns(bool){\n        return zap.didVote(_disputeId,_address);\n    }\n\n\n    /**\n    * @dev allows Zap to read data from the addressVars mapping\n    * @param _data is the keccak256(\"variable_name\") of the variable that is being accessed. \n    * These are examples of how the variables are saved within other functions:\n    * addressVars[keccak256(\"_owner\")]\n    * addressVars[keccak256(\"zapContract\")]\n    */\n    function getAddressVars(bytes32 _data) view external returns(address){\n        return zap.getAddressVars(_data);\n    }\n\n\n    /**\n    * @dev Gets all dispute variables\n    * @param _disputeId to look up\n    * @return bytes32 hash of dispute \n    * @return bool executed where true if it has been voted on\n    * @return bool disputeVotePassed\n    * @return bool isPropFork true if the dispute is a proposed fork\n    * @return address of reportedMiner\n    * @return address of reportingParty\n    * @return address of proposedForkAddress\n    * @return uint of requestId\n    * @return uint of timestamp\n    * @return uint of value\n    * @return uint of minExecutionDate\n    * @return uint of numberOfVotes\n    * @return uint of blocknumber\n    * @return uint of minerSlot\n    * @return uint of quorum\n    * @return uint of fee\n    * @return int count of the current tally\n    */\n    function getAllDisputeVars(uint _disputeId) public view returns(bytes32, bool, bool, bool, address, address, address,uint[9] memory, int){\n        return zap.getAllDisputeVars(_disputeId);\n    }\n    \n\n    /**\n    * @dev Getter function for variables for the requestId being currently mined(currentRequestId)\n    * @return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \n    */\n    function getCurrentVariables() external view returns(bytes32, uint, uint,string memory,uint,uint){    \n        return zap.getCurrentVariables();\n    }\n\n    /**\n    * @dev Checks if a given hash of miner,requestId has been disputed\n    * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\n    * @return uint disputeId\n    */\n    function getDisputeIdByDisputeHash(bytes32 _hash) external view returns(uint){\n        return  zap.getDisputeIdByDisputeHash(_hash);\n    }\n    \n\n    /**\n    * @dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\n    * @param _disputeId is the dispute id;\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the disputeUintVars under the Dispute struct\n    * @return uint value for the bytes32 data submitted\n    */\n    function getDisputeUintVars(uint _disputeId,bytes32 _data) external view returns(uint){\n        return zap.getDisputeUintVars(_disputeId,_data);\n    }\n\n\n    /**\n    * @dev Gets the a value for the latest timestamp available\n    * @return value for timestamp of last proof of work submited\n    * @return true if the is a timestamp for the lastNewValue\n    */\n    function getLastNewValue() external view returns(uint,bool){\n        return zap.getLastNewValue();\n    }\n\n\n    /**\n    * @dev Gets the a value for the latest timestamp available\n    * @param _requestId being requested\n    * @return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\n    */\n    function getLastNewValueById(uint _requestId) external view returns(uint,bool){\n        return zap.getLastNewValueById(_requestId);\n    }\n        \n\n    /**\n    * @dev Gets blocknumber for mined timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up blocknumber\n    * @return uint of the blocknumber which the dispute was mined\n    */\n    function getMinedBlockNum(uint _requestId, uint _timestamp) external view returns(uint){\n        return zap.getMinedBlockNum(_requestId,_timestamp);\n    }\n\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up miners for\n    * @return the 5 miners' addresses\n    */\n    function getMinersByRequestIdAndTimestamp(uint _requestId, uint _timestamp) external view returns(address[5] memory){\n        return zap.getMinersByRequestIdAndTimestamp(_requestId,_timestamp);\n    }\n\n\n    /**\n    * @dev Get the name of the token\n    * return string of the token name\n    */\n    function getName() external view returns(string memory){\n        return zap.getName();\n    }\n\n\n    /**\n    * @dev Counts the number of values that have been submited for the request \n    * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\n    * request so far\n    * @param _requestId the requestId to look up\n    * @return uint count of the number of values received for the requestId\n    */\n    function getNewValueCountbyRequestId(uint _requestId) external view returns(uint){\n        return zap.getNewValueCountbyRequestId(_requestId);\n    }\n\n\n    /**\n    * @dev Getter function for the specified requestQ index\n    * @param _index to look up in the requestQ array\n    * @return uint of reqeuestId\n    */\n    function getRequestIdByRequestQIndex(uint _index) external view returns(uint){\n        return zap.getRequestIdByRequestQIndex(_index);\n    }\n\n\n    /**\n    * @dev Getter function for requestId based on timestamp \n    * @param _timestamp to check requestId\n    * @return uint of reqeuestId\n    */\n    function getRequestIdByTimestamp(uint _timestamp) external view returns(uint){    \n        return zap.getRequestIdByTimestamp(_timestamp);\n    }\n\n    /**\n    * @dev Getter function for requestId based on the queryHash\n    * @param _request is the hash(of string api and granularity) to check if a request already exists\n    * @return uint requestId\n    */\n    function getRequestIdByQueryHash(bytes32 _request) external view returns(uint){    \n        return zap.getRequestIdByQueryHash(_request);\n    }\n\n\n    /**\n    * @dev Getter function for the requestQ array\n    * @return the requestQ arrray\n    */\n    function getRequestQ() view public returns(uint[51] memory){\n        return zap.getRequestQ();\n    }\n\n\n    /**\n    * @dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\n    * for the requestId specified\n    * @param _requestId to look up\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the apiUintVars under the requestDetails struct\n    * @return uint value of the apiUintVars specified in _data for the requestId specified\n    */\n    function getRequestUintVars(uint _requestId,bytes32 _data) external view returns(uint){\n        return zap.getRequestUintVars(_requestId,_data);\n    }\n\n\n    /**\n    * @dev Gets the API struct variables that are not mappings\n    * @param _requestId to look up\n    * @return string of api to query\n    * @return string of symbol of api to query\n    * @return bytes32 hash of string\n    * @return bytes32 of the granularity(decimal places) requested\n    * @return uint of index in requestQ array\n    * @return uint of current payout/tip for this requestId\n    */\n    function getRequestVars(uint _requestId) external view returns(string memory, string memory,bytes32,uint, uint, uint) {\n        return zap.getRequestVars(_requestId);\n    }\n\n\n    /**\n    * @dev This function allows users to retireve all information about a staker\n    * @param _staker address of staker inquiring about\n    * @return uint current state of staker\n    * @return uint startDate of staking\n    */\n    function getStakerInfo(address _staker) external view returns(uint,uint){\n        return zap.getStakerInfo(_staker);\n    }\n    \n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestampt to look up miners for\n    * @return address[5] array of 5 addresses ofminers that mined the requestId\n    */    \n    function getSubmissionsByTimestamp(uint _requestId, uint _timestamp) external view returns(uint[5] memory){\n        return zap.getSubmissionsByTimestamp(_requestId,_timestamp);\n    }\n\n    /**\n    * @dev Get the symbol of the token\n    * return string of the token symbol\n    */\n    function getSymbol() external view returns(string memory){\n        return zap.getSymbol();\n    } \n\n    /**\n    * @dev Gets the timestamp for the value based on their index\n    * @param _requestID is the requestId to look up\n    * @param _index is the value index to look up\n    * @return uint timestamp\n    */\n    function getTimestampbyRequestIDandIndex(uint _requestID, uint _index) external view returns(uint){\n        return zap.getTimestampbyRequestIDandIndex(_requestID,_index);\n    }\n\n\n    /**\n    * @dev Getter for the variables saved under the ZapStorageStruct uintVars variable\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the uintVars under the ZapStorageStruct struct\n    * This is an example of how data is saved into the mapping within other functions: \n    * self.uintVars[keccak256(\"stakerCount\")]\n    * @return uint of specified variable  \n    */ \n    function getUintVar(bytes32 _data) view public returns(uint){\n        return zap.getUintVar(_data);\n    }\n\n\n    /**\n    * @dev Getter function for next requestId on queue/request with highest payout at time the function is called\n    * @return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\n    */\n    function getVariablesOnDeck() external view returns(uint, uint,string memory){    \n        return zap.getVariablesOnDeck();\n    }\n\n    \n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up miners for\n    * @return bool true if requestId/timestamp is under dispute\n    */\n    function isInDispute(uint _requestId, uint _timestamp) external view returns(bool){\n        return zap.isInDispute(_requestId,_timestamp);\n    }\n    \n\n    /**\n    * @dev Retreive value from oracle based on timestamp\n    * @param _requestId being requested\n    * @param _timestamp to retreive data/value from\n    * @return value for timestamp submitted\n    */\n    function retrieveData(uint _requestId, uint _timestamp) external view returns (uint) {\n        return zap.retrieveData(_requestId,_timestamp);\n    }\n\n\n    /**\n    * @dev Getter for the total_supply of oracle tokens\n    * @return uint total supply\n    */\n    function totalTokenSupply() external view returns (uint) {\n       return zap.totalSupply();\n        // return token.totalSupply;\n    }\n\n}"
      },
      "contracts/libraries/ZapStorage.sol": {
        "content": "pragma solidity ^0.5.1;\n\n/**\n * @title Zap Oracle Storage Library\n * @dev Contains all the variables/structs used by Zap\n */\n\n// Libraries contain reusable Solidity types\nlibrary ZapStorage {\n\n\n    //Internal struct for use in proof-of-work submission\n    struct Details {\n        uint256 value;\n        address miner;\n    }\n\n    struct Dispute {\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\n        int256 tally; //current tally of votes for - against measure\n        bool executed; //is the dispute settled\n        bool disputeVotePassed; //did the vote pass?\n        bool isPropFork; //true for fork proposal NEW\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\n        address proposedForkAddress; //new fork address (if fork proposal)\n        mapping(bytes32 => uint256) disputeUintVars;\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\"requestId\")]\n        //These are the variables saved in this mapping:\n        // uint keccak256(\"requestId\");//apiID of disputed value\n        // uint keccak256(\"timestamp\");//timestamp of distputed value\n        // uint keccak256(\"value\"); //the value being disputed\n        // uint keccak256(\"minExecutionDate\");//7 days from when dispute initialized\n        // uint keccak256(\"numberOfVotes\");//the number of parties who have voted on the measure\n        // uint keccak256(\"blockNumber\");// the blocknumber for which votes will be calculated from\n        // uint keccak256(\"minerSlot\"); //index in dispute array\n        // uint keccak256(\"quorum\"); //quorum for dispute vote NEW\n        // uint keccak256(\"fee\"); //fee paid corresponding to dispute\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\n    }\n\n    struct StakeInfo {\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\n        uint256 startDate; //stake start date\n    }\n\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\n    struct Checkpoint {\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\n        uint128 value; // value is the amount of tokens at a specific block number\n    }\n\n    struct Request {\n        string queryString; //id to string api\n        string dataSymbol; //short name for api request\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\n        mapping(bytes32 => uint256) apiUintVars;\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\"totalTip\")]\n        //These are the variables saved in this mapping:\n        // uint keccak256(\"granularity\"); //multiplier for miners\n        // uint keccak256(\"requestQPosition\"); //index in requestQ\n        // uint keccak256(\"totalTip\");//bonus portion of payout\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\n        mapping(uint256 => address[5]) minersByValue;\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\n    }\n\n    struct ZapStorageStruct {\n        bytes32 currentChallenge; //current challenge to be solved\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\n        uint256[] newValueTimestamps; //array of all timestamps requested\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\n        mapping(bytes32 => address) addressVars;\n        //Address fields in the Zap contract are saved the addressVars mapping\n        //e.g. addressVars[keccak256(\"zapContract\")] = address\n        //These are the variables saved in this mapping:\n        // address keccak256(\"zapContract\");//Zap address\n        // address  keccak256(\"_owner\");//Zap Owner address\n        // address  keccak256(\"_deity\");//Zap Owner that can do things at will\n        mapping(bytes32 => uint256) uintVars;\n        //uint fields in the Zap contract are saved the uintVars mapping\n        //e.g. uintVars[keccak256(\"decimals\")] = uint\n        //These are the variables saved in this mapping:\n        // keccak256(\"decimals\");    //18 decimal standard ERC20\n        // keccak256(\"disputeFee\");//cost to dispute a mined value\n        // keccak256(\"disputeCount\");//totalHistoricalDisputes\n        // keccak256(\"total_supply\"); //total_supply of the token in circulation\n        // keccak256(\"stakeAmount\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\n        // keccak256(\"stakerCount\"); //number of parties currently staked\n        // keccak256(\"timeOfLastNewValue\"); // time of last challenge solved\n        // keccak256(\"difficulty\"); // Difficulty of current block\n        // keccak256(\"currentTotalTips\"); //value of highest api/timestamp PayoutPool\n        // keccak256(\"currentRequestId\"); //API being mined--updates with the ApiOnQ Id\n        // keccak256(\"requestCount\"); // total number of requests through the system\n        // keccak256(\"slotProgress\");//Number of miners who have mined this value so far\n        // keccak256(\"miningReward\");//Mining Reward in PoWo tokens given to all miners per value\n        // keccak256(\"timeTarget\"); //The time between blocks (mined Oracle values)\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\n    }\n}\n"
      },
      "contracts/libraries/ZapTransfer.sol": {
        "content": "pragma solidity ^0.5.1;\n\nimport \"./SafeMathM.sol\";\nimport \"./ZapStorage.sol\";\n\n/**\n* @title Zap Transfer\n* @dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\n* reference this library for function's logic.\n*/\nlibrary ZapTransfer {\n    using SafeMathM for uint256;\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);//ERC20 Approval event\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);//ERC20 Transfer Event\n\n    /*Functions*/\n    \n    /**\n    * @dev Allows for a transfer of tokens to _to\n    * @param _to The address to send tokens to\n    * @param _amount The amount of tokens to send\n    * @return true if transfer is successful\n    */\n    function transfer(ZapStorage.ZapStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\n        doTransfer(self,msg.sender, _to, _amount);\n        return true;\n    }\n\n\n    /**\n    * @notice Send _amount tokens to _to from _from on the condition it\n    * is approved by _from\n    * @param _from The address holding the tokens being transferred\n    * @param _to The address of the recipient\n    * @param _amount The amount of tokens to be transferred\n    * @return True if the transfer was successful\n    */\n    function transferFrom(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint256 _amount) public returns (bool success) {\n        require(self.allowed[_from][msg.sender] >= _amount);\n        self.allowed[_from][msg.sender] -= _amount;\n        doTransfer(self,_from, _to, _amount);\n        return true;\n    }\n\n\n    /**\n    * @dev This function approves a _spender an _amount of tokens to use\n    * @param _spender address\n    * @param _amount amount the spender is being approved for\n    * @return true if spender appproved successfully\n    */\n    function approve(ZapStorage.ZapStorageStruct storage self, address _spender, uint _amount) public returns (bool) {\n        require(allowedToTrade(self,msg.sender,_amount));\n        require(_spender != address(0));\n        self.allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n\n    /**\n    * @param _user address of party with the balance\n    * @param _spender address of spender of parties said balance\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\n    */\n    function allowance(ZapStorage.ZapStorageStruct storage self,address _user, address _spender) public view returns (uint) {\n       \n       return self.allowed[_user][_spender]; \n    }\n\n\n    /**\n    * @dev Completes POWO transfers by updating the balances on the current block number\n    * @param _from address to transfer from\n    * @param _to addres to transfer to\n    * @param _amount to transfer\n    */\n    function doTransfer(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint _amount) public {\n        require(_amount > 0);\n        require(_to != address(0));\n        require(allowedToTrade(self,_from,_amount)); //allowedToTrade checks the stakeAmount is removed from balance if the _user is staked\n        uint previousBalance = balanceOfAt(self,_from, block.number);\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\n        previousBalance = balanceOfAt(self,_to, block.number);\n        require(previousBalance + _amount >= previousBalance); // Check for overflow\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\n        emit Transfer(_from, _to, _amount);\n    }\n\n\n    /**\n    * @dev Gets balance of owner specified\n    * @param _user is the owner address used to look up the balance\n    * @return Returns the balance associated with the passed in _user\n    */\n    function balanceOf(ZapStorage.ZapStorageStruct storage self,address _user) public view returns (uint) {\n        return balanceOfAt(self,_user, block.number);\n    }\n\n\n    /**\n    * @dev Queries the balance of _user at a specific _blockNumber\n    * @param _user The address from which the balance will be retrieved\n    * @param _blockNumber The block number when the balance is queried\n    * @return The balance at _blockNumber specified\n    */\n    function balanceOfAt(ZapStorage.ZapStorageStruct storage self,address _user, uint _blockNumber) public view returns (uint) {\n        if ((self.balances[_user].length == 0) || (self.balances[_user][0].fromBlock > _blockNumber)) {\n                return 0;\n        }\n     else {\n        return getBalanceAt(self.balances[_user], _blockNumber);\n     }\n    }\n\n\n    /**\n    * @dev Getter for balance for owner on the specified _block number\n    * @param checkpoints gets the mapping for the balances[owner]\n    * @param _block is the block number to search the balance on\n    * @return the balance at the checkpoint\n    */\n    function getBalanceAt(ZapStorage.Checkpoint[] storage checkpoints, uint _block) view public returns (uint) {\n        if (checkpoints.length == 0) return 0;\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n            return checkpoints[checkpoints.length-1].value;\n        if (_block < checkpoints[0].fromBlock) return 0;\n        // Binary search of the value in the array\n        uint min = 0;\n        uint max = checkpoints.length-1;\n        while (max > min) {\n            uint mid = (max + min + 1)/ 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n\n    /**\n    * @dev This function returns whether or not a given user is allowed to trade a given amount \n    * and removing the staked amount from their balance if they are staked\n    * @param _user address of user\n    * @param _amount to check if the user can spend\n    * @return true if they are allowed to spend the amount being checked\n    */\n    function allowedToTrade(ZapStorage.ZapStorageStruct storage self,address _user,uint _amount) public view returns(bool) {\n        if(self.stakerDetails[_user].currentStatus >0){\n            //Removes the stakeAmount from balance if the _user is staked\n            if(balanceOf(self,_user).sub(self.uintVars[keccak256(\"stakeAmount\")]).sub(_amount) >= 0){\n                return true;\n            }\n        }\n        else if(balanceOf(self,_user).sub(_amount) >= 0){\n                return true;\n        }\n        return false;\n    }\n    \n\n    /**\n    * @dev Updates balance for from and to on the current block number via doTransfer\n    * @param checkpoints gets the mapping for the balances[owner]\n    * @param _value is the new balance\n    */\n    function updateBalanceAtNow(ZapStorage.Checkpoint[] storage checkpoints, uint _value) public {\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n               ZapStorage.Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n               newCheckPoint.fromBlock =  uint128(block.number);\n               newCheckPoint.value = uint128(_value);\n        } else {\n               ZapStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n               oldCheckPoint.value = uint128(_value);\n        }\n    }\n}\n"
      },
      "contracts/libraries/ZapGettersLibrary.sol": {
        "content": "pragma solidity ^0.5.0;\n\nimport \"./SafeMathM.sol\";\nimport \"./ZapStorage.sol\";\nimport \"./Utilities.sol\";\n\n/**\n* @title Zap Getters Library\n* @dev This is the getter library for all variables in the Zap Token system. ZapGetters references this \n* libary for the getters logic\n*/\nlibrary ZapGettersLibrary{\n    using SafeMathM for uint256;\n\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\n\n    /*Functions*/\n\n    //The next two functions are onlyOwner functions.  For Zap to be truly decentralized, we will need to transfer the Deity to the 0 address.\n    //Only needs to be in library\n    /**\n    * @dev This function allows us to set a new Deity (or remove it) \n    * @param _newDeity address of the new Deity of the zap system \n    */\n    function changeDeity(ZapStorage.ZapStorageStruct storage self, address _newDeity) internal{\n        require(self.addressVars[keccak256(\"_deity\")] == msg.sender);\n        self.addressVars[keccak256(\"_deity\")] =_newDeity;\n    }\n\n\n    //Only needs to be in library\n    /**\n    * @dev This function allows the deity to upgrade the Zap System\n    * @param _zapContract address of new updated ZapCore contract\n    */\n    function changeZapContract(ZapStorage.ZapStorageStruct storage self,address _zapContract) internal{\n        require(self.addressVars[keccak256(\"_deity\")] == msg.sender);\n        self.addressVars[keccak256(\"zapContract\")]= _zapContract;\n        emit NewZapAddress(_zapContract);\n    }\n\n\n    /*Zap Getters*/\n\n    /**\n    * @dev This function tells you if a given challenge has been completed by a given miner\n    * @param _challenge the challenge to search for\n    * @param _miner address that you want to know if they solved the challenge\n    * @return true if the _miner address provided solved the \n    */\n    function didMine(ZapStorage.ZapStorageStruct storage self, bytes32 _challenge,address _miner) internal view returns(bool){\n        return self.minersByChallenge[_challenge][_miner];\n    }\n    \n\n    /**\n    * @dev Checks if an address voted in a dispute\n    * @param _disputeId to look up\n    * @param _address of voting party to look up\n    * @return bool of whether or not party voted\n    */\n    function didVote(ZapStorage.ZapStorageStruct storage self,uint _disputeId, address _address) internal view returns(bool){\n        return self.disputesById[_disputeId].voted[_address];\n    }\n\n\n    /**\n    * @dev allows Zap to read data from the addressVars mapping\n    * @param _data is the keccak256(\"variable_name\") of the variable that is being accessed. \n    * These are examples of how the variables are saved within other functions:\n    * addressVars[keccak256(\"_owner\")]\n    * addressVars[keccak256(\"zapContract\")]\n    */\n    function getAddressVars(ZapStorage.ZapStorageStruct storage self, bytes32 _data) view internal returns(address){\n        return self.addressVars[_data];\n    }\n\n\n    /**\n    * @dev Gets all dispute variables\n    * @param _disputeId to look up\n    * @return bytes32 hash of dispute \n    * @return bool executed where true if it has been voted on\n    * @return bool disputeVotePassed\n    * @return bool isPropFork true if the dispute is a proposed fork\n    * @return address of reportedMiner\n    * @return address of reportingParty\n    * @return address of proposedForkAddress\n    * @return uint of requestId\n    * @return uint of timestamp\n    * @return uint of value\n    * @return uint of minExecutionDate\n    * @return uint of numberOfVotes\n    * @return uint of blocknumber\n    * @return uint of minerSlot\n    * @return uint of quorum\n    * @return uint of fee\n    * @return int count of the current tally\n    */\n    function getAllDisputeVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId) internal view returns(bytes32, bool, bool, bool, address, address, address,uint[9] memory, int){\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\n        return(disp.hash,disp.executed, disp.disputeVotePassed, disp.isPropFork, disp.reportedMiner, disp.reportingParty,disp.proposedForkAddress,[disp.disputeUintVars[keccak256(\"requestId\")], disp.disputeUintVars[keccak256(\"timestamp\")], disp.disputeUintVars[keccak256(\"value\")], disp.disputeUintVars[keccak256(\"minExecutionDate\")], disp.disputeUintVars[keccak256(\"numberOfVotes\")], disp.disputeUintVars[keccak256(\"blockNumber\")], disp.disputeUintVars[keccak256(\"minerSlot\")], disp.disputeUintVars[keccak256(\"quorum\")],disp.disputeUintVars[keccak256(\"fee\")]],disp.tally);\n    }\n\n\n    /**\n    * @dev Getter function for variables for the requestId being currently mined(currentRequestId)\n    * @return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \n    */\n    function getCurrentVariables(ZapStorage.ZapStorageStruct storage self) internal view returns(bytes32, uint, uint,string memory,uint,uint){    \n        return (self.currentChallenge,self.uintVars[keccak256(\"currentRequestId\")],self.uintVars[keccak256(\"difficulty\")],self.requestDetails[self.uintVars[keccak256(\"currentRequestId\")]].queryString,self.requestDetails[self.uintVars[keccak256(\"currentRequestId\")]].apiUintVars[keccak256(\"granularity\")],self.requestDetails[self.uintVars[keccak256(\"currentRequestId\")]].apiUintVars[keccak256(\"totalTip\")]);\n    }\n\n\n    /**\n    * @dev Checks if a given hash of miner,requestId has been disputed\n    * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\n    * @return uint disputeId\n    */\n    function getDisputeIdByDisputeHash(ZapStorage.ZapStorageStruct storage self,bytes32 _hash) internal view returns(uint){\n        return  self.disputeIdByDisputeHash[_hash];\n    }\n\n\n    /**\n    * @dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\n    * @param _disputeId is the dispute id;\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the disputeUintVars under the Dispute struct\n    * @return uint value for the bytes32 data submitted\n    */\n    function getDisputeUintVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId,bytes32 _data) internal view returns(uint){\n        return self.disputesById[_disputeId].disputeUintVars[_data];\n    }\n\n    \n    /**\n    * @dev Gets the a value for the latest timestamp available\n    * @return value for timestamp of last proof of work submited\n    * @return true if the is a timestamp for the lastNewValue\n    */\n    function getLastNewValue(ZapStorage.ZapStorageStruct storage self) internal view returns(uint,bool){\n        return (retrieveData(self,self.requestIdByTimestamp[self.uintVars[keccak256(\"timeOfLastNewValue\")]], self.uintVars[keccak256(\"timeOfLastNewValue\")]),true);\n    }\n\n\n    /**\n    * @dev Gets the a value for the latest timestamp available\n    * @param _requestId being requested\n    * @return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\n    */\n    function getLastNewValueById(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(uint,bool){\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \n        if(_request.requestTimestamps.length > 0){\n            return (retrieveData(self,_requestId,_request.requestTimestamps[_request.requestTimestamps.length - 1]),true);\n        }\n        else{\n            return (0,false);\n        }\n    }\n\n\n    /**\n    * @dev Gets blocknumber for mined timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up blocknumber\n    * @return uint of the blocknumber which the dispute was mined\n    */\n    function getMinedBlockNum(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp) internal view returns(uint){\n        return self.requestDetails[_requestId].minedBlockNum[_timestamp];\n    }\n\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up miners for\n    * @return the 5 miners' addresses\n    */\n    function getMinersByRequestIdAndTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(address[5] memory){\n        return self.requestDetails[_requestId].minersByValue[_timestamp];\n    }\n\n\n    /**\n    * @dev Get the name of the token\n    * @return string of the token name\n    */\n    function getName(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\n        return \"Zap Token\";\n    }\n\n\n    /**\n    * @dev Counts the number of values that have been submited for the request \n    * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\n    * request so far\n    * @param _requestId the requestId to look up\n    * @return uint count of the number of values received for the requestId\n    */\n    function getNewValueCountbyRequestId(ZapStorage.ZapStorageStruct storage self, uint _requestId) internal view returns(uint){\n        return self.requestDetails[_requestId].requestTimestamps.length;\n    }\n\n\n    /**\n    * @dev Getter function for the specified requestQ index\n    * @param _index to look up in the requestQ array\n    * @return uint of reqeuestId\n    */\n    function getRequestIdByRequestQIndex(ZapStorage.ZapStorageStruct storage self, uint _index) internal view returns(uint){\n        require(_index <= 50);\n        return self.requestIdByRequestQIndex[_index];\n    }\n\n\n    /**\n    * @dev Getter function for requestId based on timestamp \n    * @param _timestamp to check requestId\n    * @return uint of reqeuestId\n    */\n    function getRequestIdByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _timestamp) internal view returns(uint){    \n        return self.requestIdByTimestamp[_timestamp];\n    }\n\n\n    /**\n    * @dev Getter function for requestId based on the qeuaryHash\n    * @param _queryHash hash(of string api and granularity) to check if a request already exists\n    * @return uint requestId\n    */\n    function getRequestIdByQueryHash(ZapStorage.ZapStorageStruct storage self, bytes32 _queryHash) internal view returns(uint){    \n        return self.requestIdByQueryHash[_queryHash];\n    }\n\n\n    /**\n    * @dev Getter function for the requestQ array\n    * @return the requestQ arrray\n    */\n    function getRequestQ(ZapStorage.ZapStorageStruct storage self) view internal returns(uint[51] memory){\n        return self.requestQ;\n    }\n\n\n    /**\n    * @dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\n    * for the requestId specified\n    * @param _requestId to look up\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the apiUintVars under the requestDetails struct\n    * @return uint value of the apiUintVars specified in _data for the requestId specified\n    */\n    function getRequestUintVars(ZapStorage.ZapStorageStruct storage self,uint _requestId,bytes32 _data) internal view returns(uint){\n        return self.requestDetails[_requestId].apiUintVars[_data];\n    }\n\n\n    /**\n    * @dev Gets the API struct variables that are not mappings\n    * @param _requestId to look up\n    * @return string of api to query\n    * @return string of symbol of api to query\n    * @return bytes32 hash of string\n    * @return bytes32 of the granularity(decimal places) requested\n    * @return uint of index in requestQ array\n    * @return uint of current payout/tip for this requestId\n    */\n    function getRequestVars(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(string memory,string memory, bytes32,uint, uint, uint) {\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \n        return (_request.queryString,_request.dataSymbol,_request.queryHash, _request.apiUintVars[keccak256(\"granularity\")],_request.apiUintVars[keccak256(\"requestQPosition\")],_request.apiUintVars[keccak256(\"totalTip\")]);\n    }\n\n\n    /**\n    * @dev This function allows users to retireve all information about a staker\n    * @param _staker address of staker inquiring about\n    * @return uint current state of staker\n    * @return uint startDate of staking\n    */\n    function getStakerInfo(ZapStorage.ZapStorageStruct storage self,address _staker) internal view returns(uint,uint){\n        return (self.stakerDetails[_staker].currentStatus,self.stakerDetails[_staker].startDate);\n    }\n\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestampt to look up miners for\n    * @return address[5] array of 5 addresses ofminers that mined the requestId\n    */\n    function getSubmissionsByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(uint[5] memory){\n        return self.requestDetails[_requestId].valuesByTimestamp[_timestamp];\n    }\n\n    /**\n    * @dev Get the symbol of the token\n    * @return string of the token symbol\n    */\n    function getSymbol(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\n        return \"TT\";\n    } \n\n\n    /**\n    * @dev Gets the timestamp for the value based on their index\n    * @param _requestID is the requestId to look up\n    * @param _index is the value index to look up\n    * @return uint timestamp\n    */\n    function getTimestampbyRequestIDandIndex(ZapStorage.ZapStorageStruct storage self,uint _requestID, uint _index) internal view returns(uint){\n        return self.requestDetails[_requestID].requestTimestamps[_index];\n    }\n\n\n    /**\n    * @dev Getter for the variables saved under the ZapStorageStruct uintVars variable\n    * @param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \n    * the variables/strings used to save the data in the mapping. The variables names are  \n    * commented out under the uintVars under the ZapStorageStruct struct\n    * This is an example of how data is saved into the mapping within other functions: \n    * self.uintVars[keccak256(\"stakerCount\")]\n    * @return uint of specified variable  \n    */ \n    function getUintVar(ZapStorage.ZapStorageStruct storage self,bytes32 _data) view internal returns(uint){\n        return self.uintVars[_data];\n    }\n\n\n    /**\n    * @dev Getter function for next requestId on queue/request with highest payout at time the function is called\n    * @return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\n    */\n    function getVariablesOnDeck(ZapStorage.ZapStorageStruct storage self) internal view returns(uint, uint,string memory){ \n        uint newRequestId = getTopRequestID(self);\n        return (newRequestId,self.requestDetails[newRequestId].apiUintVars[keccak256(\"totalTip\")],self.requestDetails[newRequestId].queryString);\n    }\n\n\n    /**\n    * @dev Getter function for the request with highest payout. This function is used withing the getVariablesOnDeck function\n    * @return uint _requestId of request with highest payout at the time the function is called\n    */\n    function getTopRequestID(ZapStorage.ZapStorageStruct storage self) internal view returns(uint _requestId){\n            uint _max;\n            uint _index;\n            (_max,_index) = Utilities.getMax(self.requestQ);\n             _requestId = self.requestIdByRequestQIndex[_index];\n    }\n\n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @param _requestId to look up\n    * @param _timestamp is the timestamp to look up miners for\n    * @return bool true if requestId/timestamp is under dispute\n    */\n    function isInDispute(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(bool){\n        return self.requestDetails[_requestId].inDispute[_timestamp];\n    }\n\n\n    /**\n    * @dev Retreive value from oracle based on requestId/timestamp\n    * @param _requestId being requested\n    * @param _timestamp to retreive data/value from\n    * @return uint value for requestId/timestamp submitted\n    */\n    function retrieveData(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns (uint) {\n        return self.requestDetails[_requestId].finalValues[_timestamp];\n    }\n\n\n    /**\n    * @dev Getter for the total_supply of oracle tokens\n    * @return uint total supply\n    */\n    function totalSupply(ZapStorage.ZapStorageStruct storage self) internal view returns (uint) {\n       return self.uintVars[keccak256(\"total_supply\")];\n    }\n\n}\n"
      },
      "contracts/libraries/ZapStake.sol": {
        "content": "pragma solidity ^0.5.0;\n\nimport \"./ZapStorage.sol\";\nimport \"./ZapTransfer.sol\";\nimport \"./ZapDispute.sol\";\n\n/**\n* @title Zap Dispute\n* @dev Contais the methods related to miners staking and unstaking. Zap.sol \n* references this library for function's logic.\n*/\n\nlibrary ZapStake {\n    event NewStake(address indexed _sender);//Emits upon new staker\n    event StakeWithdrawn(address indexed _sender);//Emits when a staker is now no longer staked\n    event StakeWithdrawRequested(address indexed _sender);//Emits when a staker begins the 7 day withdraw period\n\n    /*Functions*/\n    \n    /**\n    * @dev This function stakes the five initial miners, sets the supply and all the constant variables.\n    * This function is called by the constructor function on ZapMaster.sol\n    */\n    function init(ZapStorage.ZapStorageStruct storage self) public{\n        require(self.uintVars[keccak256(\"decimals\")] == 0);\n        //Give this contract 6000 Zap Token so that it can stake the initial 6 miners\n        ZapTransfer.updateBalanceAtNow(self.balances[address(this)], 2**256-1 - 6000e18);\n\n        // //the initial 5 miner addresses are specfied below\n        // //changed payable[5] to 6\n        address payable[6] memory _initalMiners = [\n            address(0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097),\n            address(0xcd3B766CCDd6AE721141F452C550Ca635964ce71),\n            address(0x2546BcD3c84621e976D8185a91A922aE77ECEc30),\n            address(0xbDA5747bFD65F08deb54cb465eB87D40e51B197E),\n            address(0xdD2FD4581271e230360230F9337D5c0430Bf44C0),\n            address(0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199)\n        ];\n        //Stake each of the 5 miners specified above\n        for(uint i=0;i<6;i++){//6th miner to allow for dispute\n            //Miner balance is set at 1000e18 at the block that this function is ran\n            ZapTransfer.updateBalanceAtNow(self.balances[_initalMiners[i]],1000e18);\n\n            newStake(self, _initalMiners[i]);\n        }\n\n        //update the total suppply\n        self.uintVars[keccak256(\"total_supply\")] += 6000e18;//6th miner to allow for dispute\n        //set Constants\n        self.uintVars[keccak256(\"decimals\")] = 18;\n        self.uintVars[keccak256(\"targetMiners\")] = 200;\n        self.uintVars[keccak256(\"stakeAmount\")] = 1000e18;\n        self.uintVars[keccak256(\"disputeFee\")] = 970e18;\n        self.uintVars[keccak256(\"timeTarget\")]= 600;\n        self.uintVars[keccak256(\"timeOfLastNewValue\")] = now - now  % self.uintVars[keccak256(\"timeTarget\")];\n        self.uintVars[keccak256(\"difficulty\")] = 1;\n    }\n\n\n    /**\n    * @dev This function allows stakers to request to withdraw their stake (no longer stake)\n    * once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they\n    * can withdraw the deposit\n    */\n    function requestStakingWithdraw(ZapStorage.ZapStorageStruct storage self) public {\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\n        //Require that the miner is staked\n        require(stakes.currentStatus == 1);\n\n        //Change the miner staked to locked to be withdrawStake\n        stakes.currentStatus = 2;\n\n        //Change the startDate to now since the lock up period begins now\n        //and the miner can only withdraw 7 days later from now(check the withdraw function)\n        stakes.startDate = now -(now % 86400);\n\n        //Reduce the staker count\n        self.uintVars[keccak256(\"stakerCount\")] -= 1;\n        ZapDispute.updateDisputeFee(self);\n        emit StakeWithdrawRequested(msg.sender);\n    }\n\n\n    /**\n    * @dev This function allows users to withdraw their stake after a 7 day waiting period from request \n    */\n    function withdrawStake(ZapStorage.ZapStorageStruct storage self) public {\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\n        //Require the staker has locked for withdraw(currentStatus ==2) and that 7 days have \n        //passed by since they locked for withdraw\n        require(now - (now % 86400) - stakes.startDate >= 7 days);\n        require(stakes.currentStatus == 2);\n        stakes.currentStatus = 0;\n        emit StakeWithdrawn(msg.sender);\n    }\n\n\n    /**\n    * @dev This function allows miners to deposit their stake.\n    */\n    function depositStake(ZapStorage.ZapStorageStruct storage self) public {\n      newStake(self, msg.sender);\n      //self adjusting disputeFee\n      ZapDispute.updateDisputeFee(self);\n    }\n\n    /**\n    * @dev This function is used by the init function to succesfully stake the initial 5 miners.\n    * The function updates their status/state and status start date so they are locked it so they can't withdraw\n    * and updates the number of stakers in the system.\n    */\n    function newStake(ZapStorage.ZapStorageStruct storage self, address staker) internal {\n        require(ZapTransfer.balanceOf(self,staker) >= self.uintVars[keccak256(\"stakeAmount\")]);\n        //Ensure they can only stake if they are not currrently staked or if their stake time frame has ended\n        //and they are currently locked for witdhraw\n        require(self.stakerDetails[staker].currentStatus == 0 || self.stakerDetails[staker].currentStatus == 2);\n        self.uintVars[keccak256(\"stakerCount\")] += 1;\n        self.stakerDetails[staker] = ZapStorage.StakeInfo({\n            currentStatus: 1,\n            //this resets their stake start date to today\n            startDate: now - (now % 86400)\n        });\n        emit NewStake(staker);\n    }\n}\n"
      },
      "contracts/ZapToken.sol": {
        "content": "pragma solidity ^0.5.1;\r\n\r\n// import \"./libraries/SafeMath.sol\";\r\nimport \"./libraries/Ownable.sol\";\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// contract Ownable {\r\n//     address public owner;\r\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n//     /**\r\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n//      * account.\r\n//      */\r\n//     constructor() public {\r\n//         owner = msg.sender;\r\n//     }\r\n//     /**\r\n//      * @dev Throws if called by any account other than the owner.\r\n//      */\r\n//     modifier onlyOwner() {\r\n//         require(msg.sender == owner);\r\n//         _;\r\n//     }\r\n//     /**\r\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n//      * @param newOwner The address to transfer ownership to.\r\n//      */\r\n//     function transferOwnership(address newOwner) onlyOwner public {\r\n//         require(newOwner != address(0));\r\n//         emit OwnershipTransferred(owner, newOwner);\r\n//         owner = newOwner;\r\n//     }\r\n// }\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value <= _allowance);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    /**\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     */\r\n    function increaseApproval (address _spender, uint _addedValue) public\r\n        returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    function decreaseApproval (address _spender, uint _subtractedValue) public\r\n        returns (bool success) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n    bool public mintingFinished = false;\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Mint(_to, _amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() onlyOwner public returns (bool) {\r\n        mintingFinished = true;\r\n        emit MintFinished();\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ZapToken is MintableToken {\r\n    string public name = \"Zap\";\r\n    string public symbol = \"ZAP\";\r\n    uint256 public decimals = 18;\r\n\r\n    function allocate(address to, uint amount) public{\r\n        mint(to,amount);\r\n    }\r\n}\r\n"
      },
      "contracts/libraries/SafeMathM.sol": {
        "content": "pragma solidity ^0.5.0;\n\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\nlibrary SafeMathM {\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max(uint a, uint b) internal pure returns (uint256) {\n    return a > b ? a : b;\n  }\n\n  function max(int256 a, int256 b) internal pure returns (uint256) {\n    return a > b ? uint(a) : uint(b);\n  }\n\n  function min(uint a, uint b) internal pure returns (uint256) {\n    return a < b ? a : b;\n  }\n  \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n}\n"
      },
      "contracts/libraries/Utilities.sol": {
        "content": "pragma solidity ^0.5.0;\n\n//Functions for retrieving min and Max in 51 length array (requestQ)\n//Taken partly from: https://github.com/modular-network/ethereum-libraries-array-utils/blob/master/contracts/Array256Lib.sol\n\nlibrary Utilities{\n\n  /// @dev Returns the minimum value and position in an array.\n  //@note IT IGNORES THE 0 INDEX\n    function getMin(uint[51] memory arr) internal pure returns (uint256 min, uint256 minIndex) {\n      assembly {\n          minIndex := 50\n          min := mload(add(arr, mul(minIndex , 0x20)))\n          for {let i := 49 } gt(i,0) { i := sub(i, 1) } {\n              let item := mload(add(arr, mul(i, 0x20)))\n              if lt(item,min){\n                  min := item\n                  minIndex := i\n              }\n          }\n      }\n    }\n\n  // function getMin(uint[51] memory data) internal pure returns(uint256 minimal,uint minIndex) {\n  //       minIndex = data.length - 1;\n  //       minimal = data[minIndex];\n  //       for(uint i = data.length-1;i > 0;i--) {\n  //           if(data[i] < minimal) {\n  //               minimal = data[i];\n  //               minIndex = i;\n  //           }\n  //       }\n  // }\n  \n  function getMax(uint256[51] memory arr) internal pure returns (uint256 max, uint256 maxIndex) {\n      assembly {\n          for { let i := 0 } lt(i,51) { i := add(i, 1) } {\n              let item := mload(add(arr, mul(i, 0x20)))\n              if lt(max, item) {\n                  max := item\n                  maxIndex := i\n              }\n          }\n      }\n    }\n\n  }\n"
      },
      "contracts/libraries/ZapDispute.sol": {
        "content": "pragma solidity ^0.5.0;\n\nimport \"./ZapStorage.sol\";\nimport \"./ZapTransfer.sol\";\n\n/**\n* @title Zap Dispute\n* @dev Contais the methods related to disputes. Zap.sol references this library for function's logic.\n*/\n\n\nlibrary ZapDispute {\n    using SafeMathM for uint256;\n\n    event NewDispute(uint indexed _disputeId, uint indexed _requestId, uint _timestamp, address _miner);//emitted when a new dispute is initialized\n    event Voted(uint indexed _disputeID, bool _position, address indexed _voter);//emitted when a new vote happens\n    event DisputeVoteTallied(uint indexed _disputeID, int _result,address indexed _reportedMiner,address _reportingParty, bool _active);//emitted upon dispute tally\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\n\n    /*Functions*/\n    \n    /**\n    * @dev Helps initialize a dispute by assigning it a disputeId\n    * when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the\n    * invalidated value information to POS voting\n    * @param _requestId being disputed\n    * @param _timestamp being disputed\n    * @param _minerIndex the index of the miner that submitted the value being disputed. Since each official value\n    * requires 5 miners to submit a value.\n    */\n    function beginDispute(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp,uint _minerIndex) public {\n        ZapStorage.Request storage _request = self.requestDetails[_requestId];\n        //require that no more than a day( (24 hours * 60 minutes)/10minutes=144 blocks) has gone by since the value was \"mined\"\n        require(block.number- _request.minedBlockNum[_timestamp]<= 144);\n        require(_request.minedBlockNum[_timestamp] > 0);\n        require(_minerIndex < 5);\n        \n        //_miner is the miner being disputed. For every mined value 5 miners are saved in an array and the _minerIndex\n        //provided by the party initiating the dispute\n        address _miner = _request.minersByValue[_timestamp][_minerIndex];\n        bytes32 _hash = keccak256(abi.encodePacked(_miner,_requestId,_timestamp));\n        \n        //Ensures that a dispute is not already open for the that miner, requestId and timestamp\n        require(self.disputeIdByDisputeHash[_hash] == 0);\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\"disputeFee\")]);\n        \n        //Increase the dispute count by 1\n        self.uintVars[keccak256(\"disputeCount\")] =  self.uintVars[keccak256(\"disputeCount\")] + 1;\n        \n        //Sets the new disputeCount as the disputeId\n        uint disputeId = self.uintVars[keccak256(\"disputeCount\")];\n        \n        //maps the dispute hash to the disputeId\n        self.disputeIdByDisputeHash[_hash] = disputeId;\n        //maps the dispute to the Dispute struct\n        self.disputesById[disputeId] = ZapStorage.Dispute({\n            hash:_hash,\n            isPropFork: false,\n            reportedMiner: _miner,\n            reportingParty: msg.sender,\n            proposedForkAddress:address(0),\n            executed: false,\n            disputeVotePassed: false,\n            tally: 0\n            });\n        \n        //Saves all the dispute variables for the disputeId\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"requestId\")] = _requestId;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"timestamp\")] = _timestamp;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"value\")] = _request.valuesByTimestamp[_timestamp][_minerIndex];\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"minExecutionDate\")] = now + 7 days;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"blockNumber\")] = block.number;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"minerSlot\")] = _minerIndex;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"fee\")]  = self.uintVars[keccak256(\"disputeFee\")];\n        \n        //Values are sorted as they come in and the official value is the median of the first five\n        //So the \"official value\" miner is always minerIndex==2. If the official value is being \n        //disputed, it sets its status to inDispute(currentStatus = 3) so that users are made aware it is under dispute\n        if(_minerIndex == 2){\n            self.requestDetails[_requestId].inDispute[_timestamp] = true;\n        }\n        self.stakerDetails[_miner].currentStatus = 3;\n        emit NewDispute(disputeId,_requestId,_timestamp,_miner);\n    }\n\n\n    /**\n    * @dev Allows token holders to vote\n    * @param _disputeId is the dispute id\n    * @param _supportsDispute is the vote (true=the dispute has basis false = vote against dispute)\n    */\n    function vote(ZapStorage.ZapStorageStruct storage self, uint _disputeId, bool _supportsDispute) public {\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\n        \n        //Get the voteWeight or the balance of the user at the time/blockNumber the disupte began\n        uint voteWeight = ZapTransfer.balanceOfAt(self,msg.sender,disp.disputeUintVars[keccak256(\"blockNumber\")]);\n        \n        //Require that the msg.sender has not voted\n        require(disp.voted[msg.sender] != true);\n        \n        //Requre that the user had a balance >0 at time/blockNumber the disupte began\n        require(voteWeight > 0);\n        \n        //ensures miners that are under dispute cannot vote\n        require(self.stakerDetails[msg.sender].currentStatus != 3);\n        \n        //Update user voting status to true\n        disp.voted[msg.sender] = true;\n        \n        //Update the number of votes for the dispute\n        disp.disputeUintVars[keccak256(\"numberOfVotes\")] += 1;\n        \n        //Update the quorum by adding the voteWeight\n        disp.disputeUintVars[keccak256(\"quorum\")] += voteWeight; \n        \n        //If the user supports the dispute increase the tally for the dispute by the voteWeight\n        //otherwise decrease it\n        if (_supportsDispute) {\n            disp.tally = disp.tally + int(voteWeight);\n        } else {\n            disp.tally = disp.tally - int(voteWeight);\n        }\n        \n        //Let the network know the user has voted on the dispute and their casted vote\n        emit Voted(_disputeId,_supportsDispute,msg.sender);\n    }\n\n\n    /**\n    * @dev tallies the votes.\n    * @param _disputeId is the dispute id\n    */\n    function tallyVotes(ZapStorage.ZapStorageStruct storage self, uint _disputeId) public {\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\n        ZapStorage.Request storage _request = self.requestDetails[disp.disputeUintVars[keccak256(\"requestId\")]];\n\n        //Ensure this has not already been executed/tallied\n        require(disp.executed == false);\n\n        //Ensure the time for voting has elapsed\n        require(now > disp.disputeUintVars[keccak256(\"minExecutionDate\")]);  \n\n        //If the vote is not a proposed fork \n        if (disp.isPropFork== false){\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[disp.reportedMiner];  \n            //If the vote for disputing a value is succesful(disp.tally >0) then unstake the reported \n            // miner and transfer the stakeAmount and dispute fee to the reporting party \n            if (disp.tally > 0 ) { \n\n                //Changing the currentStatus and startDate unstakes the reported miner and allows for the\n                //transfer of the stakeAmount\n                stakes.currentStatus = 0;\n                stakes.startDate = now -(now % 86400);\n\n                //Decreases the stakerCount since the miner's stake is being slashed\n                self.uintVars[keccak256(\"stakerCount\")]--;\n                updateDisputeFee(self);\n\n                //Transfers the StakeAmount from the reporded miner to the reporting party\n                ZapTransfer.doTransfer(self, disp.reportedMiner,disp.reportingParty, self.uintVars[keccak256(\"stakeAmount\")]);\n                \n                //Returns the dispute fee to the reportingParty\n                ZapTransfer.doTransfer(self, address(this),disp.reportingParty,disp.disputeUintVars[keccak256(\"fee\")]);\n                \n                //Set the dispute state to passed/true\n                disp.disputeVotePassed = true;\n\n                //If the dispute was succeful(miner found guilty) then update the timestamp value to zero\n                //so that users don't use this datapoint\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\"timestamp\")]] == true){\n                    _request.finalValues[disp.disputeUintVars[keccak256(\"timestamp\")]] = 0;\n                }\n\n            //If the vote for disputing a value is unsuccesful then update the miner status from being on \n            //dispute(currentStatus=3) to staked(currentStatus =1) and tranfer the dispute fee to the miner\n            } else {\n                //Update the miner's current status to staked(currentStatus = 1)\n                stakes.currentStatus = 1;              \n                //tranfer the dispute fee to the miner\n                ZapTransfer.doTransfer(self,address(this),disp.reportedMiner,disp.disputeUintVars[keccak256(\"fee\")]);\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\"timestamp\")]] == true){\n                    _request.inDispute[disp.disputeUintVars[keccak256(\"timestamp\")]] = false;\n                }\n            }\n        //If the vote is for a proposed fork require a 20% quorum before exceduting the update to the new zap contract address\n        } else {\n            if(disp.tally > 0 ){\n                require(disp.disputeUintVars[keccak256(\"quorum\")] >  (self.uintVars[keccak256(\"total_supply\")] * 20 / 100));\n                self.addressVars[keccak256(\"zapContract\")] = disp.proposedForkAddress;\n                disp.disputeVotePassed = true;\n                emit NewZapAddress(disp.proposedForkAddress);\n            }\n        }\n        \n        //update the dispute status to executed\n        disp.executed = true;\n        emit DisputeVoteTallied(_disputeId,disp.tally,disp.reportedMiner,disp.reportingParty,disp.disputeVotePassed);\n    }\n\n\n    /**\n    * @dev Allows for a fork to be proposed\n    * @param _propNewZapAddress address for new proposed Zap\n    */\n    function proposeFork(ZapStorage.ZapStorageStruct storage self, address _propNewZapAddress) public {\n        bytes32 _hash = keccak256(abi.encodePacked(_propNewZapAddress));\n        require(self.disputeIdByDisputeHash[_hash] == 0);\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\"disputeFee\")]);//This is the fork fee\n        self.uintVars[keccak256(\"disputeCount\")]++;\n        uint disputeId = self.uintVars[keccak256(\"disputeCount\")];\n        self.disputeIdByDisputeHash[_hash] = disputeId;\n        self.disputesById[disputeId] = ZapStorage.Dispute({\n            hash: _hash,\n            isPropFork: true,\n            reportedMiner: msg.sender, \n            reportingParty: msg.sender, \n            proposedForkAddress: _propNewZapAddress,\n            executed: false,\n            disputeVotePassed: false,\n            tally: 0\n            }); \n        self.disputesById[disputeId].disputeUintVars[keccak256(\"blockNumber\")] = block.number;\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"fee\")]  = self.uintVars[keccak256(\"disputeFee\")];\n        self.disputesById[disputeId].disputeUintVars[keccak256(\"minExecutionDate\")] = now + 7 days;\n    }\n    \n\n    /**\n    * @dev this function allows the dispute fee to fluctuate based on the number of miners on the system.\n    * The floor for the fee is 15e18.\n    */\n    function updateDisputeFee(ZapStorage.ZapStorageStruct storage self) public {\n            //if the number of staked miners divided by the target count of staked miners is less than 1\n            if(self.uintVars[keccak256(\"stakerCount\")]*1000/self.uintVars[keccak256(\"targetMiners\")] < 1000){\n                //Set the dispute fee at stakeAmt * (1- stakerCount/targetMiners)\n                //or at the its minimum of 15e18 \n                self.uintVars[keccak256(\"disputeFee\")] = SafeMathM.max(15e18,self.uintVars[keccak256(\"stakeAmount\")].mul(1000 - self.uintVars[keccak256(\"stakerCount\")]*1000/self.uintVars[keccak256(\"targetMiners\")])/1000);\n            }\n            else{\n                //otherwise set the dispute fee at 15e18 (the floor/minimum fee allowed)\n                self.uintVars[keccak256(\"disputeFee\")] = 15e18;\n            }\n    }\n}\n"
      },
      "contracts/libraries/Ownable.sol": {
        "content": "pragma solidity ^0.5.1;\r\n\r\ncontract Ownable {\r\n    address payable public owner;\r\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\r\n\r\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\r\n    constructor() public { owner = msg.sender; }\r\n\r\n    /// @dev Throws if called by any contract other than latest designated caller\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    /// @param newOwner The address to transfer ownership to.\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n"
      },
      "contracts/ZapMaster.sol": {
        "content": "pragma solidity ^0.5.0;\n\nimport \"./ZapGetters.sol\";\n\n/**\n* @title Zap Master\n* @dev This is the Master contract with all zap getter functions and delegate call to Zap. \n* The logic for the functions on this contract is saved on the ZapGettersLibrary, ZapTransfer, \n* ZapGettersLibrary, and ZapStake\n*/\ncontract ZapMaster is ZapGetters{\n    \n    event NewZapAddress(address _newZap);\n\n    /**\n    * @dev The constructor sets the original `zapStorageOwner` of the contract to the sender\n    * account, the zap contract to the Zap master address and owner to the Zap master owner address \n    * @param _zapContract is the address for the zap contract\n    */\n    constructor (address _zapContract)  public{\n        zap.init();\n        zap.addressVars[keccak256(\"_owner\")] = msg.sender;\n        zap.addressVars[keccak256(\"_deity\")] = msg.sender;\n        zap.addressVars[keccak256(\"zapContract\")]= _zapContract;\n        emit NewZapAddress(_zapContract);\n    }\n    \n\n    /**\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n    * @dev Only needs to be in library\n    * @param _newDeity the new Deity in the contract\n    */\n\n    function changeDeity(address _newDeity) external{\n        zap.changeDeity(_newDeity);\n    }\n\n\n    /**\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n    * @param _zapContract the address of the new Zap Contract\n    */\n    function changeZapContract(address _zapContract) external{\n        zap.changeZapContract(_zapContract);\n    }\n  \n\n    /**\n    * @dev This is the fallback function that allows contracts to call the zap contract at the address stored\n    */\n    function () external payable {\n        address addr = zap.addressVars[keccak256(\"zapContract\")];\n        bytes memory _calldata = msg.data;\n        assembly {\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n            let size := returndatasize\n            let ptr := mload(0x40)\n            returndatacopy(ptr, 0, size)\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n            // if the call returned error data, forward it\n            switch result case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": [
            "ast"
          ]
        }
      },
      "metadata": {
        "useLiteralContent": true
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/ZapGetters.sol": {
        "ZapGetters": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "mintingFinished",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getRequestIdByTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getSubmissionsByTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256[5]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getAddressVars",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getSymbol",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getName",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getVariablesOnDeck",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalTokenSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_request",
                  "type": "bytes32"
                }
              ],
              "name": "getRequestIdByQueryHash",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getLastNewValueById",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "isInDispute",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getNewValueCountbyRequestId",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getUintVar",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getRequestIdByRequestQIndex",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_challenge",
                  "type": "bytes32"
                },
                {
                  "name": "_miner",
                  "type": "address"
                }
              ],
              "name": "didMine",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getMinersByRequestIdAndTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "address[5]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_staker",
                  "type": "address"
                }
              ],
              "name": "getStakerInfo",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestID",
                  "type": "uint256"
                },
                {
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getTimestampbyRequestIDandIndex",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "finishMinting",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getDisputeUintVars",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "retrieveData",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "allowedToTrade",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getCurrentVariables",
              "outputs": [
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "didVote",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                }
              ],
              "name": "getAllDisputeVars",
              "outputs": [
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "uint256[9]"
                },
                {
                  "name": "",
                  "type": "int256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getRequestQ",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256[51]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "allocate",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getMinedBlockNum",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "getDisputeIdByDisputeHash",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getRequestUintVars",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getRequestVars",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getLastNewValue",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "name": "zapToken",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [],
              "name": "MintFinished",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "Oracle contract with all zap getter functions. The logic for the functions on this contract  is saved on the ZapGettersLibrary, ZapTransfer, ZapGettersLibrary, and ZapStake",
            "methods": {
              "allowance(address,address)": {
                "params": {
                  "_spender": "address",
                  "_user": "address"
                },
                "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
              },
              "allowedToTrade(address,uint256)": {
                "details": "This function returns whether or not a given user is allowed to trade a given amount  ",
                "params": {
                  "_amount": "uint of amount",
                  "_user": "address"
                },
                "return": "true if the user is alloed to trade the amount specified"
              },
              "approve(address,uint256)": {
                "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
                "params": {
                  "_spender": "The address which will spend the funds.\r",
                  "_value": "The amount of tokens to be spent.\r"
                }
              },
              "balanceOf(address)": {
                "details": "Gets balance of owner specified",
                "params": {
                  "_user": "is the owner address used to look up the balance"
                },
                "return": "Returns the balance associated with the passed in _user"
              },
              "didMine(bytes32,address)": {
                "details": "This function tells you if a given challenge has been completed by a given miner",
                "params": {
                  "_challenge": "the challenge to search for",
                  "_miner": "address that you want to know if they solved the challenge"
                },
                "return": "true if the _miner address provided solved the "
              },
              "didVote(uint256,address)": {
                "details": "Checks if an address voted in a given dispute",
                "params": {
                  "_address": "to look up",
                  "_disputeId": "to look up"
                },
                "return": "bool of whether or not party voted"
              },
              "finishMinting()": {
                "details": "Function to stop minting new tokens.\r",
                "return": "True if the operation was successful.\r"
              },
              "getAddressVars(bytes32)": {
                "details": "allows Zap to read data from the addressVars mapping",
                "params": {
                  "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"zapContract\")]"
                }
              },
              "getAllDisputeVars(uint256)": {
                "details": "Gets all dispute variables",
                "params": {
                  "_disputeId": "to look up"
                },
                "return": "bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
              },
              "getCurrentVariables()": {
                "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
                "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request "
              },
              "getDisputeIdByDisputeHash(bytes32)": {
                "details": "Checks if a given hash of miner,requestId has been disputed",
                "params": {
                  "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
                },
                "return": "uint disputeId"
              },
              "getDisputeUintVars(uint256,bytes32)": {
                "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct",
                  "_disputeId": "is the dispute id;"
                },
                "return": "uint value for the bytes32 data submitted"
              },
              "getLastNewValue()": {
                "details": "Gets the a value for the latest timestamp available",
                "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
              },
              "getLastNewValueById(uint256)": {
                "details": "Gets the a value for the latest timestamp available",
                "params": {
                  "_requestId": "being requested"
                },
                "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
              },
              "getMinedBlockNum(uint256,uint256)": {
                "details": "Gets blocknumber for mined timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up blocknumber"
                },
                "return": "uint of the blocknumber which the dispute was mined"
              },
              "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up miners for"
                },
                "return": "the 5 miners' addresses"
              },
              "getName()": {
                "details": "Get the name of the token return string of the token name"
              },
              "getNewValueCountbyRequestId(uint256)": {
                "details": "Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
                "params": {
                  "_requestId": "the requestId to look up"
                },
                "return": "uint count of the number of values received for the requestId"
              },
              "getRequestIdByQueryHash(bytes32)": {
                "details": "Getter function for requestId based on the queryHash",
                "params": {
                  "_request": "is the hash(of string api and granularity) to check if a request already exists"
                },
                "return": "uint requestId"
              },
              "getRequestIdByRequestQIndex(uint256)": {
                "details": "Getter function for the specified requestQ index",
                "params": {
                  "_index": "to look up in the requestQ array"
                },
                "return": "uint of reqeuestId"
              },
              "getRequestIdByTimestamp(uint256)": {
                "details": "Getter function for requestId based on timestamp ",
                "params": {
                  "_timestamp": "to check requestId"
                },
                "return": "uint of reqeuestId"
              },
              "getRequestQ()": {
                "details": "Getter function for the requestQ array",
                "return": "the requestQ arrray"
              },
              "getRequestUintVars(uint256,bytes32)": {
                "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct",
                  "_requestId": "to look up"
                },
                "return": "uint value of the apiUintVars specified in _data for the requestId specified"
              },
              "getRequestVars(uint256)": {
                "details": "Gets the API struct variables that are not mappings",
                "params": {
                  "_requestId": "to look up"
                },
                "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
              },
              "getStakerInfo(address)": {
                "details": "This function allows users to retireve all information about a staker",
                "params": {
                  "_staker": "address of staker inquiring about"
                },
                "return": "uint current state of stakeruint startDate of staking"
              },
              "getSubmissionsByTimestamp(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestampt to look up miners for"
                },
                "return": "address[5] array of 5 addresses ofminers that mined the requestId"
              },
              "getSymbol()": {
                "details": "Get the symbol of the token return string of the token symbol"
              },
              "getTimestampbyRequestIDandIndex(uint256,uint256)": {
                "details": "Gets the timestamp for the value based on their index",
                "params": {
                  "_index": "is the value index to look up",
                  "_requestID": "is the requestId to look up"
                },
                "return": "uint timestamp"
              },
              "getUintVar(bytes32)": {
                "details": "Getter for the variables saved under the ZapStorageStruct uintVars variable",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the ZapStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\"stakerCount\")]"
                },
                "return": "uint of specified variable  "
              },
              "getVariablesOnDeck()": {
                "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
                "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
              },
              "isInDispute(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up miners for"
                },
                "return": "bool true if requestId/timestamp is under dispute"
              },
              "mint(address,uint256)": {
                "details": "Function to mint tokens\r",
                "params": {
                  "_amount": "The amount of tokens to mint.\r",
                  "_to": "The address that will receive the minted tokens.\r"
                },
                "return": "A boolean that indicates if the operation was successful.\r"
              },
              "retrieveData(uint256,uint256)": {
                "details": "Retreive value from oracle based on timestamp",
                "params": {
                  "_requestId": "being requested",
                  "_timestamp": "to retreive data/value from"
                },
                "return": "value for timestamp submitted"
              },
              "totalTokenSupply()": {
                "details": "Getter for the total_supply of oracle tokens",
                "return": "uint total supply"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfer tokens from one address to another\r",
                "params": {
                  "_from": "address The address which you want to send tokens from\r",
                  "_to": "address The address which you want to transfer to\r",
                  "_value": "uint256 the amount of tokens to be transferred\r"
                }
              },
              "transferOwnership(address)": {
                "params": {
                  "newOwner": "The address to transfer ownership to."
                }
              }
            },
            "title": "Zap Getters"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 9706
                    }
                  ]
                }
              },
              "object": "60806040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280600381526020017f5a61700000000000000000000000000000000000000000000000000000000000815250600490805190602001906200006c92919062000189565b506040805190810160405280600381526020017f5a4150000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba92919062000189565b506012600655348015620000cd57600080fd5b50604051602080620041f383398101806040526020811015620000ef57600080fd5b810190808051906020019092919050505033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080605260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000238565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001cc57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fc578251825591602001919060010190620001df565b5b5090506200020c919062000210565b5090565b6200023591905b808211156200023157600081600090555060010162000217565b5090565b90565b613fab80620002486000396000f3fe60806040526004361061022a576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b1461022f57806306fdde031461025e578063095ea7b3146102ee5780630f0b424d1461036157806311c98512146103b0578063133bee5e1461043157806315070401146104ac57806317d7de7c1461053c57806318160ddd146105cc57806319e8e03b146105f75780631ca8b6cb146106955780631db842f0146106c057806323b872dd1461070f578063313ce567146107a25780633180f8df146107cd5780633df0777b1461082757806340c10f191461088457806346eee1c4146108f7578063612c8f7f146109465780636173c0b81461099557806363bb82ad146109e45780636618846314610a5757806369026d6314610aca57806370a0823114610b4b578063733bdef014610bb057806377fbb66314610c1c5780637d64bcb414610c755780637f6fd5d914610ca45780638da5cb5b14610cfd57806393fa491514610d5457806395d89b4114610dad578063999cf26c14610e3d578063a22e407a14610eb0578063a7c438bc14610f63578063a9059cbb14610fd6578063af0b132714611049578063b541302914611188578063b78b52df146111db578063c775b54214611236578063d73dd6231461128f578063da37994114611302578063dd62ed3e14611351578063e0ae93c1146113d6578063e1eee6d61461142f578063f2fde38b1461156b578063fc7cf0a0146115bc575b600080fd5b34801561023b57600080fd5b506102446115f2565b604051808215151515815260200191505060405180910390f35b34801561026a57600080fd5b50610273611605565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b3578082015181840152602081019050610298565b50505050905090810190601f1680156102e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fa57600080fd5b506103476004803603604081101561031157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a3565b604051808215151515815260200191505060405180910390f35b34801561036d57600080fd5b5061039a6004803603602081101561038457600080fd5b8101908080359060200190929190505050611795565b6040518082815260200191505060405180910390f35b3480156103bc57600080fd5b506103f3600480360360408110156103d357600080fd5b8101908080359060200190929190803590602001909291905050506117b2565b6040518082600560200280838360005b8381101561041e578082015181840152602081019050610403565b5050505090500191505060405180910390f35b34801561043d57600080fd5b5061046a6004803603602081101561045457600080fd5b81019080803590602001909291905050506117d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b857600080fd5b506104c16117f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105015780820151818401526020810190506104e6565b50505050905090810190601f16801561052e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054857600080fd5b50610551611806565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610591578082015181840152602081019050610576565b50505050905090810190601f1680156105be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105d857600080fd5b506105e1611817565b6040518082815260200191505060405180910390f35b34801561060357600080fd5b5061060c61181d565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561065857808201518184015260208101905061063d565b50505050905090810190601f1680156106855780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106a157600080fd5b506106aa611837565b6040518082815260200191505060405180910390f35b3480156106cc57600080fd5b506106f9600480360360208110156106e357600080fd5b8101908080359060200190929190505050611848565b6040518082815260200191505060405180910390f35b34801561071b57600080fd5b506107886004803603606081101561073257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611865565b604051808215151515815260200191505060405180910390f35b3480156107ae57600080fd5b506107b7611b51565b6040518082815260200191505060405180910390f35b3480156107d957600080fd5b50610806600480360360208110156107f057600080fd5b8101908080359060200190929190505050611b57565b60405180838152602001821515151581526020019250505060405180910390f35b34801561083357600080fd5b5061086a6004803603604081101561084a57600080fd5b810190808035906020019092919080359060200190929190505050611b77565b604051808215151515815260200191505060405180910390f35b34801561089057600080fd5b506108dd600480360360408110156108a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b97565b604051808215151515815260200191505060405180910390f35b34801561090357600080fd5b506109306004803603602081101561091a57600080fd5b8101908080359060200190929190505050611d7f565b6040518082815260200191505060405180910390f35b34801561095257600080fd5b5061097f6004803603602081101561096957600080fd5b8101908080359060200190929190505050611d9c565b6040518082815260200191505060405180910390f35b3480156109a157600080fd5b506109ce600480360360208110156109b857600080fd5b8101908080359060200190929190505050611db9565b6040518082815260200191505060405180910390f35b3480156109f057600080fd5b50610a3d60048036036040811015610a0757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dd6565b604051808215151515815260200191505060405180910390f35b348015610a6357600080fd5b50610ab060048036036040811015610a7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611df6565b604051808215151515815260200191505060405180910390f35b348015610ad657600080fd5b50610b0d60048036036040811015610aed57600080fd5b810190808035906020019092919080359060200190929190505050612087565b6040518082600560200280838360005b83811015610b38578082015181840152602081019050610b1d565b5050505090500191505060405180910390f35b348015610b5757600080fd5b50610b9a60048036036020811015610b6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120ad565b6040518082815260200191505060405180910390f35b348015610bbc57600080fd5b50610bff60048036036020811015610bd357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121ac565b604051808381526020018281526020019250505060405180910390f35b348015610c2857600080fd5b50610c5f60048036036040811015610c3f57600080fd5b8101908080359060200190929190803590602001909291905050506121cc565b6040518082815260200191505060405180910390f35b348015610c8157600080fd5b50610c8a6121ec565b604051808215151515815260200191505060405180910390f35b348015610cb057600080fd5b50610ce760048036036040811015610cc757600080fd5b810190808035906020019092919080359060200190929190505050612298565b6040518082815260200191505060405180910390f35b348015610d0957600080fd5b50610d126122b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d6057600080fd5b50610d9760048036036040811015610d7757600080fd5b8101908080359060200190929190803590602001909291905050506122de565b6040518082815260200191505060405180910390f35b348015610db957600080fd5b50610dc26122fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e02578082015181840152602081019050610de7565b50505050905090810190601f168015610e2f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e4957600080fd5b50610e9660048036036040811015610e6057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061239c565b604051808215151515815260200191505060405180910390f35b348015610ebc57600080fd5b50610ec561248b565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610f23578082015181840152602081019050610f08565b50505050905090810190601f168015610f505780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610f6f57600080fd5b50610fbc60048036036040811015610f8657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124b3565b604051808215151515815260200191505060405180910390f35b348015610fe257600080fd5b5061102f60048036036040811015610ff957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124d3565b604051808215151515815260200191505060405180910390f35b34801561105557600080fd5b506110826004803603602081101561106c57600080fd5b81019080803590602001909291905050506126a9565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b8381101561116757808201518184015260208101905061114c565b50505050905001828152602001995050505050505050505060405180910390f35b34801561119457600080fd5b5061119d6126f1565b6040518082603360200280838360005b838110156111c85780820151818401526020810190506111ad565b5050505090500191505060405180910390f35b3480156111e757600080fd5b50611234600480360360408110156111fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612708565b005b34801561124257600080fd5b506112796004803603604081101561125957600080fd5b810190808035906020019092919080359060200190929190505050612717565b6040518082815260200191505060405180910390f35b34801561129b57600080fd5b506112e8600480360360408110156112b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612737565b604051808215151515815260200191505060405180910390f35b34801561130e57600080fd5b5061133b6004803603602081101561132557600080fd5b8101908080359060200190929190505050612933565b6040518082815260200191505060405180910390f35b34801561135d57600080fd5b506113c06004803603604081101561137457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612950565b6040518082815260200191505060405180910390f35b3480156113e257600080fd5b50611419600480360360408110156113f957600080fd5b810190808035906020019092919080359060200190929190505050612a84565b6040518082815260200191505060405180910390f35b34801561143b57600080fd5b506114686004803603602081101561145257600080fd5b8101908080359060200190929190505050612aa4565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b838110156114c45780820151818401526020810190506114a9565b50505050905090810190601f1680156114f15780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561152a57808201518184015260208101905061150f565b50505050905090810190601f1680156115575780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561157757600080fd5b506115ba6004803603602081101561158e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ad6565b005b3480156115c857600080fd5b506115d1612c2e565b60405180838152602001821515151581526020019250505060405180910390f35b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169b5780601f106116705761010080835404028352916020019161169b565b820191906000526020600020905b81548152906001019060200180831161167e57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006117ab826007612c4390919063ffffffff16565b9050919050565b6117ba613ef1565b6117d083836007612c639092919063ffffffff16565b905092915050565b60006117ee826007612cd990919063ffffffff16565b9050919050565b60606118016007612d19565b905090565b60606118126007612d58565b905090565b60005481565b600080606061182c6007612d97565b925092509250909192565b60006118436007612ecb565b905090565b600061185e826007612f1f90919063ffffffff16565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118a257600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061197583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f3f90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f5890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a608382612f3f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b600080611b6e836007612f7690919063ffffffff16565b91509150915091565b6000611b8f83836007612ff19092919063ffffffff16565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bf557600080fd5b600360149054906101000a900460ff16151515611c1157600080fd5b611c2682600054612f5890919063ffffffff16565b600081905550611c7e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f5890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000611d9582600761303390919063ffffffff16565b9050919050565b6000611db282600761305990919063ffffffff16565b9050919050565b6000611dcf82600761307990919063ffffffff16565b9050919050565b6000611dee838360076130a99092919063ffffffff16565b905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611f07576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f9b565b611f1a8382612f3f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b61208f613f14565b6120a5838360076131149092919063ffffffff16565b905092915050565b6000605260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561216a57600080fd5b505afa15801561217e573d6000803e3d6000fd5b505050506040513d602081101561219457600080fd5b81019080805190602001909291905050509050919050565b6000806121c38360076131c090919063ffffffff16565b91509150915091565b60006121e4838360076132589092919063ffffffff16565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561224a57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b60006122b0838360076132939092919063ffffffff16565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006122f6838360076132c89092919063ffffffff16565b905092915050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123945780601f1061236957610100808354040283529160200191612394565b820191906000526020600020905b81548152906001019060200180831161237757829003601f168201915b505050505081565b6000600773__$946cc509dcf4b4c97ecabc42418c409021$",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A61700000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x6C SWAP3 SWAP2 SWAP1 PUSH3 0x189 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A41500000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xBA SWAP3 SWAP2 SWAP1 PUSH3 0x189 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x6 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0xCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH3 0x41F3 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH3 0xEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP CALLER PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x52 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH3 0x238 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x1CC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1FD JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1FD JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1FC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1DF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x20C SWAP2 SWAP1 PUSH3 0x210 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x235 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x231 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x217 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FAB DUP1 PUSH3 0x248 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22A JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0xF0B424D EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x11C98512 EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x133BEE5E EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x15070401 EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x17D7DE7C EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x19E8E03B EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0x1CA8B6CB EQ PUSH2 0x695 JUMPI DUP1 PUSH4 0x1DB842F0 EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x70F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x7A2 JUMPI DUP1 PUSH4 0x3180F8DF EQ PUSH2 0x7CD JUMPI DUP1 PUSH4 0x3DF0777B EQ PUSH2 0x827 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x884 JUMPI DUP1 PUSH4 0x46EEE1C4 EQ PUSH2 0x8F7 JUMPI DUP1 PUSH4 0x612C8F7F EQ PUSH2 0x946 JUMPI DUP1 PUSH4 0x6173C0B8 EQ PUSH2 0x995 JUMPI DUP1 PUSH4 0x63BB82AD EQ PUSH2 0x9E4 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0xA57 JUMPI DUP1 PUSH4 0x69026D63 EQ PUSH2 0xACA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB4B JUMPI DUP1 PUSH4 0x733BDEF0 EQ PUSH2 0xBB0 JUMPI DUP1 PUSH4 0x77FBB663 EQ PUSH2 0xC1C JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0xC75 JUMPI DUP1 PUSH4 0x7F6FD5D9 EQ PUSH2 0xCA4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCFD JUMPI DUP1 PUSH4 0x93FA4915 EQ PUSH2 0xD54 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xDAD JUMPI DUP1 PUSH4 0x999CF26C EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0xA22E407A EQ PUSH2 0xEB0 JUMPI DUP1 PUSH4 0xA7C438BC EQ PUSH2 0xF63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xFD6 JUMPI DUP1 PUSH4 0xAF0B1327 EQ PUSH2 0x1049 JUMPI DUP1 PUSH4 0xB5413029 EQ PUSH2 0x1188 JUMPI DUP1 PUSH4 0xB78B52DF EQ PUSH2 0x11DB JUMPI DUP1 PUSH4 0xC775B542 EQ PUSH2 0x1236 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x128F JUMPI DUP1 PUSH4 0xDA379941 EQ PUSH2 0x1302 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1351 JUMPI DUP1 PUSH4 0xE0AE93C1 EQ PUSH2 0x13D6 JUMPI DUP1 PUSH4 0xE1EEE6D6 EQ PUSH2 0x142F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x156B JUMPI DUP1 PUSH4 0xFC7CF0A0 EQ PUSH2 0x15BC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x244 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x298 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2E0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1795 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x41E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x403 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x501 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4E6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x52E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x551 PUSH2 0x1806 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x576 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5BE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E1 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60C PUSH2 0x181D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x658 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x63D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x685 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6AA PUSH2 0x1837 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1848 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x788 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B7 PUSH2 0x1B51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x806 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x86A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x930 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x97F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB0D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB38 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB1D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB9A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBFF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x21AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8A PUSH2 0x21EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCE7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2298 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD12 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD97 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC2 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE02 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDE7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE2F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE96 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x239C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC5 PUSH2 0x248B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF23 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF08 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF50 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFBC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1082 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP9 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x9 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1167 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x114C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119D PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x33 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11AD JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1234 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2708 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1279 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x129B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x130E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x133B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2950 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1419 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1468 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP10 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14C4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14A9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14F1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP9 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x150F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1557 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x158E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AD6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D1 PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x169B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1670 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x169B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x167E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP3 PUSH1 0x7 PUSH2 0x2C43 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17BA PUSH2 0x3EF1 JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH1 0x7 PUSH2 0x2C63 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17EE DUP3 PUSH1 0x7 PUSH2 0x2CD9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1801 PUSH1 0x7 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1812 PUSH1 0x7 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x182C PUSH1 0x7 PUSH2 0x2D97 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1843 PUSH1 0x7 PUSH2 0x2ECB JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x185E DUP3 PUSH1 0x7 PUSH2 0x2F1F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x18A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x1975 DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1A0A DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1A60 DUP4 DUP3 PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B6E DUP4 PUSH1 0x7 PUSH2 0x2F76 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8F DUP4 DUP4 PUSH1 0x7 PUSH2 0x2FF1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1BF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x1C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C26 DUP3 PUSH1 0x0 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0x1C7E DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D95 DUP3 PUSH1 0x7 PUSH2 0x3033 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB2 DUP3 PUSH1 0x7 PUSH2 0x3059 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DCF DUP3 PUSH1 0x7 PUSH2 0x3079 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DEE DUP4 DUP4 PUSH1 0x7 PUSH2 0x30A9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1F9B JUMP JUMPDEST PUSH2 0x1F1A DUP4 DUP3 PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x208F PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x20A5 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3114 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x52 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x217E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C3 DUP4 PUSH1 0x7 PUSH2 0x31C0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E4 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3258 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x224A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B0 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3293 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F6 DUP4 DUP4 PUSH1 0x7 PUSH2 0x32C8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x2394 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2369 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2394 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2377 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH20 0x0 PUSH4 0xB9290CA5 SWAP1 SWAP2 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x245C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x249F PUSH1 0x7 PUSH2 0x32FD JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24CB DUP4 DUP4 PUSH1 0x7 PUSH2 0x3607 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x2510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2562 DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x25F7 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x26BC PUSH2 0x3F37 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D2 DUP11 PUSH1 0x7 PUSH2 0x3675 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH2 0x26F9 PUSH2 0x3F5B JUMP JUMPDEST PUSH2 0x2703 PUSH1 0x7 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2712 DUP3 DUP3 PUSH2 0x1B97 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272F DUP4 DUP4 PUSH1 0x7 PUSH2 0x3A9B SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C8 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2949 DUP3 PUSH1 0x7 PUSH2 0x3AD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x52 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2A6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9C DUP4 DUP4 PUSH1 0x7 PUSH2 0x3AF0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x2AC1 DUP8 PUSH1 0x7 PUSH2 0x3B25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x2B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x2B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C3B PUSH1 0x7 PUSH2 0x3D84 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x42 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C6B PUSH2 0x3EF1 JUMP JUMPDEST DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x5 DUP1 ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2CB7 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3F ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5454000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A617020546F6B656E0000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DA7 DUP6 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x48 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP7 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x2EB6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E8B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2EB6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E99 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x49 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x2F4D JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x2F6C JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH1 0x48 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP GT ISZERO PUSH2 0x2FDE JUMPI PUSH2 0x2FD2 DUP6 DUP6 DUP4 PUSH1 0x3 ADD PUSH1 0x1 DUP6 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2FC2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2FEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP2 SWAP2 POP SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x48 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x32 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x308B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x43 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x41 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x311C PUSH2 0x3F14 JUMP JUMPDEST DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x5 DUP1 ISZERO PUSH2 0x31B2 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3168 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x47 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x327F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 DUP7 PUSH1 0x0 ADD SLOAD DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP9 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646966666963756C747900000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP10 PUSH1 0x48 ADD PUSH1 0x0 DUP12 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP11 PUSH1 0x48 ADD PUSH1 0x0 DUP13 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6772616E756C6172697479000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP12 PUSH1 0x48 ADD PUSH1 0x0 DUP14 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x35EB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x35C0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35EB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x35CE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP3 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3688 PUSH2 0x3F37 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP12 PUSH1 0x44 ADD PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP3 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP5 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x76616C7565000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6E756D6265724F66566F74657300000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xD ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E6572536C6F740000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE POP DUP9 PUSH1 0x1 ADD SLOAD SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH2 0x3A54 PUSH2 0x3F5B JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x33 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x33 DUP1 ISZERO PUSH2 0x3A8F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3A7B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 PUSH1 0x48 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD DUP2 PUSH1 0x1 ADD DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6772616E756C6172697479000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737451506F736974696F6E00000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3CCA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3C9F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CCA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3CAD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP6 POP DUP5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3D66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3D3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3D49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP5 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E3B DUP4 DUP5 PUSH1 0x42 ADD PUSH1 0x0 DUP7 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E93 DUP5 PUSH1 0x1 ADD PUSH1 0x33 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x33 DUP1 ISZERO PUSH2 0x3E89 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3E75 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3EBA JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP DUP4 PUSH1 0x43 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x33 DUP2 LT ISZERO PUSH2 0x3EEB JUMPI PUSH1 0x20 DUP2 MUL DUP5 ADD MLOAD DUP1 DUP5 LT ISZERO PUSH2 0x3EDF JUMPI DUP1 SWAP4 POP DUP2 SWAP3 POP JUMPDEST POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3EC0 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x660 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x33 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 CODESIZE CALLVALUE 0xc5 0xe7 PUSH18 0x9C826E1937AE6CC28E487A5678A73E91E717 0xe3 0xdb SWAP4 0x48 LOG3 PUSH30 0x476412002900000000000000000000000000000000000000000000000000 ",
              "sourceMap": "494:14034:0:-;;;7103:5:2;7073:35;;;;;;;;;;;;;;;;;;;;8077:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8110:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8171:2;8145:28;;792:81:0;8:9:-1;5:2;;;30:1;27;20:12;5:2;792:81:0;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;792:81:0;;;;;;;;;;;;;;;;311:10:3;303:5;;:18;;;;;;;;;;;;;;;;;;857:8:0;840:5;;:26;;;;;;;;;;;;;;;;;;792:81;494:14034;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 9122
                    }
                  ]
                }
              },
              "object": "60806040526004361061022a576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b1461022f57806306fdde031461025e578063095ea7b3146102ee5780630f0b424d1461036157806311c98512146103b0578063133bee5e1461043157806315070401146104ac57806317d7de7c1461053c57806318160ddd146105cc57806319e8e03b146105f75780631ca8b6cb146106955780631db842f0146106c057806323b872dd1461070f578063313ce567146107a25780633180f8df146107cd5780633df0777b1461082757806340c10f191461088457806346eee1c4146108f7578063612c8f7f146109465780636173c0b81461099557806363bb82ad146109e45780636618846314610a5757806369026d6314610aca57806370a0823114610b4b578063733bdef014610bb057806377fbb66314610c1c5780637d64bcb414610c755780637f6fd5d914610ca45780638da5cb5b14610cfd57806393fa491514610d5457806395d89b4114610dad578063999cf26c14610e3d578063a22e407a14610eb0578063a7c438bc14610f63578063a9059cbb14610fd6578063af0b132714611049578063b541302914611188578063b78b52df146111db578063c775b54214611236578063d73dd6231461128f578063da37994114611302578063dd62ed3e14611351578063e0ae93c1146113d6578063e1eee6d61461142f578063f2fde38b1461156b578063fc7cf0a0146115bc575b600080fd5b34801561023b57600080fd5b506102446115f2565b604051808215151515815260200191505060405180910390f35b34801561026a57600080fd5b50610273611605565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b3578082015181840152602081019050610298565b50505050905090810190601f1680156102e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102fa57600080fd5b506103476004803603604081101561031157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116a3565b604051808215151515815260200191505060405180910390f35b34801561036d57600080fd5b5061039a6004803603602081101561038457600080fd5b8101908080359060200190929190505050611795565b6040518082815260200191505060405180910390f35b3480156103bc57600080fd5b506103f3600480360360408110156103d357600080fd5b8101908080359060200190929190803590602001909291905050506117b2565b6040518082600560200280838360005b8381101561041e578082015181840152602081019050610403565b5050505090500191505060405180910390f35b34801561043d57600080fd5b5061046a6004803603602081101561045457600080fd5b81019080803590602001909291905050506117d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b857600080fd5b506104c16117f5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105015780820151818401526020810190506104e6565b50505050905090810190601f16801561052e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561054857600080fd5b50610551611806565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610591578082015181840152602081019050610576565b50505050905090810190601f1680156105be5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105d857600080fd5b506105e1611817565b6040518082815260200191505060405180910390f35b34801561060357600080fd5b5061060c61181d565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561065857808201518184015260208101905061063d565b50505050905090810190601f1680156106855780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106a157600080fd5b506106aa611837565b6040518082815260200191505060405180910390f35b3480156106cc57600080fd5b506106f9600480360360208110156106e357600080fd5b8101908080359060200190929190505050611848565b6040518082815260200191505060405180910390f35b34801561071b57600080fd5b506107886004803603606081101561073257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611865565b604051808215151515815260200191505060405180910390f35b3480156107ae57600080fd5b506107b7611b51565b6040518082815260200191505060405180910390f35b3480156107d957600080fd5b50610806600480360360208110156107f057600080fd5b8101908080359060200190929190505050611b57565b60405180838152602001821515151581526020019250505060405180910390f35b34801561083357600080fd5b5061086a6004803603604081101561084a57600080fd5b810190808035906020019092919080359060200190929190505050611b77565b604051808215151515815260200191505060405180910390f35b34801561089057600080fd5b506108dd600480360360408110156108a757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b97565b604051808215151515815260200191505060405180910390f35b34801561090357600080fd5b506109306004803603602081101561091a57600080fd5b8101908080359060200190929190505050611d7f565b6040518082815260200191505060405180910390f35b34801561095257600080fd5b5061097f6004803603602081101561096957600080fd5b8101908080359060200190929190505050611d9c565b6040518082815260200191505060405180910390f35b3480156109a157600080fd5b506109ce600480360360208110156109b857600080fd5b8101908080359060200190929190505050611db9565b6040518082815260200191505060405180910390f35b3480156109f057600080fd5b50610a3d60048036036040811015610a0757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611dd6565b604051808215151515815260200191505060405180910390f35b348015610a6357600080fd5b50610ab060048036036040811015610a7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611df6565b604051808215151515815260200191505060405180910390f35b348015610ad657600080fd5b50610b0d60048036036040811015610aed57600080fd5b810190808035906020019092919080359060200190929190505050612087565b6040518082600560200280838360005b83811015610b38578082015181840152602081019050610b1d565b5050505090500191505060405180910390f35b348015610b5757600080fd5b50610b9a60048036036020811015610b6e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506120ad565b6040518082815260200191505060405180910390f35b348015610bbc57600080fd5b50610bff60048036036020811015610bd357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121ac565b604051808381526020018281526020019250505060405180910390f35b348015610c2857600080fd5b50610c5f60048036036040811015610c3f57600080fd5b8101908080359060200190929190803590602001909291905050506121cc565b6040518082815260200191505060405180910390f35b348015610c8157600080fd5b50610c8a6121ec565b604051808215151515815260200191505060405180910390f35b348015610cb057600080fd5b50610ce760048036036040811015610cc757600080fd5b810190808035906020019092919080359060200190929190505050612298565b6040518082815260200191505060405180910390f35b348015610d0957600080fd5b50610d126122b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610d6057600080fd5b50610d9760048036036040811015610d7757600080fd5b8101908080359060200190929190803590602001909291905050506122de565b6040518082815260200191505060405180910390f35b348015610db957600080fd5b50610dc26122fe565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e02578082015181840152602081019050610de7565b50505050905090810190601f168015610e2f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e4957600080fd5b50610e9660048036036040811015610e6057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061239c565b604051808215151515815260200191505060405180910390f35b348015610ebc57600080fd5b50610ec561248b565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610f23578082015181840152602081019050610f08565b50505050905090810190601f168015610f505780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610f6f57600080fd5b50610fbc60048036036040811015610f8657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124b3565b604051808215151515815260200191505060405180910390f35b348015610fe257600080fd5b5061102f60048036036040811015610ff957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506124d3565b604051808215151515815260200191505060405180910390f35b34801561105557600080fd5b506110826004803603602081101561106c57600080fd5b81019080803590602001909291905050506126a9565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b8381101561116757808201518184015260208101905061114c565b50505050905001828152602001995050505050505050505060405180910390f35b34801561119457600080fd5b5061119d6126f1565b6040518082603360200280838360005b838110156111c85780820151818401526020810190506111ad565b5050505090500191505060405180910390f35b3480156111e757600080fd5b50611234600480360360408110156111fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612708565b005b34801561124257600080fd5b506112796004803603604081101561125957600080fd5b810190808035906020019092919080359060200190929190505050612717565b6040518082815260200191505060405180910390f35b34801561129b57600080fd5b506112e8600480360360408110156112b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612737565b604051808215151515815260200191505060405180910390f35b34801561130e57600080fd5b5061133b6004803603602081101561132557600080fd5b8101908080359060200190929190505050612933565b6040518082815260200191505060405180910390f35b34801561135d57600080fd5b506113c06004803603604081101561137457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612950565b6040518082815260200191505060405180910390f35b3480156113e257600080fd5b50611419600480360360408110156113f957600080fd5b810190808035906020019092919080359060200190929190505050612a84565b6040518082815260200191505060405180910390f35b34801561143b57600080fd5b506114686004803603602081101561145257600080fd5b8101908080359060200190929190505050612aa4565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b838110156114c45780820151818401526020810190506114a9565b50505050905090810190601f1680156114f15780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561152a57808201518184015260208101905061150f565b50505050905090810190601f1680156115575780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561157757600080fd5b506115ba6004803603602081101561158e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612ad6565b005b3480156115c857600080fd5b506115d1612c2e565b60405180838152602001821515151581526020019250505060405180910390f35b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561169b5780601f106116705761010080835404028352916020019161169b565b820191906000526020600020905b81548152906001019060200180831161167e57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60006117ab826007612c4390919063ffffffff16565b9050919050565b6117ba613ef1565b6117d083836007612c639092919063ffffffff16565b905092915050565b60006117ee826007612cd990919063ffffffff16565b9050919050565b60606118016007612d19565b905090565b60606118126007612d58565b905090565b60005481565b600080606061182c6007612d97565b925092509250909192565b60006118436007612ecb565b905090565b600061185e826007612f1f90919063ffffffff16565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156118a257600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061197583600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f3f90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a0a83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f5890919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611a608382612f3f90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b600080611b6e836007612f7690919063ffffffff16565b91509150915091565b6000611b8f83836007612ff19092919063ffffffff16565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bf557600080fd5b600360149054906101000a900460ff16151515611c1157600080fd5b611c2682600054612f5890919063ffffffff16565b600081905550611c7e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f5890919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000611d9582600761303390919063ffffffff16565b9050919050565b6000611db282600761305990919063ffffffff16565b9050919050565b6000611dcf82600761307990919063ffffffff16565b9050919050565b6000611dee838360076130a99092919063ffffffff16565b905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611f07576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611f9b565b611f1a8382612f3f90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b61208f613f14565b6120a5838360076131149092919063ffffffff16565b905092915050565b6000605260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561216a57600080fd5b505afa15801561217e573d6000803e3d6000fd5b505050506040513d602081101561219457600080fd5b81019080805190602001909291905050509050919050565b6000806121c38360076131c090919063ffffffff16565b91509150915091565b60006121e4838360076132589092919063ffffffff16565b905092915050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561224a57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b60006122b0838360076132939092919063ffffffff16565b905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006122f6838360076132c89092919063ffffffff16565b905092915050565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123945780601f1061236957610100808354040283529160200191612394565b820191906000526020600020905b81548152906001019060200180831161237757829003601f168201915b505050505081565b6000600773__$946cc509dcf4b4c97ecabc42418c409021$",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x22A JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0xF0B424D EQ PUSH2 0x361 JUMPI DUP1 PUSH4 0x11C98512 EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x133BEE5E EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x15070401 EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x17D7DE7C EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x5CC JUMPI DUP1 PUSH4 0x19E8E03B EQ PUSH2 0x5F7 JUMPI DUP1 PUSH4 0x1CA8B6CB EQ PUSH2 0x695 JUMPI DUP1 PUSH4 0x1DB842F0 EQ PUSH2 0x6C0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x70F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x7A2 JUMPI DUP1 PUSH4 0x3180F8DF EQ PUSH2 0x7CD JUMPI DUP1 PUSH4 0x3DF0777B EQ PUSH2 0x827 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x884 JUMPI DUP1 PUSH4 0x46EEE1C4 EQ PUSH2 0x8F7 JUMPI DUP1 PUSH4 0x612C8F7F EQ PUSH2 0x946 JUMPI DUP1 PUSH4 0x6173C0B8 EQ PUSH2 0x995 JUMPI DUP1 PUSH4 0x63BB82AD EQ PUSH2 0x9E4 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0xA57 JUMPI DUP1 PUSH4 0x69026D63 EQ PUSH2 0xACA JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xB4B JUMPI DUP1 PUSH4 0x733BDEF0 EQ PUSH2 0xBB0 JUMPI DUP1 PUSH4 0x77FBB663 EQ PUSH2 0xC1C JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0xC75 JUMPI DUP1 PUSH4 0x7F6FD5D9 EQ PUSH2 0xCA4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCFD JUMPI DUP1 PUSH4 0x93FA4915 EQ PUSH2 0xD54 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xDAD JUMPI DUP1 PUSH4 0x999CF26C EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0xA22E407A EQ PUSH2 0xEB0 JUMPI DUP1 PUSH4 0xA7C438BC EQ PUSH2 0xF63 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xFD6 JUMPI DUP1 PUSH4 0xAF0B1327 EQ PUSH2 0x1049 JUMPI DUP1 PUSH4 0xB5413029 EQ PUSH2 0x1188 JUMPI DUP1 PUSH4 0xB78B52DF EQ PUSH2 0x11DB JUMPI DUP1 PUSH4 0xC775B542 EQ PUSH2 0x1236 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x128F JUMPI DUP1 PUSH4 0xDA379941 EQ PUSH2 0x1302 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1351 JUMPI DUP1 PUSH4 0xE0AE93C1 EQ PUSH2 0x13D6 JUMPI DUP1 PUSH4 0xE1EEE6D6 EQ PUSH2 0x142F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x156B JUMPI DUP1 PUSH4 0xFC7CF0A0 EQ PUSH2 0x15BC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x244 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0x1605 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x298 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2E0 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1795 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x41E JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x403 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x17D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x501 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4E6 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x52E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x551 PUSH2 0x1806 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x576 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x5BE JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E1 PUSH2 0x1817 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60C PUSH2 0x181D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x658 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x63D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x685 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6AA PUSH2 0x1837 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1848 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x788 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B7 PUSH2 0x1B51 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x806 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B57 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x86A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B77 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x890 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8DD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x8A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1B97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x930 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x952 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x97F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D9C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9CE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA3D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB0D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB38 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xB1D JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB9A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x20AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBFF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x21AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC5F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x21CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8A PUSH2 0x21EC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCE7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xCC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2298 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD12 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD97 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x22DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDC2 PUSH2 0x22FE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE02 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xDE7 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xE2F JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE96 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x239C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC5 PUSH2 0x248B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF23 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xF08 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xF50 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP8 POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFBC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x102F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xFF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x24D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1082 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x26A9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 0x20 ADD DUP10 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP9 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP8 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x9 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1167 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x114C JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x119D PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x33 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C8 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11AD JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1234 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x11FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2708 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1242 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1279 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x129B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x12B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2737 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x130E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x133B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2933 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2950 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1419 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2A84 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x143B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1468 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1452 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP10 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14C4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14A9 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x14F1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP9 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x152A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x150F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1557 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1577 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x158E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x2AD6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x15C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15D1 PUSH2 0x2C2E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x169B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1670 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x169B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x167E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP3 PUSH1 0x7 PUSH2 0x2C43 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17BA PUSH2 0x3EF1 JUMP JUMPDEST PUSH2 0x17D0 DUP4 DUP4 PUSH1 0x7 PUSH2 0x2C63 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17EE DUP3 PUSH1 0x7 PUSH2 0x2CD9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1801 PUSH1 0x7 PUSH2 0x2D19 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1812 PUSH1 0x7 PUSH2 0x2D58 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x182C PUSH1 0x7 PUSH2 0x2D97 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1843 PUSH1 0x7 PUSH2 0x2ECB JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x185E DUP3 PUSH1 0x7 PUSH2 0x2F1F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x18A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x1975 DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1A0A DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1A60 DUP4 DUP3 PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B6E DUP4 PUSH1 0x7 PUSH2 0x2F76 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B8F DUP4 DUP4 PUSH1 0x7 PUSH2 0x2FF1 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1BF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0x1C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C26 DUP3 PUSH1 0x0 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0x1C7E DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D95 DUP3 PUSH1 0x7 PUSH2 0x3033 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DB2 DUP3 PUSH1 0x7 PUSH2 0x3059 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DCF DUP3 PUSH1 0x7 PUSH2 0x3079 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DEE DUP4 DUP4 PUSH1 0x7 PUSH2 0x30A9 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x1F07 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1F9B JUMP JUMPDEST PUSH2 0x1F1A DUP4 DUP3 PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x208F PUSH2 0x3F14 JUMP JUMPDEST PUSH2 0x20A5 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3114 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x52 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x216A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x217E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C3 DUP4 PUSH1 0x7 PUSH2 0x31C0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21E4 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3258 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x224A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22B0 DUP4 DUP4 PUSH1 0x7 PUSH2 0x3293 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F6 DUP4 DUP4 PUSH1 0x7 PUSH2 0x32C8 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x2394 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2369 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2394 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2377 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH20 0x0 PUSH4 0xB9290CA5 SWAP1 SWAP2 DUP6 DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2448 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x245C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 PUSH2 0x249F PUSH1 0x7 PUSH2 0x32FD JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24CB DUP4 DUP4 PUSH1 0x7 PUSH2 0x3607 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x2510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2562 DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F3F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x25F7 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x26BC PUSH2 0x3F37 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26D2 DUP11 PUSH1 0x7 PUSH2 0x3675 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP2 SWAP4 SWAP6 SWAP8 SWAP10 SWAP1 SWAP3 SWAP5 SWAP7 SWAP9 POP JUMP JUMPDEST PUSH2 0x26F9 PUSH2 0x3F5B JUMP JUMPDEST PUSH2 0x2703 PUSH1 0x7 PUSH2 0x3A4C JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x2712 DUP3 DUP3 PUSH2 0x1B97 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272F DUP4 DUP4 PUSH1 0x7 PUSH2 0x3A9B SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27C8 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2F58 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2949 DUP3 PUSH1 0x7 PUSH2 0x3AD0 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x52 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2A6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9C DUP4 DUP4 PUSH1 0x7 PUSH2 0x3AF0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x2AC1 DUP8 PUSH1 0x7 PUSH2 0x3B25 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x2B32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x2B6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2C3B PUSH1 0x7 PUSH2 0x3D84 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x42 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2C6B PUSH2 0x3EF1 JUMP JUMPDEST DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x9 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x5 DUP1 ISZERO PUSH2 0x2CCB JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2CB7 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3F ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5454000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A617020546F6B656E0000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH2 0x2DA7 DUP6 PUSH2 0x3E46 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x48 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP7 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP1 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x2EB6 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2E8B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2EB6 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E99 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x49 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x2F4D JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x2F6C JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH1 0x48 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP GT ISZERO PUSH2 0x2FDE JUMPI PUSH2 0x2FD2 DUP6 DUP6 DUP4 PUSH1 0x3 ADD PUSH1 0x1 DUP6 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x2FC2 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x2FEA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP2 SWAP2 POP SWAP3 POP SWAP3 POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x48 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x32 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x308B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x43 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x41 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x311C PUSH2 0x3F14 JUMP JUMPDEST DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x8 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x5 DUP1 ISZERO PUSH2 0x31B2 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3168 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x47 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x327F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 DUP7 PUSH1 0x0 ADD SLOAD DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP9 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646966666963756C747900000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP10 PUSH1 0x48 ADD PUSH1 0x0 DUP12 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP11 PUSH1 0x48 ADD PUSH1 0x0 DUP13 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6772616E756C6172697479000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP12 PUSH1 0x48 ADD PUSH1 0x0 DUP14 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x63757272656E7452657175657374496400000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x35EB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x35C0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35EB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x35CE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP3 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x6 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3688 PUSH2 0x3F37 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP12 PUSH1 0x44 ADD PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP3 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP4 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP5 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x76616C7565000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6E756D6265724F66566F74657300000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xD ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E6572536C6F740000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE POP DUP9 PUSH1 0x1 ADD SLOAD SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP SWAP10 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH2 0x3A54 PUSH2 0x3F5B JUMP JUMPDEST DUP2 PUSH1 0x1 ADD PUSH1 0x33 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x33 DUP1 ISZERO PUSH2 0x3A8F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3A7B JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x4 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP9 PUSH1 0x48 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x0 ADD DUP2 PUSH1 0x1 ADD DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6772616E756C6172697479000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737451506F736974696F6E00000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C546970000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3CCA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3C9F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CCA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3CAD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP6 POP DUP5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x3D66 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3D3B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3D66 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3D49 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP5 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E3B DUP4 DUP5 PUSH1 0x42 ADD PUSH1 0x0 DUP7 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x32C8 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x3E93 DUP5 PUSH1 0x1 ADD PUSH1 0x33 DUP1 PUSH1 0x20 MUL PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 0x33 DUP1 ISZERO PUSH2 0x3E89 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3E75 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3EBA JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP DUP4 PUSH1 0x43 ADD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x33 DUP2 LT ISZERO PUSH2 0x3EEB JUMPI PUSH1 0x20 DUP2 MUL DUP5 ADD MLOAD DUP1 DUP5 LT ISZERO PUSH2 0x3EDF JUMPI DUP1 SWAP4 POP DUP2 SWAP3 POP JUMPDEST POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x3EC0 JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x120 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH2 0x660 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x33 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 CODESIZE CALLVALUE 0xc5 0xe7 PUSH18 0x9C826E1937AE6CC28E487A5678A73E91E717 0xe3 0xdb SWAP4 0x48 LOG3 PUSH30 0x476412002900000000000000000000000000000000000000000000000000 ",
              "sourceMap": "494:14034:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7073:35:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7073:35:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8077:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8077:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8077:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5209:206;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5209:206:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5209:206:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;9005:144:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9005:144:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9005:144:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11680:182;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11680:182:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11680:182:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11680:182:0;;;;;;;;;;;;;;;;3806:118;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3806:118:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3806:118:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11962:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11962:96:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11962:96:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7935:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7935:92:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7935:92:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;898:26:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13364:129:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13364:129:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13364:129:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14391:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14391:134:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9365:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9365:143:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9365:143:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3971:583:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3971:583:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3971:583:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8145:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8145:28:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6857:137:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6857:137:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6857:137:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13770:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13770:144:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13770:144:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7448:300:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7448:300:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7448:300:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8390:148:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8390:148:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8390:148:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13021:105;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13021:105:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13021:105:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8706:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8706:140:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8706:140:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2998:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2998:134:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2998:134:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6462:468:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6462:468:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6462:468:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7639:199:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7639:199:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7639:199:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7639:199:0;;;;;;;;;;;;;;;;2119:148;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2119:148:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2119:148:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11261:122;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11261:122:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11261:122:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12276:176;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12276:176:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12276:176:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7878:150:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7878:150:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6148::0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6148:150:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6148:150:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;51:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;51:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;14133:148:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14133:148:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14133:148:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8110:28:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8110:28:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8110:28:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1781:136:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1781:136:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1781:136:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5167:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5167:150:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;5167:150:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3328:135;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3328:135:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3328:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1902:371:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1902:371:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1902:371:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4684:194:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4684:194:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4684:194:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4684:194:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9614:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9614:100:0;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9614:100:0;;;;;;;;;;;;;;;;8182:83:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8182:83:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8182:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7238:154:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7238:154:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7238:154:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6158:298:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6158:298:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6158:298:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5513:138:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5513:138:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5513:138:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1345:183;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1345:183:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1345:183:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10284:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10284:150:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10284:150:0;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10848:172;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10848:172:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10848:172:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10848:172:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10848:172:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;656:200:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;656:200:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;656:200:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;6510:104:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6510:104:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7073:35:2;;;;;;;;;;;;;:::o;8077:26::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5209:206::-;5276:4;5325:6;5293:7;:19;5301:10;5293:19;;;;;;;;;;;;;;;:29;5313:8;5293:29;;;;;;;;;;;;;;;:38;;;;5368:8;5347:38;;5356:10;5347:38;;;5378:6;5347:38;;;;;;;;;;;;;;;;;;5403:4;5396:11;;5209:206;;;;:::o;9005:144:0:-;9077:4;9103:39;9131:10;9103:3;:27;;:39;;;;:::i;:::-;9096:46;;9005:144;;;:::o;11680:182::-;11771:14;;:::i;:::-;11803:52;11833:10;11844;11803:3;:29;;:52;;;;;:::i;:::-;11796:59;;11680:182;;;;:::o;3806:118::-;3867:7;3892:25;3911:5;3892:3;:18;;:25;;;;:::i;:::-;3885:32;;3806:118;;;:::o;11962:96::-;12005:13;12036:15;:3;:13;:15::i;:::-;12029:22;;11962:96;:::o;7935:92::-;7976:13;8007;:3;:11;:13::i;:::-;8000:20;;7935:92;:::o;898:26:2:-;;;;:::o;13364:129:0:-;13416:4;13422;13427:13;13462:24;:3;:22;:24::i;:::-;13455:31;;;;;;13364:129;;;:::o;14391:134::-;14442:4;14464:17;:3;:15;:17::i;:::-;14457:24;;14391:134;:::o;9365:143::-;9438:4;9464:37;9492:8;9464:3;:27;;:37;;;;:::i;:::-;9457:44;;9365:143;;;:::o;3971:583:2:-;4053:4;4093:1;4078:17;;:3;:17;;;;4070:26;;;;;;;;4107:18;4128:7;:14;4136:5;4128:14;;;;;;;;;;;;;;;:26;4143:10;4128:26;;;;;;;;;;;;;;;;4107:47;;4339:27;4359:6;4339:8;:15;4348:5;4339:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;4321:8;:15;4330:5;4321:15;;;;;;;;;;;;;;;:45;;;;4393:25;4411:6;4393:8;:13;4402:3;4393:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4377:8;:13;4386:3;4377:13;;;;;;;;;;;;;;;:41;;;;4458:22;4473:6;4458:10;:14;;:22;;;;:::i;:::-;4429:7;:14;4437:5;4429:14;;;;;;;;;;;;;;;:26;4444:10;4429:26;;;;;;;;;;;;;;;:51;;;;4512:3;4496:28;;4505:5;4496:28;;;4517:6;4496:28;;;;;;;;;;;;;;;;;;4542:4;4535:11;;;3971:583;;;;;:::o;8145:28::-;;;;:::o;6857:137:0:-;6925:4;6930;6952:35;6976:10;6952:3;:23;;:35;;;;:::i;:::-;6945:42;;;;6857:137;;;:::o;13770:144::-;13847:4;13869:38;13885:10;13896;13869:3;:15;;:38;;;;;:::i;:::-;13862:45;;13770:144;;;;:::o;7448:300:2:-;7526:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7154:15:2;;;;;;;;;;;7153:16;7145:25;;;;;;;;7557:24;7573:7;7557:11;;:15;;:24;;;;:::i;:::-;7543:11;:38;;;;7608:26;7626:7;7608:8;:13;7617:3;7608:13;;;;;;;;;;;;;;;;:17;;:26;;;;:::i;:::-;7592:8;:13;7601:3;7592:13;;;;;;;;;;;;;;;:42;;;;7655:3;7650:18;;;7660:7;7650:18;;;;;;;;;;;;;;;;;;7705:3;7684:34;;7701:1;7684:34;;;7710:7;7684:34;;;;;;;;;;;;;;;;;;7736:4;7729:11;;7448:300;;;;:::o;8390:148:0:-;8466:4;8488:43;8520:10;8488:3;:31;;:43;;;;:::i;:::-;8481:50;;8390:148;;;:::o;13021:105::-;13076:4;13098:21;13113:5;13098:3;:14;;:21;;;;:::i;:::-;13091:28;;13021:105;;;:::o;8706:140::-;8778:4;8800:39;8832:6;8800:3;:31;;:39;;;;:::i;:::-;8793:46;;8706:140;;;:::o;2998:134::-;3073:4;3095:30;3107:10;3118:6;3095:3;:11;;:30;;;;;:::i;:::-;3088:37;;2998:134;;;;:::o;6462:468:2:-;6555:12;6580:13;6596:7;:19;6604:10;6596:19;;;;;;;;;;;;;;;:29;6616:8;6596:29;;;;;;;;;;;;;;;;6580:45;;6659:8;6640:16;:27;6636:188;;;6716:1;6684:7;:19;6692:10;6684:19;;;;;;;;;;;;;;;:29;6704:8;6684:29;;;;;;;;;;;;;;;:33;;;;6636:188;;;6782:30;6795:16;6782:8;:12;;:30;;;;:::i;:::-;6750:7;:19;6758:10;6750:19;;;;;;;;;;;;;;;:29;6770:8;6750:29;;;;;;;;;;;;;;;:62;;;;6636:188;6860:8;6839:61;;6848:10;6839:61;;;6870:7;:19;6878:10;6870:19;;;;;;;;;;;;;;;:29;6890:8;6870:29;;;;;;;;;;;;;;;;6839:61;;;;;;;;;;;;;;;;;;6918:4;6911:11;;;6462:468;;;;:::o;7639:199:0:-;7737:17;;:::i;:::-;7772:59;7809:10;7820;7772:3;:36;;:59;;;;;:::i;:::-;7765:66;;7639:199;;;;:::o;2119:148::-;2174:4;2238:5;;;;;;;;;;;:15;;;2254:5;2238:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2238:22:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2238:22:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2238:22:0;;;;;;;;;;;;;;;;2231:29;;2119:148;;;:::o;11261:122::-;11323:4;11328;11350:26;11368:7;11350:3;:17;;:26;;;;:::i;:::-;11343:33;;;;11261:122;;;:::o;12276:176::-;12369:4;12391:54;12427:10;12438:6;12391:3;:35;;:54;;;;;:::i;:::-;12384:61;;12276:176;;;;:::o;7878:150:2:-;7929:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7964:4:2;7946:15;;:22;;;;;;;;;;;;;;;;;;7984:14;;;;;;;;;;8016:4;8009:11;;7878:150;:::o;6148::0:-;6229:4;6251:40;6274:10;6285:5;6251:3;:22;;:40;;;;;:::i;:::-;6244:47;;6148:150;;;;:::o;51:28:3:-;;;;;;;;;;;;;:::o;14133:148:0:-;14212:4;14235:39;14252:10;14263;14235:3;:16;;:39;;;;;:::i;:::-;14228:46;;14133:148;;;;:::o;8110:28:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1781:136:0:-;1855:4;1877:3;:18;;;;1896:5;1902:7;1877:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1877:33:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1877:33:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1877:33:0;;;;;;;;;;;;;;;;1870:40;;1781:136;;;;:::o;5167:150::-;5220:7;5229:4;5235;5240:13;5254:4;5259;5285:25;:3;:23;:25::i;:::-;5278:32;;;;;;;;;;;;5167:150;;;;;;:::o;3328:135::-;3402:4;3424:32;3436:10;3447:8;3424:3;:11;;:32;;;;;:::i;:::-;3417:39;;3328:135;;;;:::o;1902:371:2:-;1965:4;2005:1;1990:17;;:3;:17;;;;1982:26;;;;;;;;2110:32;2135:6;2110:8;:20;2119:10;2110:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2087:8;:20;2096:10;2087:20;;;;;;;;;;;;;;;:55;;;;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;2261:4;2254:11;;1902:371;;;;:::o;4684:194:0:-;4748:7;4757:4;4763;4769;4775:7;4784;4793;4801:14;;:::i;:::-;4817:3;4838:33;4860:10;4838:3;:21;;:33;;;;:::i;:::-;4831:40;;;;;;;;;;;;;;;;;;4684:194;;;;;;;;;;;:::o;9614:100::-;9657:15;;:::i;:::-;9690:17;:3;:15;:17::i;:::-;9683:24;;9614:100;:::o;8182:83:2:-;8242:15;8247:2;8250:6;8242:4;:15::i;:::-;;8182:83;;:::o;7238:154:0:-;7320:4;7342:43;7363:10;7374;7342:3;:20;;:43;;;;;:::i;:::-;7335:50;;7238:154;;;;:::o;6158:298:2:-;6246:12;6303:46;6337:11;6303:7;:19;6311:10;6303:19;;;;;;;;;;;;;;;:29;6323:8;6303:29;;;;;;;;;;;;;;;;:33;;:46;;;;:::i;:::-;6271:7;:19;6279:10;6271:19;;;;;;;;;;;;;;;:29;6291:8;6271:29;;;;;;;;;;;;;;;:78;;;;6386:8;6365:61;;6374:10;6365:61;;;6396:7;:19;6404:10;6396:19;;;;;;;;;;;;;;;:29;6416:8;6396:29;;;;;;;;;;;;;;;;6365:61;;;;;;;;;;;;;;;;;;6444:4;6437:11;;6158:298;;;;:::o;5513:138:0:-;5585:4;5608:36;5638:5;5608:3;:29;;:36;;;;:::i;:::-;5600:44;;5513:138;;;:::o;1345:183::-;1418:4;1489:5;;;;;;;;;;;:15;;;1505:5;1512:8;1489:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1489:32:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1489:32:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1489:32:0;;;;;;;;;;;;;;;;1482:39;;1345:183;;;;:::o;10284:150::-;10365:4;10387:40;10410:10;10421:5;10387:3;:22;;:40;;;;;:::i;:::-;10380:47;;10284:150;;;;:::o;10848:172::-;10911:13;10926;10940:7;10948:4;10954;10960;10983:30;11002:10;10983:3;:18;;:30;;;;:::i;:::-;10976:37;;;;;;;;;;;;10848:172;;;;;;;:::o;656:200:3:-;469:5;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;765:1;745:22;;:8;:22;;;;737:31;;;;;;;;812:8;784:37;;805:5;;;;;;;;;;;784:37;;;;;;;;;;;;840:8;832:5;;:16;;;;;;;;;;;;;;;;;;656:200;:::o;6510:104:0:-;6559:4;6564;6586:21;:3;:19;:21::i;:::-;6579:28;;;;6510:104;;:::o;9830:184:7:-;9944:4;9970;:25;;:37;9996:10;9970:37;;;;;;;;;;;;9963:44;;9830:184;;;;:::o;13060:233::-;13193:14;;:::i;:::-;13225:4;:19;;:31;13245:10;13225:31;;;;;;;;;;;:49;;:61;13275:10;13225:61;;;;;;;;;;;13218:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13060:233;;;;;:::o;2733:158::-;2836:7;2861:4;:16;;:23;2878:5;2861:23;;;;;;;;;;;;;;;;;;;;;2854:30;;2733:158;;;;:::o;13394:125::-;13477:13;13501:11;;;;;;;;;;;;;;;;;;;;13394:125;;;:::o;8596:130::-;8677:13;8701:18;;;;;;;;;;;;;;;;;;;;8596:130;;;:::o;14912:322::-;15004:4;15010;15015:13;15040:17;15060:21;15076:4;15060:15;:21::i;:::-;15040:41;;15099:12;15112:4;:19;;:33;15132:12;15112:33;;;;;;;;;;;:45;;:68;15158:21;;;;;;;;;;;;;;;;;;;15112:68;;;;;;;;;;;;15181:4;:19;;:33;15201:12;15181:33;;;;;;;;;;;:45;;15091:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14912:322;;;;;:::o;16794:155::-;16880:4;16902;:13;;:40;16916:25;;;;;;;;;;;;;;;;;;;16902:40;;;;;;;;;;;;16895:47;;16794:155;;;:::o;10227:187::-;10344:4;10370;:25;;:37;10396:10;10370:37;;;;;;;;;;;;10363:44;;10227:187;;;;:::o;588:123:2:-;646:7;678:1;673;:6;;666:14;;;;;;702:1;698;:5;691:12;;588:123;;;;:::o;717:147::-;775:7;795:9;811:1;807;:5;795:17;;835:1;830;:6;;823:14;;;;;;855:1;848:8;;;717:147;;;;:::o;7123:444:7:-;7232:4;7237;7252:35;7290:4;:19;;:31;7310:10;7290:31;;;;;;;;;;;7252:69;;7371:1;7335:8;:26;;:33;;;;:37;7332:229;;;7395:95;7408:4;7413:10;7424:8;:26;;7487:1;7451:8;:26;;:33;;;;:37;7424:65;;;;;;;;;;;;;;;;;;7395:12;:95::i;:::-;7491:4;7387:109;;;;;;;7332:229;7542:1;7544:5;7534:16;;;;;;;;7123:444;;;;;;:::o;16037:201::-;16156:4;16178;:19;;:31;16198:10;16178:31;;;;;;;;;;;:41;;:53;16220:10;16178:53;;;;;;;;;;;;;;;;;;;;;16171:60;;16037:201;;;;;:::o;9089:203::-;9207:4;9229;:19;;:31;9249:10;9229:31;;;;;;;;;;;:49;;:56;;;;9222:63;;9089:203;;;;:::o;14527:147::-;14625:4;14647;:13;;:20;14661:5;14647:20;;;;;;;;;;;;14640:27;;14527:147;;;;:::o;9460:211::-;9574:4;9607:2;9597:6;:12;;9589:21;;;;;;;;9627:4;:29;;:37;9657:6;9627:37;;;;;;;;;;;;9620:44;;9460:211;;;;:::o;1804:187::-;1920:4;1942;:22;;:34;1965:10;1942:34;;;;;;;;;;;:42;1977:6;1942:42;;;;;;;;;;;;;;;;;;;;;;;;;1935:49;;1804:187;;;;;:::o;8259:239::-;8399:17;;:::i;:::-;8434:4;:19;;:31;8454:10;8434:31;;;;;;;;;;;:45;;:57;8480:10;8434:57;;;;;;;;;;;8427:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8259:239;;;;;:::o;12552:218::-;12655:4;12660;12683;:18;;:27;12702:7;12683:27;;;;;;;;;;;;;;;:41;;;12725:4;:18;;:27;12744:7;12725:27;;;;;;;;;;;;;;;:37;;;12675:88;;;;12552:218;;;;;:::o;13738:220::-;13872:4;13894;:19;;:31;13914:10;13894:31;;;;;;;;;;;:49;;13944:6;13894:57;;;;;;;;;;;;;;;;;;13887:64;;13738:220;;;;;:::o;6191:203::-;6313:4;6335;:17;;:29;6353:10;6335:29;;;;;;;;;;;:45;;:52;6381:5;6335:52;;;;;;;;;;;;6328:59;;6191:203;;;;;:::o;16478:206::-;16599:4;16622;:19;;:31;16642:10;16622:31;;;;;;;;;;;:43;;:55;16666:10;16622:55;;;;;;;;;;;;16615:62;;16478:206;;;;;:::o;4769:555::-;4862:7;4871:4;4877;4882:13;4896:4;4901;4928;:21;;;4950:4;:13;;:44;4964:29;;;;;;;;;;;;;;;;;;;4950:44;;;;;;;;;;;;4995:4;:13;;:38;5009:23;;;;;;;;;;;;;;;;;;;4995:38;;;;;;;;;;;;5034:4;:19;;:65;5054:4;:13;;:44;5068:29;;;;;;;;;;;;;;;;;;;5054:44;;;;;;;;;;;;5034:65;;;;;;;;;;;:77;;5112:4;:19;;:65;5132:4;:13;;:44;5146:29;;;;;;;;;;;;;;;;;;;5132:44;;;;;;;;;;;;5112:65;;;;;;;;;;;:77;;:103;5190:24;;;;;;;;;;;;;;;;;;;5112:103;;;;;;;;;;;;5216:4;:19;;:65;5236:4;:13;;:44;5250:29;;;;;;;;;;;;;;;;;;;5236:44;;;;;;;;;;;;5216:65;;;;;;;;;;;:77;;:100;5294:21;;;;;;;;;;;;;;;;;;;5216:100;;;;;;;;;;;;4920:397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4769:555;;;;;;;:::o;2201:189::-;2316:4;2338;:17;;:29;2356:10;2338:29;;;;;;;;;;;:35;;:45;2374:8;2338:45;;;;;;;;;;;;;;;;;;;;;;;;;2331:52;;2201:189;;;;;:::o;3651:833::-;3758:7;3767:4;3773;3779;3785:7;3794;3803;3811:14;;:::i;:::-;3827:3;3841:31;3875:4;:17;;:29;3893:10;3875:29;;;;;;;;;;;3841:63;;3921:4;:9;;;3931:4;:13;;;;;;;;;;;;3946:4;:22;;;;;;;;;;;;3970:4;:15;;;;;;;;;;;;3987:4;:18;;;;;;;;;;;;4007:4;:19;;;;;;;;;;;;4027:4;:24;;;;;;;;;;;;3914:563;;;;;;;;;4053:4;:20;;:44;4074:22;;;;;;;;;;;;;;;;;;;4053:44;;;;;;;;;;;;3914:563;;;;4099:4;:20;;:44;4120:22;;;;;;;;;;;;;;;;;;;4099:44;;;;;;;;;;;;3914:563;;;;4145:4;:20;;:40;4166:18;;;;;;;;;;;;;;;;;;;4145:40;;;;;;;;;;;;3914:563;;;;4187:4;:20;;:51;4208:29;;;;;;;;;;;;;;;;;;;4187:51;;;;;;;;;;;;3914:563;;;;4240:4;:20;;:48;4261:26;;;;;;;;;;;;;;;;;;;4240:48;;;;;;;;;;;;3914:563;;;;4290:4;:20;;:46;4311:24;;;;;;;;;;;;;;;;;;;4290:46;;;;;;;;;;;;3914:563;;;;4338:4;:20;;:44;4359:22;;;;;;;;;;;;;;;;;;;4338:44;;;;;;;;;;;;3914:563;;;;4384:4;:20;;:41;4405:19;;;;;;;;;;;;;;;;;;;4384:41;;;;;;;;;;;;3914:563;;;;4426:4;:20;;:38;4447:16;;;;;;;;;;;;;;;;;;;4426:38;;;;;;;;;;;;3914:563;;;4466:4;:10;;;3914:563;;;;;;;;;;;;;;;;;;;3651:833;;;;;;;;;;;:::o;10520:138::-;10605:15;;:::i;:::-;10638:4;:13;;10631:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10520:138;;;:::o;7803:209::-;7926:4;7948;:19;;:31;7968:10;7948:31;;;;;;;;;;;:45;;:57;7994:10;7948:57;;;;;;;;;;;;7941:64;;7803:209;;;;;:::o;5521:177::-;5634:4;5657;:27;;:34;5685:5;5657:34;;;;;;;;;;;;5649:42;;5521:177;;;;:::o;11228:201::-;11350:4;11372;:19;;:31;11392:10;11372:31;;;;;;;;;;;:43;;:50;11416:5;11372:50;;;;;;;;;;;;11365:57;;11228:201;;;;;:::o;11843:468::-;11947:13;11961;11976:7;11984:4;11990;11996;12012:35;12050:4;:19;;:31;12070:10;12050:31;;;;;;;;;;;12012:69;;12100:8;:20;;12121:8;:19;;12141:8;:18;;;12161:8;:20;;:46;12182:24;;;;;;;;;;;;;;;;;;;12161:46;;;;;;;;;;;;12208:8;:20;;:51;12229:29;;;;;;;;;;;;;;;;;;;12208:51;;;;;;;;;;;;12260:8;:20;;:43;12281:21;;;;;;;;;;;;;;;;;;;12260:43;;;;;;;;;;;;12092:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11843:468;;;;;;;;:::o;6610:270::-;6699:4;6704;6727:140;6740:4;6745;:25;;:73;6771:4;:13;;:46;6785:31;;;;;;;;;;;;;;;;;;;6771:46;;;;;;;;;;;;6745:73;;;;;;;;;;;;6820:4;:13;;:46;6834:31;;;;;;;;;;;;;;;;;;;6820:46;;;;;;;;;;;;6727:12;:140::i;:::-;6868:4;6719:154;;;;6610:270;;;:::o;15478:286::-;15567:15;15597:9;15620:11;15661:31;15678:4;:13;;15661:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:31::i;:::-;15645:47;;;;;;;;15720:4;:29;;:37;15750:6;15720:37;;;;;;;;;;;;15707:50;;15478:286;;;;;:::o;1157:364:5:-;1220:11;1233:16;1295:1;1280:227;1304:2;1302:1;1299:8;1280:227;;;1377:4;1374:1;1370:12;1365:3;1361:22;1355:29;1410:4;1405:3;1402:13;1399:2;;;1443:4;1436:11;;1478:1;1466:13;;1399:2;1327:180;1322:1;1319;1315:9;1310:14;;1280:227;;;1284:14;1268:247;;;:::o;494:14034:0:-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;494:14034:0;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;494:14034:0;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;494:14034:0;;;;:::o;:::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;494:14034:0;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "3259800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "allocate(address,uint256)": "infinite",
                "allowance(address,address)": "infinite",
                "allowedToTrade(address,uint256)": "infinite",
                "approve(address,uint256)": "22395",
                "balanceOf(address)": "infinite",
                "decimals()": "674",
                "decreaseApproval(address,uint256)": "infinite",
                "didMine(bytes32,address)": "infinite",
                "didVote(uint256,address)": "infinite",
                "finishMinting()": "22150",
                "getAddressVars(bytes32)": "infinite",
                "getAllDisputeVars(uint256)": "infinite",
                "getCurrentVariables()": "infinite",
                "getDisputeIdByDisputeHash(bytes32)": "infinite",
                "getDisputeUintVars(uint256,bytes32)": "infinite",
                "getLastNewValue()": "2726",
                "getLastNewValueById(uint256)": "infinite",
                "getMinedBlockNum(uint256,uint256)": "infinite",
                "getMinersByRequestIdAndTimestamp(uint256,uint256)": "infinite",
                "getName()": "infinite",
                "getNewValueCountbyRequestId(uint256)": "infinite",
                "getRequestIdByQueryHash(bytes32)": "infinite",
                "getRequestIdByRequestQIndex(uint256)": "infinite",
                "getRequestIdByTimestamp(uint256)": "infinite",
                "getRequestQ()": "infinite",
                "getRequestUintVars(uint256,bytes32)": "infinite",
                "getRequestVars(uint256)": "infinite",
                "getStakerInfo(address)": "infinite",
                "getSubmissionsByTimestamp(uint256,uint256)": "infinite",
                "getSymbol()": "infinite",
                "getTimestampbyRequestIDandIndex(uint256,uint256)": "infinite",
                "getUintVar(bytes32)": "infinite",
                "getVariablesOnDeck()": "infinite",
                "increaseApproval(address,uint256)": "infinite",
                "isInDispute(uint256,uint256)": "infinite",
                "mint(address,uint256)": "infinite",
                "mintingFinished()": "486",
                "name()": "infinite",
                "owner()": "1052",
                "retrieveData(uint256,uint256)": "infinite",
                "symbol()": "infinite",
                "totalSupply()": "564",
                "totalTokenSupply()": "828",
                "transfer(address,uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite",
                "transferOwnership(address)": "23553"
              }
            },
            "methodIdentifiers": {
              "allocate(address,uint256)": "b78b52df",
              "allowance(address,address)": "dd62ed3e",
              "allowedToTrade(address,uint256)": "999cf26c",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "decreaseApproval(address,uint256)": "66188463",
              "didMine(bytes32,address)": "63bb82ad",
              "didVote(uint256,address)": "a7c438bc",
              "finishMinting()": "7d64bcb4",
              "getAddressVars(bytes32)": "133bee5e",
              "getAllDisputeVars(uint256)": "af0b1327",
              "getCurrentVariables()": "a22e407a",
              "getDisputeIdByDisputeHash(bytes32)": "da379941",
              "getDisputeUintVars(uint256,bytes32)": "7f6fd5d9",
              "getLastNewValue()": "fc7cf0a0",
              "getLastNewValueById(uint256)": "3180f8df",
              "getMinedBlockNum(uint256,uint256)": "c775b542",
              "getMinersByRequestIdAndTimestamp(uint256,uint256)": "69026d63",
              "getName()": "17d7de7c",
              "getNewValueCountbyRequestId(uint256)": "46eee1c4",
              "getRequestIdByQueryHash(bytes32)": "1db842f0",
              "getRequestIdByRequestQIndex(uint256)": "6173c0b8",
              "getRequestIdByTimestamp(uint256)": "0f0b424d",
              "getRequestQ()": "b5413029",
              "getRequestUintVars(uint256,bytes32)": "e0ae93c1",
              "getRequestVars(uint256)": "e1eee6d6",
              "getStakerInfo(address)": "733bdef0",
              "getSubmissionsByTimestamp(uint256,uint256)": "11c98512",
              "getSymbol()": "15070401",
              "getTimestampbyRequestIDandIndex(uint256,uint256)": "77fbb663",
              "getUintVar(bytes32)": "612c8f7f",
              "getVariablesOnDeck()": "19e8e03b",
              "increaseApproval(address,uint256)": "d73dd623",
              "isInDispute(uint256,uint256)": "3df0777b",
              "mint(address,uint256)": "40c10f19",
              "mintingFinished()": "05d2035b",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "retrieveData(uint256,uint256)": "93fa4915",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "totalTokenSupply()": "1ca8b6cb",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[9]\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"zapToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Oracle contract with all zap getter functions. The logic for the functions on this contract  is saved on the ZapGettersLibrary, ZapTransfer, ZapGettersLibrary, and ZapStake\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_user\":\"address\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  \",\"params\":{\"_amount\":\"uint of amount\",\"_user\":\"address\"},\"return\":\"true if the user is alloed to trade the amount specified\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\",\"params\":{\"_spender\":\"The address which will spend the funds.\\r\",\"_value\":\"The amount of tokens to be spent.\\r\"}},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\",\"params\":{\"_challenge\":\"the challenge to search for\",\"_miner\":\"address that you want to know if they solved the challenge\"},\"return\":\"true if the _miner address provided solved the \"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\",\"params\":{\"_address\":\"to look up\",\"_disputeId\":\"to look up\"},\"return\":\"bool of whether or not party voted\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\\r\",\"return\":\"True if the operation was successful.\\r\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Zap to read data from the addressVars mapping\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\\\"_owner\\\")] addressVars[keccak256(\\\"zapContract\\\")]\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\",\"params\":{\"_disputeId\":\"to look up\"},\"return\":\"bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\"},\"return\":\"uint disputeId\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct\",\"_disputeId\":\"is the dispute id;\"},\"return\":\"uint value for the bytes32 data submitted\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\",\"return\":\"value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\",\"params\":{\"_requestId\":\"being requested\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up blocknumber\"},\"return\":\"uint of the blocknumber which the dispute was mined\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"the 5 miners' addresses\"},\"getName()\":{\"details\":\"Get the name of the token return string of the token name\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far\",\"params\":{\"_requestId\":\"the requestId to look up\"},\"return\":\"uint count of the number of values received for the requestId\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\"},\"return\":\"uint requestId\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\",\"params\":{\"_index\":\"to look up in the requestQ array\"},\"return\":\"uint of reqeuestId\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp \",\"params\":{\"_timestamp\":\"to check requestId\"},\"return\":\"uint of reqeuestId\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\",\"return\":\"the requestQ arrray\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct\",\"_requestId\":\"to look up\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\",\"params\":{\"_requestId\":\"to look up\"},\"return\":\"string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\",\"params\":{\"_staker\":\"address of staker inquiring about\"},\"return\":\"uint current state of stakeruint startDate of staking\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestampt to look up miners for\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\"},\"getSymbol()\":{\"details\":\"Get the symbol of the token return string of the token symbol\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\",\"params\":{\"_index\":\"is the value index to look up\",\"_requestID\":\"is the requestId to look up\"},\"return\":\"uint timestamp\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the ZapStorageStruct uintVars variable\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the ZapStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\\\"stakerCount\\\")]\"},\"return\":\"uint of specified variable  \"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \",\"params\":{\"_requestId\":\"to look up\",\"_timestamp\":\"is the timestamp to look up miners for\"},\"return\":\"bool true if requestId/timestamp is under dispute\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\\r\",\"params\":{\"_amount\":\"The amount of tokens to mint.\\r\",\"_to\":\"The address that will receive the minted tokens.\\r\"},\"return\":\"A boolean that indicates if the operation was successful.\\r\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\",\"params\":{\"_requestId\":\"being requested\",\"_timestamp\":\"to retreive data/value from\"},\"return\":\"value for timestamp submitted\"},\"totalTokenSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\",\"return\":\"uint total supply\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\\r\",\"params\":{\"_from\":\"address The address which you want to send tokens from\\r\",\"_to\":\"address The address which you want to transfer to\\r\",\"_value\":\"uint256 the amount of tokens to be transferred\\r\"}},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Zap Getters\"},\"userdoc\":{\"methods\":{\"increaseApproval(address,uint256)\":{\"notice\":\"approve should be called when allowed[_spender] == 0. To increment\\r allowed value is better to use this function to avoid 2 calls (and wait until\\r the first transaction is mined)\\r From MonolithDAO Token.sol\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapGetters.sol\":\"ZapGetters\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapGetters.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n// import \\\"./libraries/SafeMathM.sol\\\";\\nimport \\\"./libraries/ZapStorage.sol\\\";\\nimport \\\"./libraries/ZapTransfer.sol\\\";\\nimport \\\"./libraries/ZapGettersLibrary.sol\\\";\\nimport \\\"./libraries/ZapStake.sol\\\";\\n// import \\\"./libraries/Upgradable.sol\\\";\\nimport \\\"./ZapToken.sol\\\";\\n\\n/**\\n* @title Zap Getters\\n* @dev Oracle contract with all zap getter functions. The logic for the functions on this contract \\n* is saved on the ZapGettersLibrary, ZapTransfer, ZapGettersLibrary, and ZapStake\\n*/\\ncontract ZapGetters is ZapToken {\\n    using SafeMath for uint256;\\n\\n    using ZapTransfer for ZapStorage.ZapStorageStruct;\\n    using ZapGettersLibrary for ZapStorage.ZapStorageStruct;\\n    using ZapStake for ZapStorage.ZapStorageStruct;\\n\\n    ZapStorage.ZapStorageStruct zap;\\n    ZapToken token;\\n\\n    constructor (address zapToken) public {\\n        token = ZapToken(zapToken);\\n    }\\n\\n    // constructor (address coordinator) Upgradable(coordinator) public {\\n    //     _updateDependencies();\\n    // }\\n\\n    // function _updateDependencies() internal {\\n    //     address ZapToken_Address = coordinator.getContract(\\\"ZAPTOKEN\\\");\\n    //     token = ZapToken(ZapToken_Address);\\n    // }\\n\\n    /**\\n    * @param _user address\\n    * @param _spender address\\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\\n    */\\n    function allowance(address _user, address _spender) public view returns (uint) {\\n    //    return zap.allowance(_user,_spender);\\n        return token.allowance(_user, _spender);\\n    }\\n\\n    /**\\n    * @dev This function returns whether or not a given user is allowed to trade a given amount  \\n    * @param _user address\\n    * @param _amount uint of amount\\n    * @return true if the user is alloed to trade the amount specified\\n    */\\n    function allowedToTrade(address _user,uint _amount) external view returns(bool){\\n        return zap.allowedToTrade(_user,_amount);\\n    }\\n\\n    /**\\n    * @dev Gets balance of owner specified\\n    * @param _user is the owner address used to look up the balance\\n    * @return Returns the balance associated with the passed in _user\\n    */\\n    function balanceOf(address _user) public view returns (uint) { \\n        // return zap.balanceOf(_user);\\n        return token.balanceOf(_user);\\n    }\\n\\n    /**\\n    * @dev Queries the balance of _user at a specific _blockNumber\\n    * @param _user The address from which the balance will be retrieved\\n    * @param _blockNumber The block number when the balance is queried\\n    * @return The balance at _blockNumber\\n    */\\n    // function balanceOfAt(address _user, uint _blockNumber) external view returns (uint) {\\n    //     return zap.balanceOfAt(_user,_blockNumber);\\n    // }\\n\\n    /**\\n    * @dev This function tells you if a given challenge has been completed by a given miner\\n    * @param _challenge the challenge to search for\\n    * @param _miner address that you want to know if they solved the challenge\\n    * @return true if the _miner address provided solved the \\n    */\\n    function didMine(bytes32 _challenge, address _miner) external view returns(bool){\\n        return zap.didMine(_challenge,_miner);\\n    }\\n\\n\\n    /**\\n    * @dev Checks if an address voted in a given dispute\\n    * @param _disputeId to look up\\n    * @param _address to look up\\n    * @return bool of whether or not party voted\\n    */\\n    function didVote(uint _disputeId, address _address) external view returns(bool){\\n        return zap.didVote(_disputeId,_address);\\n    }\\n\\n\\n    /**\\n    * @dev allows Zap to read data from the addressVars mapping\\n    * @param _data is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. \\n    * These are examples of how the variables are saved within other functions:\\n    * addressVars[keccak256(\\\"_owner\\\")]\\n    * addressVars[keccak256(\\\"zapContract\\\")]\\n    */\\n    function getAddressVars(bytes32 _data) view external returns(address){\\n        return zap.getAddressVars(_data);\\n    }\\n\\n\\n    /**\\n    * @dev Gets all dispute variables\\n    * @param _disputeId to look up\\n    * @return bytes32 hash of dispute \\n    * @return bool executed where true if it has been voted on\\n    * @return bool disputeVotePassed\\n    * @return bool isPropFork true if the dispute is a proposed fork\\n    * @return address of reportedMiner\\n    * @return address of reportingParty\\n    * @return address of proposedForkAddress\\n    * @return uint of requestId\\n    * @return uint of timestamp\\n    * @return uint of value\\n    * @return uint of minExecutionDate\\n    * @return uint of numberOfVotes\\n    * @return uint of blocknumber\\n    * @return uint of minerSlot\\n    * @return uint of quorum\\n    * @return uint of fee\\n    * @return int count of the current tally\\n    */\\n    function getAllDisputeVars(uint _disputeId) public view returns(bytes32, bool, bool, bool, address, address, address,uint[9] memory, int){\\n        return zap.getAllDisputeVars(_disputeId);\\n    }\\n    \\n\\n    /**\\n    * @dev Getter function for variables for the requestId being currently mined(currentRequestId)\\n    * @return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \\n    */\\n    function getCurrentVariables() external view returns(bytes32, uint, uint,string memory,uint,uint){    \\n        return zap.getCurrentVariables();\\n    }\\n\\n    /**\\n    * @dev Checks if a given hash of miner,requestId has been disputed\\n    * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\\n    * @return uint disputeId\\n    */\\n    function getDisputeIdByDisputeHash(bytes32 _hash) external view returns(uint){\\n        return  zap.getDisputeIdByDisputeHash(_hash);\\n    }\\n    \\n\\n    /**\\n    * @dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\\n    * @param _disputeId is the dispute id;\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the disputeUintVars under the Dispute struct\\n    * @return uint value for the bytes32 data submitted\\n    */\\n    function getDisputeUintVars(uint _disputeId,bytes32 _data) external view returns(uint){\\n        return zap.getDisputeUintVars(_disputeId,_data);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @return value for timestamp of last proof of work submited\\n    * @return true if the is a timestamp for the lastNewValue\\n    */\\n    function getLastNewValue() external view returns(uint,bool){\\n        return zap.getLastNewValue();\\n    }\\n\\n\\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @param _requestId being requested\\n    * @return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\\n    */\\n    function getLastNewValueById(uint _requestId) external view returns(uint,bool){\\n        return zap.getLastNewValueById(_requestId);\\n    }\\n        \\n\\n    /**\\n    * @dev Gets blocknumber for mined timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up blocknumber\\n    * @return uint of the blocknumber which the dispute was mined\\n    */\\n    function getMinedBlockNum(uint _requestId, uint _timestamp) external view returns(uint){\\n        return zap.getMinedBlockNum(_requestId,_timestamp);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return the 5 miners' addresses\\n    */\\n    function getMinersByRequestIdAndTimestamp(uint _requestId, uint _timestamp) external view returns(address[5] memory){\\n        return zap.getMinersByRequestIdAndTimestamp(_requestId,_timestamp);\\n    }\\n\\n\\n    /**\\n    * @dev Get the name of the token\\n    * return string of the token name\\n    */\\n    function getName() external view returns(string memory){\\n        return zap.getName();\\n    }\\n\\n\\n    /**\\n    * @dev Counts the number of values that have been submited for the request \\n    * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\\n    * request so far\\n    * @param _requestId the requestId to look up\\n    * @return uint count of the number of values received for the requestId\\n    */\\n    function getNewValueCountbyRequestId(uint _requestId) external view returns(uint){\\n        return zap.getNewValueCountbyRequestId(_requestId);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the specified requestQ index\\n    * @param _index to look up in the requestQ array\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByRequestQIndex(uint _index) external view returns(uint){\\n        return zap.getRequestIdByRequestQIndex(_index);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for requestId based on timestamp \\n    * @param _timestamp to check requestId\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByTimestamp(uint _timestamp) external view returns(uint){    \\n        return zap.getRequestIdByTimestamp(_timestamp);\\n    }\\n\\n    /**\\n    * @dev Getter function for requestId based on the queryHash\\n    * @param _request is the hash(of string api and granularity) to check if a request already exists\\n    * @return uint requestId\\n    */\\n    function getRequestIdByQueryHash(bytes32 _request) external view returns(uint){    \\n        return zap.getRequestIdByQueryHash(_request);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the requestQ array\\n    * @return the requestQ arrray\\n    */\\n    function getRequestQ() view public returns(uint[51] memory){\\n        return zap.getRequestQ();\\n    }\\n\\n\\n    /**\\n    * @dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\\n    * for the requestId specified\\n    * @param _requestId to look up\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the apiUintVars under the requestDetails struct\\n    * @return uint value of the apiUintVars specified in _data for the requestId specified\\n    */\\n    function getRequestUintVars(uint _requestId,bytes32 _data) external view returns(uint){\\n        return zap.getRequestUintVars(_requestId,_data);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the API struct variables that are not mappings\\n    * @param _requestId to look up\\n    * @return string of api to query\\n    * @return string of symbol of api to query\\n    * @return bytes32 hash of string\\n    * @return bytes32 of the granularity(decimal places) requested\\n    * @return uint of index in requestQ array\\n    * @return uint of current payout/tip for this requestId\\n    */\\n    function getRequestVars(uint _requestId) external view returns(string memory, string memory,bytes32,uint, uint, uint) {\\n        return zap.getRequestVars(_requestId);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows users to retireve all information about a staker\\n    * @param _staker address of staker inquiring about\\n    * @return uint current state of staker\\n    * @return uint startDate of staking\\n    */\\n    function getStakerInfo(address _staker) external view returns(uint,uint){\\n        return zap.getStakerInfo(_staker);\\n    }\\n    \\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestampt to look up miners for\\n    * @return address[5] array of 5 addresses ofminers that mined the requestId\\n    */    \\n    function getSubmissionsByTimestamp(uint _requestId, uint _timestamp) external view returns(uint[5] memory){\\n        return zap.getSubmissionsByTimestamp(_requestId,_timestamp);\\n    }\\n\\n    /**\\n    * @dev Get the symbol of the token\\n    * return string of the token symbol\\n    */\\n    function getSymbol() external view returns(string memory){\\n        return zap.getSymbol();\\n    } \\n\\n    /**\\n    * @dev Gets the timestamp for the value based on their index\\n    * @param _requestID is the requestId to look up\\n    * @param _index is the value index to look up\\n    * @return uint timestamp\\n    */\\n    function getTimestampbyRequestIDandIndex(uint _requestID, uint _index) external view returns(uint){\\n        return zap.getTimestampbyRequestIDandIndex(_requestID,_index);\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the variables saved under the ZapStorageStruct uintVars variable\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the uintVars under the ZapStorageStruct struct\\n    * This is an example of how data is saved into the mapping within other functions: \\n    * self.uintVars[keccak256(\\\"stakerCount\\\")]\\n    * @return uint of specified variable  \\n    */ \\n    function getUintVar(bytes32 _data) view public returns(uint){\\n        return zap.getUintVar(_data);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for next requestId on queue/request with highest payout at time the function is called\\n    * @return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\\n    */\\n    function getVariablesOnDeck() external view returns(uint, uint,string memory){    \\n        return zap.getVariablesOnDeck();\\n    }\\n\\n    \\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return bool true if requestId/timestamp is under dispute\\n    */\\n    function isInDispute(uint _requestId, uint _timestamp) external view returns(bool){\\n        return zap.isInDispute(_requestId,_timestamp);\\n    }\\n    \\n\\n    /**\\n    * @dev Retreive value from oracle based on timestamp\\n    * @param _requestId being requested\\n    * @param _timestamp to retreive data/value from\\n    * @return value for timestamp submitted\\n    */\\n    function retrieveData(uint _requestId, uint _timestamp) external view returns (uint) {\\n        return zap.retrieveData(_requestId,_timestamp);\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the total_supply of oracle tokens\\n    * @return uint total supply\\n    */\\n    function totalTokenSupply() external view returns (uint) {\\n       return zap.totalSupply();\\n        // return token.totalSupply;\\n    }\\n\\n}\",\"keccak256\":\"0x2b972af67d59c28ea49c4834428690ff54e0c67bf9d0a6729a2f6158403fe228\"},\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"},\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Functions for retrieving min and Max in 51 length array (requestQ)\\n//Taken partly from: https://github.com/modular-network/ethereum-libraries-array-utils/blob/master/contracts/Array256Lib.sol\\n\\nlibrary Utilities{\\n\\n  /// @dev Returns the minimum value and position in an array.\\n  //@note IT IGNORES THE 0 INDEX\\n    function getMin(uint[51] memory arr) internal pure returns (uint256 min, uint256 minIndex) {\\n      assembly {\\n          minIndex := 50\\n          min := mload(add(arr, mul(minIndex , 0x20)))\\n          for {let i := 49 } gt(i,0) { i := sub(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(item,min){\\n                  min := item\\n                  minIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  // function getMin(uint[51] memory data) internal pure returns(uint256 minimal,uint minIndex) {\\n  //       minIndex = data.length - 1;\\n  //       minimal = data[minIndex];\\n  //       for(uint i = data.length-1;i > 0;i--) {\\n  //           if(data[i] < minimal) {\\n  //               minimal = data[i];\\n  //               minIndex = i;\\n  //           }\\n  //       }\\n  // }\\n  \\n  function getMax(uint256[51] memory arr) internal pure returns (uint256 max, uint256 maxIndex) {\\n      assembly {\\n          for { let i := 0 } lt(i,51) { i := add(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(max, item) {\\n                  max := item\\n                  maxIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  }\\n\",\"keccak256\":\"0x5194385f0138f2f8a8e91f322115e8a32e7ef14c6510a5f39d5a4618dd2aefc3\"},\"contracts/libraries/ZapDispute.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./ZapTransfer.sol\\\";\\n\\n/**\\n* @title Zap Dispute\\n* @dev Contais the methods related to disputes. Zap.sol references this library for function's logic.\\n*/\\n\\n\\nlibrary ZapDispute {\\n    using SafeMathM for uint256;\\n\\n    event NewDispute(uint indexed _disputeId, uint indexed _requestId, uint _timestamp, address _miner);//emitted when a new dispute is initialized\\n    event Voted(uint indexed _disputeID, bool _position, address indexed _voter);//emitted when a new vote happens\\n    event DisputeVoteTallied(uint indexed _disputeID, int _result,address indexed _reportedMiner,address _reportingParty, bool _active);//emitted upon dispute tally\\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Helps initialize a dispute by assigning it a disputeId\\n    * when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the\\n    * invalidated value information to POS voting\\n    * @param _requestId being disputed\\n    * @param _timestamp being disputed\\n    * @param _minerIndex the index of the miner that submitted the value being disputed. Since each official value\\n    * requires 5 miners to submit a value.\\n    */\\n    function beginDispute(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp,uint _minerIndex) public {\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId];\\n        //require that no more than a day( (24 hours * 60 minutes)/10minutes=144 blocks) has gone by since the value was \\\"mined\\\"\\n        require(block.number- _request.minedBlockNum[_timestamp]<= 144);\\n        require(_request.minedBlockNum[_timestamp] > 0);\\n        require(_minerIndex < 5);\\n        \\n        //_miner is the miner being disputed. For every mined value 5 miners are saved in an array and the _minerIndex\\n        //provided by the party initiating the dispute\\n        address _miner = _request.minersByValue[_timestamp][_minerIndex];\\n        bytes32 _hash = keccak256(abi.encodePacked(_miner,_requestId,_timestamp));\\n        \\n        //Ensures that a dispute is not already open for the that miner, requestId and timestamp\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);\\n        \\n        //Increase the dispute count by 1\\n        self.uintVars[keccak256(\\\"disputeCount\\\")] =  self.uintVars[keccak256(\\\"disputeCount\\\")] + 1;\\n        \\n        //Sets the new disputeCount as the disputeId\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        \\n        //maps the dispute hash to the disputeId\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        //maps the dispute to the Dispute struct\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash:_hash,\\n            isPropFork: false,\\n            reportedMiner: _miner,\\n            reportingParty: msg.sender,\\n            proposedForkAddress:address(0),\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            });\\n        \\n        //Saves all the dispute variables for the disputeId\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"requestId\\\")] = _requestId;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"timestamp\\\")] = _timestamp;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"value\\\")] = _request.valuesByTimestamp[_timestamp][_minerIndex];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minerSlot\\\")] = _minerIndex;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        \\n        //Values are sorted as they come in and the official value is the median of the first five\\n        //So the \\\"official value\\\" miner is always minerIndex==2. If the official value is being \\n        //disputed, it sets its status to inDispute(currentStatus = 3) so that users are made aware it is under dispute\\n        if(_minerIndex == 2){\\n            self.requestDetails[_requestId].inDispute[_timestamp] = true;\\n        }\\n        self.stakerDetails[_miner].currentStatus = 3;\\n        emit NewDispute(disputeId,_requestId,_timestamp,_miner);\\n    }\\n\\n\\n    /**\\n    * @dev Allows token holders to vote\\n    * @param _disputeId is the dispute id\\n    * @param _supportsDispute is the vote (true=the dispute has basis false = vote against dispute)\\n    */\\n    function vote(ZapStorage.ZapStorageStruct storage self, uint _disputeId, bool _supportsDispute) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        \\n        //Get the voteWeight or the balance of the user at the time/blockNumber the disupte began\\n        uint voteWeight = ZapTransfer.balanceOfAt(self,msg.sender,disp.disputeUintVars[keccak256(\\\"blockNumber\\\")]);\\n        \\n        //Require that the msg.sender has not voted\\n        require(disp.voted[msg.sender] != true);\\n        \\n        //Requre that the user had a balance >0 at time/blockNumber the disupte began\\n        require(voteWeight > 0);\\n        \\n        //ensures miners that are under dispute cannot vote\\n        require(self.stakerDetails[msg.sender].currentStatus != 3);\\n        \\n        //Update user voting status to true\\n        disp.voted[msg.sender] = true;\\n        \\n        //Update the number of votes for the dispute\\n        disp.disputeUintVars[keccak256(\\\"numberOfVotes\\\")] += 1;\\n        \\n        //Update the quorum by adding the voteWeight\\n        disp.disputeUintVars[keccak256(\\\"quorum\\\")] += voteWeight; \\n        \\n        //If the user supports the dispute increase the tally for the dispute by the voteWeight\\n        //otherwise decrease it\\n        if (_supportsDispute) {\\n            disp.tally = disp.tally + int(voteWeight);\\n        } else {\\n            disp.tally = disp.tally - int(voteWeight);\\n        }\\n        \\n        //Let the network know the user has voted on the dispute and their casted vote\\n        emit Voted(_disputeId,_supportsDispute,msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev tallies the votes.\\n    * @param _disputeId is the dispute id\\n    */\\n    function tallyVotes(ZapStorage.ZapStorageStruct storage self, uint _disputeId) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        ZapStorage.Request storage _request = self.requestDetails[disp.disputeUintVars[keccak256(\\\"requestId\\\")]];\\n\\n        //Ensure this has not already been executed/tallied\\n        require(disp.executed == false);\\n\\n        //Ensure the time for voting has elapsed\\n        require(now > disp.disputeUintVars[keccak256(\\\"minExecutionDate\\\")]);  \\n\\n        //If the vote is not a proposed fork \\n        if (disp.isPropFork== false){\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[disp.reportedMiner];  \\n            //If the vote for disputing a value is succesful(disp.tally >0) then unstake the reported \\n            // miner and transfer the stakeAmount and dispute fee to the reporting party \\n            if (disp.tally > 0 ) { \\n\\n                //Changing the currentStatus and startDate unstakes the reported miner and allows for the\\n                //transfer of the stakeAmount\\n                stakes.currentStatus = 0;\\n                stakes.startDate = now -(now % 86400);\\n\\n                //Decreases the stakerCount since the miner's stake is being slashed\\n                self.uintVars[keccak256(\\\"stakerCount\\\")]--;\\n                updateDisputeFee(self);\\n\\n                //Transfers the StakeAmount from the reporded miner to the reporting party\\n                ZapTransfer.doTransfer(self, disp.reportedMiner,disp.reportingParty, self.uintVars[keccak256(\\\"stakeAmount\\\")]);\\n                \\n                //Returns the dispute fee to the reportingParty\\n                ZapTransfer.doTransfer(self, address(this),disp.reportingParty,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                \\n                //Set the dispute state to passed/true\\n                disp.disputeVotePassed = true;\\n\\n                //If the dispute was succeful(miner found guilty) then update the timestamp value to zero\\n                //so that users don't use this datapoint\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.finalValues[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = 0;\\n                }\\n\\n            //If the vote for disputing a value is unsuccesful then update the miner status from being on \\n            //dispute(currentStatus=3) to staked(currentStatus =1) and tranfer the dispute fee to the miner\\n            } else {\\n                //Update the miner's current status to staked(currentStatus = 1)\\n                stakes.currentStatus = 1;              \\n                //tranfer the dispute fee to the miner\\n                ZapTransfer.doTransfer(self,address(this),disp.reportedMiner,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = false;\\n                }\\n            }\\n        //If the vote is for a proposed fork require a 20% quorum before exceduting the update to the new zap contract address\\n        } else {\\n            if(disp.tally > 0 ){\\n                require(disp.disputeUintVars[keccak256(\\\"quorum\\\")] >  (self.uintVars[keccak256(\\\"total_supply\\\")] * 20 / 100));\\n                self.addressVars[keccak256(\\\"zapContract\\\")] = disp.proposedForkAddress;\\n                disp.disputeVotePassed = true;\\n                emit NewZapAddress(disp.proposedForkAddress);\\n            }\\n        }\\n        \\n        //update the dispute status to executed\\n        disp.executed = true;\\n        emit DisputeVoteTallied(_disputeId,disp.tally,disp.reportedMiner,disp.reportingParty,disp.disputeVotePassed);\\n    }\\n\\n\\n    /**\\n    * @dev Allows for a fork to be proposed\\n    * @param _propNewZapAddress address for new proposed Zap\\n    */\\n    function proposeFork(ZapStorage.ZapStorageStruct storage self, address _propNewZapAddress) public {\\n        bytes32 _hash = keccak256(abi.encodePacked(_propNewZapAddress));\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);//This is the fork fee\\n        self.uintVars[keccak256(\\\"disputeCount\\\")]++;\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash: _hash,\\n            isPropFork: true,\\n            reportedMiner: msg.sender, \\n            reportingParty: msg.sender, \\n            proposedForkAddress: _propNewZapAddress,\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            }); \\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n    }\\n    \\n\\n    /**\\n    * @dev this function allows the dispute fee to fluctuate based on the number of miners on the system.\\n    * The floor for the fee is 15e18.\\n    */\\n    function updateDisputeFee(ZapStorage.ZapStorageStruct storage self) public {\\n            //if the number of staked miners divided by the target count of staked miners is less than 1\\n            if(self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")] < 1000){\\n                //Set the dispute fee at stakeAmt * (1- stakerCount/targetMiners)\\n                //or at the its minimum of 15e18 \\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = SafeMathM.max(15e18,self.uintVars[keccak256(\\\"stakeAmount\\\")].mul(1000 - self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")])/1000);\\n            }\\n            else{\\n                //otherwise set the dispute fee at 15e18 (the floor/minimum fee allowed)\\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = 15e18;\\n            }\\n    }\\n}\\n\",\"keccak256\":\"0x06cb29c92743acc7974e8615118cd9d1365f8d7816e1bc101b41f0830ef44a4d\"},\"contracts/libraries/ZapGettersLibrary.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n* @title Zap Getters Library\\n* @dev This is the getter library for all variables in the Zap Token system. ZapGetters references this \\n* libary for the getters logic\\n*/\\nlibrary ZapGettersLibrary{\\n    using SafeMathM for uint256;\\n\\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\\n\\n    /*Functions*/\\n\\n    //The next two functions are onlyOwner functions.  For Zap to be truly decentralized, we will need to transfer the Deity to the 0 address.\\n    //Only needs to be in library\\n    /**\\n    * @dev This function allows us to set a new Deity (or remove it) \\n    * @param _newDeity address of the new Deity of the zap system \\n    */\\n    function changeDeity(ZapStorage.ZapStorageStruct storage self, address _newDeity) internal{\\n        require(self.addressVars[keccak256(\\\"_deity\\\")] == msg.sender);\\n        self.addressVars[keccak256(\\\"_deity\\\")] =_newDeity;\\n    }\\n\\n\\n    //Only needs to be in library\\n    /**\\n    * @dev This function allows the deity to upgrade the Zap System\\n    * @param _zapContract address of new updated ZapCore contract\\n    */\\n    function changeZapContract(ZapStorage.ZapStorageStruct storage self,address _zapContract) internal{\\n        require(self.addressVars[keccak256(\\\"_deity\\\")] == msg.sender);\\n        self.addressVars[keccak256(\\\"zapContract\\\")]= _zapContract;\\n        emit NewZapAddress(_zapContract);\\n    }\\n\\n\\n    /*Zap Getters*/\\n\\n    /**\\n    * @dev This function tells you if a given challenge has been completed by a given miner\\n    * @param _challenge the challenge to search for\\n    * @param _miner address that you want to know if they solved the challenge\\n    * @return true if the _miner address provided solved the \\n    */\\n    function didMine(ZapStorage.ZapStorageStruct storage self, bytes32 _challenge,address _miner) internal view returns(bool){\\n        return self.minersByChallenge[_challenge][_miner];\\n    }\\n    \\n\\n    /**\\n    * @dev Checks if an address voted in a dispute\\n    * @param _disputeId to look up\\n    * @param _address of voting party to look up\\n    * @return bool of whether or not party voted\\n    */\\n    function didVote(ZapStorage.ZapStorageStruct storage self,uint _disputeId, address _address) internal view returns(bool){\\n        return self.disputesById[_disputeId].voted[_address];\\n    }\\n\\n\\n    /**\\n    * @dev allows Zap to read data from the addressVars mapping\\n    * @param _data is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. \\n    * These are examples of how the variables are saved within other functions:\\n    * addressVars[keccak256(\\\"_owner\\\")]\\n    * addressVars[keccak256(\\\"zapContract\\\")]\\n    */\\n    function getAddressVars(ZapStorage.ZapStorageStruct storage self, bytes32 _data) view internal returns(address){\\n        return self.addressVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Gets all dispute variables\\n    * @param _disputeId to look up\\n    * @return bytes32 hash of dispute \\n    * @return bool executed where true if it has been voted on\\n    * @return bool disputeVotePassed\\n    * @return bool isPropFork true if the dispute is a proposed fork\\n    * @return address of reportedMiner\\n    * @return address of reportingParty\\n    * @return address of proposedForkAddress\\n    * @return uint of requestId\\n    * @return uint of timestamp\\n    * @return uint of value\\n    * @return uint of minExecutionDate\\n    * @return uint of numberOfVotes\\n    * @return uint of blocknumber\\n    * @return uint of minerSlot\\n    * @return uint of quorum\\n    * @return uint of fee\\n    * @return int count of the current tally\\n    */\\n    function getAllDisputeVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId) internal view returns(bytes32, bool, bool, bool, address, address, address,uint[9] memory, int){\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        return(disp.hash,disp.executed, disp.disputeVotePassed, disp.isPropFork, disp.reportedMiner, disp.reportingParty,disp.proposedForkAddress,[disp.disputeUintVars[keccak256(\\\"requestId\\\")], disp.disputeUintVars[keccak256(\\\"timestamp\\\")], disp.disputeUintVars[keccak256(\\\"value\\\")], disp.disputeUintVars[keccak256(\\\"minExecutionDate\\\")], disp.disputeUintVars[keccak256(\\\"numberOfVotes\\\")], disp.disputeUintVars[keccak256(\\\"blockNumber\\\")], disp.disputeUintVars[keccak256(\\\"minerSlot\\\")], disp.disputeUintVars[keccak256(\\\"quorum\\\")],disp.disputeUintVars[keccak256(\\\"fee\\\")]],disp.tally);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for variables for the requestId being currently mined(currentRequestId)\\n    * @return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \\n    */\\n    function getCurrentVariables(ZapStorage.ZapStorageStruct storage self) internal view returns(bytes32, uint, uint,string memory,uint,uint){    \\n        return (self.currentChallenge,self.uintVars[keccak256(\\\"currentRequestId\\\")],self.uintVars[keccak256(\\\"difficulty\\\")],self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].queryString,self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].apiUintVars[keccak256(\\\"granularity\\\")],self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].apiUintVars[keccak256(\\\"totalTip\\\")]);\\n    }\\n\\n\\n    /**\\n    * @dev Checks if a given hash of miner,requestId has been disputed\\n    * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\\n    * @return uint disputeId\\n    */\\n    function getDisputeIdByDisputeHash(ZapStorage.ZapStorageStruct storage self,bytes32 _hash) internal view returns(uint){\\n        return  self.disputeIdByDisputeHash[_hash];\\n    }\\n\\n\\n    /**\\n    * @dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\\n    * @param _disputeId is the dispute id;\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the disputeUintVars under the Dispute struct\\n    * @return uint value for the bytes32 data submitted\\n    */\\n    function getDisputeUintVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId,bytes32 _data) internal view returns(uint){\\n        return self.disputesById[_disputeId].disputeUintVars[_data];\\n    }\\n\\n    \\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @return value for timestamp of last proof of work submited\\n    * @return true if the is a timestamp for the lastNewValue\\n    */\\n    function getLastNewValue(ZapStorage.ZapStorageStruct storage self) internal view returns(uint,bool){\\n        return (retrieveData(self,self.requestIdByTimestamp[self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")]], self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")]),true);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @param _requestId being requested\\n    * @return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\\n    */\\n    function getLastNewValueById(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(uint,bool){\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \\n        if(_request.requestTimestamps.length > 0){\\n            return (retrieveData(self,_requestId,_request.requestTimestamps[_request.requestTimestamps.length - 1]),true);\\n        }\\n        else{\\n            return (0,false);\\n        }\\n    }\\n\\n\\n    /**\\n    * @dev Gets blocknumber for mined timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up blocknumber\\n    * @return uint of the blocknumber which the dispute was mined\\n    */\\n    function getMinedBlockNum(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp) internal view returns(uint){\\n        return self.requestDetails[_requestId].minedBlockNum[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return the 5 miners' addresses\\n    */\\n    function getMinersByRequestIdAndTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(address[5] memory){\\n        return self.requestDetails[_requestId].minersByValue[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Get the name of the token\\n    * @return string of the token name\\n    */\\n    function getName(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\\n        return \\\"Zap Token\\\";\\n    }\\n\\n\\n    /**\\n    * @dev Counts the number of values that have been submited for the request \\n    * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\\n    * request so far\\n    * @param _requestId the requestId to look up\\n    * @return uint count of the number of values received for the requestId\\n    */\\n    function getNewValueCountbyRequestId(ZapStorage.ZapStorageStruct storage self, uint _requestId) internal view returns(uint){\\n        return self.requestDetails[_requestId].requestTimestamps.length;\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the specified requestQ index\\n    * @param _index to look up in the requestQ array\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByRequestQIndex(ZapStorage.ZapStorageStruct storage self, uint _index) internal view returns(uint){\\n        require(_index <= 50);\\n        return self.requestIdByRequestQIndex[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for requestId based on timestamp \\n    * @param _timestamp to check requestId\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _timestamp) internal view returns(uint){    \\n        return self.requestIdByTimestamp[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for requestId based on the qeuaryHash\\n    * @param _queryHash hash(of string api and granularity) to check if a request already exists\\n    * @return uint requestId\\n    */\\n    function getRequestIdByQueryHash(ZapStorage.ZapStorageStruct storage self, bytes32 _queryHash) internal view returns(uint){    \\n        return self.requestIdByQueryHash[_queryHash];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the requestQ array\\n    * @return the requestQ arrray\\n    */\\n    function getRequestQ(ZapStorage.ZapStorageStruct storage self) view internal returns(uint[51] memory){\\n        return self.requestQ;\\n    }\\n\\n\\n    /**\\n    * @dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\\n    * for the requestId specified\\n    * @param _requestId to look up\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the apiUintVars under the requestDetails struct\\n    * @return uint value of the apiUintVars specified in _data for the requestId specified\\n    */\\n    function getRequestUintVars(ZapStorage.ZapStorageStruct storage self,uint _requestId,bytes32 _data) internal view returns(uint){\\n        return self.requestDetails[_requestId].apiUintVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the API struct variables that are not mappings\\n    * @param _requestId to look up\\n    * @return string of api to query\\n    * @return string of symbol of api to query\\n    * @return bytes32 hash of string\\n    * @return bytes32 of the granularity(decimal places) requested\\n    * @return uint of index in requestQ array\\n    * @return uint of current payout/tip for this requestId\\n    */\\n    function getRequestVars(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(string memory,string memory, bytes32,uint, uint, uint) {\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \\n        return (_request.queryString,_request.dataSymbol,_request.queryHash, _request.apiUintVars[keccak256(\\\"granularity\\\")],_request.apiUintVars[keccak256(\\\"requestQPosition\\\")],_request.apiUintVars[keccak256(\\\"totalTip\\\")]);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows users to retireve all information about a staker\\n    * @param _staker address of staker inquiring about\\n    * @return uint current state of staker\\n    * @return uint startDate of staking\\n    */\\n    function getStakerInfo(ZapStorage.ZapStorageStruct storage self,address _staker) internal view returns(uint,uint){\\n        return (self.stakerDetails[_staker].currentStatus,self.stakerDetails[_staker].startDate);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestampt to look up miners for\\n    * @return address[5] array of 5 addresses ofminers that mined the requestId\\n    */\\n    function getSubmissionsByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(uint[5] memory){\\n        return self.requestDetails[_requestId].valuesByTimestamp[_timestamp];\\n    }\\n\\n    /**\\n    * @dev Get the symbol of the token\\n    * @return string of the token symbol\\n    */\\n    function getSymbol(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\\n        return \\\"TT\\\";\\n    } \\n\\n\\n    /**\\n    * @dev Gets the timestamp for the value based on their index\\n    * @param _requestID is the requestId to look up\\n    * @param _index is the value index to look up\\n    * @return uint timestamp\\n    */\\n    function getTimestampbyRequestIDandIndex(ZapStorage.ZapStorageStruct storage self,uint _requestID, uint _index) internal view returns(uint){\\n        return self.requestDetails[_requestID].requestTimestamps[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the variables saved under the ZapStorageStruct uintVars variable\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the uintVars under the ZapStorageStruct struct\\n    * This is an example of how data is saved into the mapping within other functions: \\n    * self.uintVars[keccak256(\\\"stakerCount\\\")]\\n    * @return uint of specified variable  \\n    */ \\n    function getUintVar(ZapStorage.ZapStorageStruct storage self,bytes32 _data) view internal returns(uint){\\n        return self.uintVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for next requestId on queue/request with highest payout at time the function is called\\n    * @return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\\n    */\\n    function getVariablesOnDeck(ZapStorage.ZapStorageStruct storage self) internal view returns(uint, uint,string memory){ \\n        uint newRequestId = getTopRequestID(self);\\n        return (newRequestId,self.requestDetails[newRequestId].apiUintVars[keccak256(\\\"totalTip\\\")],self.requestDetails[newRequestId].queryString);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the request with highest payout. This function is used withing the getVariablesOnDeck function\\n    * @return uint _requestId of request with highest payout at the time the function is called\\n    */\\n    function getTopRequestID(ZapStorage.ZapStorageStruct storage self) internal view returns(uint _requestId){\\n            uint _max;\\n            uint _index;\\n            (_max,_index) = Utilities.getMax(self.requestQ);\\n             _requestId = self.requestIdByRequestQIndex[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return bool true if requestId/timestamp is under dispute\\n    */\\n    function isInDispute(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(bool){\\n        return self.requestDetails[_requestId].inDispute[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Retreive value from oracle based on requestId/timestamp\\n    * @param _requestId being requested\\n    * @param _timestamp to retreive data/value from\\n    * @return uint value for requestId/timestamp submitted\\n    */\\n    function retrieveData(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns (uint) {\\n        return self.requestDetails[_requestId].finalValues[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the total_supply of oracle tokens\\n    * @return uint total supply\\n    */\\n    function totalSupply(ZapStorage.ZapStorageStruct storage self) internal view returns (uint) {\\n       return self.uintVars[keccak256(\\\"total_supply\\\")];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3b11f3f1fdc884e22320d4ae9923e51ec5860246a413b30bf62055e576b1a63f\"},\"contracts/libraries/ZapStake.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./ZapTransfer.sol\\\";\\nimport \\\"./ZapDispute.sol\\\";\\n\\n/**\\n* @title Zap Dispute\\n* @dev Contais the methods related to miners staking and unstaking. Zap.sol \\n* references this library for function's logic.\\n*/\\n\\nlibrary ZapStake {\\n    event NewStake(address indexed _sender);//Emits upon new staker\\n    event StakeWithdrawn(address indexed _sender);//Emits when a staker is now no longer staked\\n    event StakeWithdrawRequested(address indexed _sender);//Emits when a staker begins the 7 day withdraw period\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev This function stakes the five initial miners, sets the supply and all the constant variables.\\n    * This function is called by the constructor function on ZapMaster.sol\\n    */\\n    function init(ZapStorage.ZapStorageStruct storage self) public{\\n        require(self.uintVars[keccak256(\\\"decimals\\\")] == 0);\\n        //Give this contract 6000 Zap Token so that it can stake the initial 6 miners\\n        ZapTransfer.updateBalanceAtNow(self.balances[address(this)], 2**256-1 - 6000e18);\\n\\n        // //the initial 5 miner addresses are specfied below\\n        // //changed payable[5] to 6\\n        address payable[6] memory _initalMiners = [\\n            address(0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097),\\n            address(0xcd3B766CCDd6AE721141F452C550Ca635964ce71),\\n            address(0x2546BcD3c84621e976D8185a91A922aE77ECEc30),\\n            address(0xbDA5747bFD65F08deb54cb465eB87D40e51B197E),\\n            address(0xdD2FD4581271e230360230F9337D5c0430Bf44C0),\\n            address(0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199)\\n        ];\\n        //Stake each of the 5 miners specified above\\n        for(uint i=0;i<6;i++){//6th miner to allow for dispute\\n            //Miner balance is set at 1000e18 at the block that this function is ran\\n            ZapTransfer.updateBalanceAtNow(self.balances[_initalMiners[i]],1000e18);\\n\\n            newStake(self, _initalMiners[i]);\\n        }\\n\\n        //update the total suppply\\n        self.uintVars[keccak256(\\\"total_supply\\\")] += 6000e18;//6th miner to allow for dispute\\n        //set Constants\\n        self.uintVars[keccak256(\\\"decimals\\\")] = 18;\\n        self.uintVars[keccak256(\\\"targetMiners\\\")] = 200;\\n        self.uintVars[keccak256(\\\"stakeAmount\\\")] = 1000e18;\\n        self.uintVars[keccak256(\\\"disputeFee\\\")] = 970e18;\\n        self.uintVars[keccak256(\\\"timeTarget\\\")]= 600;\\n        self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")] = now - now  % self.uintVars[keccak256(\\\"timeTarget\\\")];\\n        self.uintVars[keccak256(\\\"difficulty\\\")] = 1;\\n    }\\n\\n\\n    /**\\n    * @dev This function allows stakers to request to withdraw their stake (no longer stake)\\n    * once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they\\n    * can withdraw the deposit\\n    */\\n    function requestStakingWithdraw(ZapStorage.ZapStorageStruct storage self) public {\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\\n        //Require that the miner is staked\\n        require(stakes.currentStatus == 1);\\n\\n        //Change the miner staked to locked to be withdrawStake\\n        stakes.currentStatus = 2;\\n\\n        //Change the startDate to now since the lock up period begins now\\n        //and the miner can only withdraw 7 days later from now(check the withdraw function)\\n        stakes.startDate = now -(now % 86400);\\n\\n        //Reduce the staker count\\n        self.uintVars[keccak256(\\\"stakerCount\\\")] -= 1;\\n        ZapDispute.updateDisputeFee(self);\\n        emit StakeWithdrawRequested(msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows users to withdraw their stake after a 7 day waiting period from request \\n    */\\n    function withdrawStake(ZapStorage.ZapStorageStruct storage self) public {\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\\n        //Require the staker has locked for withdraw(currentStatus ==2) and that 7 days have \\n        //passed by since they locked for withdraw\\n        require(now - (now % 86400) - stakes.startDate >= 7 days);\\n        require(stakes.currentStatus == 2);\\n        stakes.currentStatus = 0;\\n        emit StakeWithdrawn(msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows miners to deposit their stake.\\n    */\\n    function depositStake(ZapStorage.ZapStorageStruct storage self) public {\\n      newStake(self, msg.sender);\\n      //self adjusting disputeFee\\n      ZapDispute.updateDisputeFee(self);\\n    }\\n\\n    /**\\n    * @dev This function is used by the init function to succesfully stake the initial 5 miners.\\n    * The function updates their status/state and status start date so they are locked it so they can't withdraw\\n    * and updates the number of stakers in the system.\\n    */\\n    function newStake(ZapStorage.ZapStorageStruct storage self, address staker) internal {\\n        require(ZapTransfer.balanceOf(self,staker) >= self.uintVars[keccak256(\\\"stakeAmount\\\")]);\\n        //Ensure they can only stake if they are not currrently staked or if their stake time frame has ended\\n        //and they are currently locked for witdhraw\\n        require(self.stakerDetails[staker].currentStatus == 0 || self.stakerDetails[staker].currentStatus == 2);\\n        self.uintVars[keccak256(\\\"stakerCount\\\")] += 1;\\n        self.stakerDetails[staker] = ZapStorage.StakeInfo({\\n            currentStatus: 1,\\n            //this resets their stake start date to today\\n            startDate: now - (now % 86400)\\n        });\\n        emit NewStake(staker);\\n    }\\n}\\n\",\"keccak256\":\"0xea613dc19066e26a290d642332457603f83e7164b0701ec61fa42157749b75cf\"},\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"},\"contracts/libraries/ZapTransfer.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\n\\n/**\\n* @title Zap Transfer\\n* @dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\\n* reference this library for function's logic.\\n*/\\nlibrary ZapTransfer {\\n    using SafeMathM for uint256;\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);//ERC20 Approval event\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);//ERC20 Transfer Event\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Allows for a transfer of tokens to _to\\n    * @param _to The address to send tokens to\\n    * @param _amount The amount of tokens to send\\n    * @return true if transfer is successful\\n    */\\n    function transfer(ZapStorage.ZapStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\\n        doTransfer(self,msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @notice Send _amount tokens to _to from _from on the condition it\\n    * is approved by _from\\n    * @param _from The address holding the tokens being transferred\\n    * @param _to The address of the recipient\\n    * @param _amount The amount of tokens to be transferred\\n    * @return True if the transfer was successful\\n    */\\n    function transferFrom(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint256 _amount) public returns (bool success) {\\n        require(self.allowed[_from][msg.sender] >= _amount);\\n        self.allowed[_from][msg.sender] -= _amount;\\n        doTransfer(self,_from, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @dev This function approves a _spender an _amount of tokens to use\\n    * @param _spender address\\n    * @param _amount amount the spender is being approved for\\n    * @return true if spender appproved successfully\\n    */\\n    function approve(ZapStorage.ZapStorageStruct storage self, address _spender, uint _amount) public returns (bool) {\\n        require(allowedToTrade(self,msg.sender,_amount));\\n        require(_spender != address(0));\\n        self.allowed[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @param _user address of party with the balance\\n    * @param _spender address of spender of parties said balance\\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\\n    */\\n    function allowance(ZapStorage.ZapStorageStruct storage self,address _user, address _spender) public view returns (uint) {\\n       \\n       return self.allowed[_user][_spender]; \\n    }\\n\\n\\n    /**\\n    * @dev Completes POWO transfers by updating the balances on the current block number\\n    * @param _from address to transfer from\\n    * @param _to addres to transfer to\\n    * @param _amount to transfer\\n    */\\n    function doTransfer(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint _amount) public {\\n        require(_amount > 0);\\n        require(_to != address(0));\\n        require(allowedToTrade(self,_from,_amount)); //allowedToTrade checks the stakeAmount is removed from balance if the _user is staked\\n        uint previousBalance = balanceOfAt(self,_from, block.number);\\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\\n        previousBalance = balanceOfAt(self,_to, block.number);\\n        require(previousBalance + _amount >= previousBalance); // Check for overflow\\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n\\n    /**\\n    * @dev Gets balance of owner specified\\n    * @param _user is the owner address used to look up the balance\\n    * @return Returns the balance associated with the passed in _user\\n    */\\n    function balanceOf(ZapStorage.ZapStorageStruct storage self,address _user) public view returns (uint) {\\n        return balanceOfAt(self,_user, block.number);\\n    }\\n\\n\\n    /**\\n    * @dev Queries the balance of _user at a specific _blockNumber\\n    * @param _user The address from which the balance will be retrieved\\n    * @param _blockNumber The block number when the balance is queried\\n    * @return The balance at _blockNumber specified\\n    */\\n    function balanceOfAt(ZapStorage.ZapStorageStruct storage self,address _user, uint _blockNumber) public view returns (uint) {\\n        if ((self.balances[_user].length == 0) || (self.balances[_user][0].fromBlock > _blockNumber)) {\\n                return 0;\\n        }\\n     else {\\n        return getBalanceAt(self.balances[_user], _blockNumber);\\n     }\\n    }\\n\\n\\n    /**\\n    * @dev Getter for balance for owner on the specified _block number\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _block is the block number to search the balance on\\n    * @return the balance at the checkpoint\\n    */\\n    function getBalanceAt(ZapStorage.Checkpoint[] storage checkpoints, uint _block) view public returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n\\n    /**\\n    * @dev This function returns whether or not a given user is allowed to trade a given amount \\n    * and removing the staked amount from their balance if they are staked\\n    * @param _user address of user\\n    * @param _amount to check if the user can spend\\n    * @return true if they are allowed to spend the amount being checked\\n    */\\n    function allowedToTrade(ZapStorage.ZapStorageStruct storage self,address _user,uint _amount) public view returns(bool) {\\n        if(self.stakerDetails[_user].currentStatus >0){\\n            //Removes the stakeAmount from balance if the _user is staked\\n            if(balanceOf(self,_user).sub(self.uintVars[keccak256(\\\"stakeAmount\\\")]).sub(_amount) >= 0){\\n                return true;\\n            }\\n        }\\n        else if(balanceOf(self,_user).sub(_amount) >= 0){\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n\\n    /**\\n    * @dev Updates balance for from and to on the current block number via doTransfer\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _value is the new balance\\n    */\\n    function updateBalanceAtNow(ZapStorage.Checkpoint[] storage checkpoints, uint _value) public {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               ZapStorage.Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n        } else {\\n               ZapStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87399d0a6627e7413463f1df4e20cd3b6a9cbe459d826b096abf253a6f649748\"}},\"version\":1}",
          "userdoc": {
            "methods": {
              "increaseApproval(address,uint256)": {
                "notice": "approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r"
              }
            }
          }
        }
      },
      "contracts/ZapMaster.sol": {
        "ZapMaster": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "mintingFinished",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getRequestIdByTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getSubmissionsByTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256[5]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getAddressVars",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getSymbol",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getName",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getVariablesOnDeck",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalTokenSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_request",
                  "type": "bytes32"
                }
              ],
              "name": "getRequestIdByQueryHash",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getLastNewValueById",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "isInDispute",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getNewValueCountbyRequestId",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_newDeity",
                  "type": "address"
                }
              ],
              "name": "changeDeity",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getUintVar",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getRequestIdByRequestQIndex",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_challenge",
                  "type": "bytes32"
                },
                {
                  "name": "_miner",
                  "type": "address"
                }
              ],
              "name": "didMine",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getMinersByRequestIdAndTimestamp",
              "outputs": [
                {
                  "name": "",
                  "type": "address[5]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_staker",
                  "type": "address"
                }
              ],
              "name": "getStakerInfo",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestID",
                  "type": "uint256"
                },
                {
                  "name": "_index",
                  "type": "uint256"
                }
              ],
              "name": "getTimestampbyRequestIDandIndex",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "finishMinting",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getDisputeUintVars",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "retrieveData",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "allowedToTrade",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getCurrentVariables",
              "outputs": [
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "name": "_address",
                  "type": "address"
                }
              ],
              "name": "didVote",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_disputeId",
                  "type": "uint256"
                }
              ],
              "name": "getAllDisputeVars",
              "outputs": [
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "bool"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "address"
                },
                {
                  "name": "",
                  "type": "uint256[9]"
                },
                {
                  "name": "",
                  "type": "int256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getRequestQ",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256[51]"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "allocate",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                }
              ],
              "name": "getMinedBlockNum",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_hash",
                  "type": "bytes32"
                }
              ],
              "name": "getDisputeIdByDisputeHash",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_data",
                  "type": "bytes32"
                }
              ],
              "name": "getRequestUintVars",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_requestId",
                  "type": "uint256"
                }
              ],
              "name": "getRequestVars",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "string"
                },
                {
                  "name": "",
                  "type": "bytes32"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_zapContract",
                  "type": "address"
                }
              ],
              "name": "changeZapContract",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "getLastNewValue",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                },
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "name": "_zapContract",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "payable": true,
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "name": "_newZap",
                  "type": "address"
                }
              ],
              "name": "NewZapAddress",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [],
              "name": "MintFinished",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This is the Master contract with all zap getter functions and delegate call to Zap.  The logic for the functions on this contract is saved on the ZapGettersLibrary, ZapTransfer,  ZapGettersLibrary, and ZapStake",
            "methods": {
              "allowance(address,address)": {
                "params": {
                  "_spender": "address",
                  "_user": "address"
                },
                "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
              },
              "allowedToTrade(address,uint256)": {
                "details": "This function returns whether or not a given user is allowed to trade a given amount  ",
                "params": {
                  "_amount": "uint of amount",
                  "_user": "address"
                },
                "return": "true if the user is alloed to trade the amount specified"
              },
              "approve(address,uint256)": {
                "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
                "params": {
                  "_spender": "The address which will spend the funds.\r",
                  "_value": "The amount of tokens to be spent.\r"
                }
              },
              "balanceOf(address)": {
                "details": "Gets balance of owner specified",
                "params": {
                  "_user": "is the owner address used to look up the balance"
                },
                "return": "Returns the balance associated with the passed in _user"
              },
              "changeDeity(address)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp Only needs to be in library",
                "params": {
                  "_newDeity": "the new Deity in the contract"
                }
              },
              "changeZapContract(address)": {
                "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized",
                "params": {
                  "_zapContract": "the address of the new Zap Contract"
                }
              },
              "constructor": {
                "details": "The constructor sets the original `zapStorageOwner` of the contract to the sender account, the zap contract to the Zap master address and owner to the Zap master owner address ",
                "params": {
                  "_zapContract": "is the address for the zap contract"
                }
              },
              "didMine(bytes32,address)": {
                "details": "This function tells you if a given challenge has been completed by a given miner",
                "params": {
                  "_challenge": "the challenge to search for",
                  "_miner": "address that you want to know if they solved the challenge"
                },
                "return": "true if the _miner address provided solved the "
              },
              "didVote(uint256,address)": {
                "details": "Checks if an address voted in a given dispute",
                "params": {
                  "_address": "to look up",
                  "_disputeId": "to look up"
                },
                "return": "bool of whether or not party voted"
              },
              "finishMinting()": {
                "details": "Function to stop minting new tokens.\r",
                "return": "True if the operation was successful.\r"
              },
              "getAddressVars(bytes32)": {
                "details": "allows Zap to read data from the addressVars mapping",
                "params": {
                  "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed.  These are examples of how the variables are saved within other functions: addressVars[keccak256(\"_owner\")] addressVars[keccak256(\"zapContract\")]"
                }
              },
              "getAllDisputeVars(uint256)": {
                "details": "Gets all dispute variables",
                "params": {
                  "_disputeId": "to look up"
                },
                "return": "bytes32 hash of dispute bool executed where true if it has been voted onbool disputeVotePassedbool isPropFork true if the dispute is a proposed forkaddress of reportedMineraddress of reportingPartyaddress of proposedForkAddressuint of requestIduint of timestampuint of valueuint of minExecutionDateuint of numberOfVotesuint of blocknumberuint of minerSlotuint of quorumuint of feeint count of the current tally"
              },
              "getCurrentVariables()": {
                "details": "Getter function for variables for the requestId being currently mined(currentRequestId)",
                "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request "
              },
              "getDisputeIdByDisputeHash(bytes32)": {
                "details": "Checks if a given hash of miner,requestId has been disputed",
                "params": {
                  "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));"
                },
                "return": "uint disputeId"
              },
              "getDisputeUintVars(uint256,bytes32)": {
                "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the disputeUintVars under the Dispute struct",
                  "_disputeId": "is the dispute id;"
                },
                "return": "uint value for the bytes32 data submitted"
              },
              "getLastNewValue()": {
                "details": "Gets the a value for the latest timestamp available",
                "return": "value for timestamp of last proof of work submitedtrue if the is a timestamp for the lastNewValue"
              },
              "getLastNewValueById(uint256)": {
                "details": "Gets the a value for the latest timestamp available",
                "params": {
                  "_requestId": "being requested"
                },
                "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't"
              },
              "getMinedBlockNum(uint256,uint256)": {
                "details": "Gets blocknumber for mined timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up blocknumber"
                },
                "return": "uint of the blocknumber which the dispute was mined"
              },
              "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up miners for"
                },
                "return": "the 5 miners' addresses"
              },
              "getName()": {
                "details": "Get the name of the token return string of the token name"
              },
              "getNewValueCountbyRequestId(uint256)": {
                "details": "Counts the number of values that have been submited for the request  if called for the currentRequest being mined it can tell you how many miners have submitted a value for that request so far",
                "params": {
                  "_requestId": "the requestId to look up"
                },
                "return": "uint count of the number of values received for the requestId"
              },
              "getRequestIdByQueryHash(bytes32)": {
                "details": "Getter function for requestId based on the queryHash",
                "params": {
                  "_request": "is the hash(of string api and granularity) to check if a request already exists"
                },
                "return": "uint requestId"
              },
              "getRequestIdByRequestQIndex(uint256)": {
                "details": "Getter function for the specified requestQ index",
                "params": {
                  "_index": "to look up in the requestQ array"
                },
                "return": "uint of reqeuestId"
              },
              "getRequestIdByTimestamp(uint256)": {
                "details": "Getter function for requestId based on timestamp ",
                "params": {
                  "_timestamp": "to check requestId"
                },
                "return": "uint of reqeuestId"
              },
              "getRequestQ()": {
                "details": "Getter function for the requestQ array",
                "return": "the requestQ arrray"
              },
              "getRequestUintVars(uint256,bytes32)": {
                "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct for the requestId specified",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the apiUintVars under the requestDetails struct",
                  "_requestId": "to look up"
                },
                "return": "uint value of the apiUintVars specified in _data for the requestId specified"
              },
              "getRequestVars(uint256)": {
                "details": "Gets the API struct variables that are not mappings",
                "params": {
                  "_requestId": "to look up"
                },
                "return": "string of api to querystring of symbol of api to querybytes32 hash of stringbytes32 of the granularity(decimal places) requesteduint of index in requestQ arrayuint of current payout/tip for this requestId"
              },
              "getStakerInfo(address)": {
                "details": "This function allows users to retireve all information about a staker",
                "params": {
                  "_staker": "address of staker inquiring about"
                },
                "return": "uint current state of stakeruint startDate of staking"
              },
              "getSubmissionsByTimestamp(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestampt to look up miners for"
                },
                "return": "address[5] array of 5 addresses ofminers that mined the requestId"
              },
              "getSymbol()": {
                "details": "Get the symbol of the token return string of the token symbol"
              },
              "getTimestampbyRequestIDandIndex(uint256,uint256)": {
                "details": "Gets the timestamp for the value based on their index",
                "params": {
                  "_index": "is the value index to look up",
                  "_requestID": "is the requestId to look up"
                },
                "return": "uint timestamp"
              },
              "getUintVar(bytes32)": {
                "details": "Getter for the variables saved under the ZapStorageStruct uintVars variable",
                "params": {
                  "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is  the variables/strings used to save the data in the mapping. The variables names are   commented out under the uintVars under the ZapStorageStruct struct This is an example of how data is saved into the mapping within other functions:  self.uintVars[keccak256(\"stakerCount\")]"
                },
                "return": "uint of specified variable  "
              },
              "getVariablesOnDeck()": {
                "details": "Getter function for next requestId on queue/request with highest payout at time the function is called",
                "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string"
              },
              "isInDispute(uint256,uint256)": {
                "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp ",
                "params": {
                  "_requestId": "to look up",
                  "_timestamp": "is the timestamp to look up miners for"
                },
                "return": "bool true if requestId/timestamp is under dispute"
              },
              "mint(address,uint256)": {
                "details": "Function to mint tokens\r",
                "params": {
                  "_amount": "The amount of tokens to mint.\r",
                  "_to": "The address that will receive the minted tokens.\r"
                },
                "return": "A boolean that indicates if the operation was successful.\r"
              },
              "retrieveData(uint256,uint256)": {
                "details": "Retreive value from oracle based on timestamp",
                "params": {
                  "_requestId": "being requested",
                  "_timestamp": "to retreive data/value from"
                },
                "return": "value for timestamp submitted"
              },
              "totalTokenSupply()": {
                "details": "Getter for the total_supply of oracle tokens",
                "return": "uint total supply"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfer tokens from one address to another\r",
                "params": {
                  "_from": "address The address which you want to send tokens from\r",
                  "_to": "address The address which you want to transfer to\r",
                  "_value": "uint256 the amount of tokens to be transferred\r"
                }
              },
              "transferOwnership(address)": {
                "params": {
                  "newOwner": "The address to transfer ownership to."
                }
              }
            },
            "title": "Zap Master"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allocate(address,uint256)": "b78b52df",
              "allowance(address,address)": "dd62ed3e",
              "allowedToTrade(address,uint256)": "999cf26c",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "changeDeity(address)": "47abd7f1",
              "changeZapContract(address)": "e4203f66",
              "decimals()": "313ce567",
              "decreaseApproval(address,uint256)": "66188463",
              "didMine(bytes32,address)": "63bb82ad",
              "didVote(uint256,address)": "a7c438bc",
              "finishMinting()": "7d64bcb4",
              "getAddressVars(bytes32)": "133bee5e",
              "getAllDisputeVars(uint256)": "af0b1327",
              "getCurrentVariables()": "a22e407a",
              "getDisputeIdByDisputeHash(bytes32)": "da379941",
              "getDisputeUintVars(uint256,bytes32)": "7f6fd5d9",
              "getLastNewValue()": "fc7cf0a0",
              "getLastNewValueById(uint256)": "3180f8df",
              "getMinedBlockNum(uint256,uint256)": "c775b542",
              "getMinersByRequestIdAndTimestamp(uint256,uint256)": "69026d63",
              "getName()": "17d7de7c",
              "getNewValueCountbyRequestId(uint256)": "46eee1c4",
              "getRequestIdByQueryHash(bytes32)": "1db842f0",
              "getRequestIdByRequestQIndex(uint256)": "6173c0b8",
              "getRequestIdByTimestamp(uint256)": "0f0b424d",
              "getRequestQ()": "b5413029",
              "getRequestUintVars(uint256,bytes32)": "e0ae93c1",
              "getRequestVars(uint256)": "e1eee6d6",
              "getStakerInfo(address)": "733bdef0",
              "getSubmissionsByTimestamp(uint256,uint256)": "11c98512",
              "getSymbol()": "15070401",
              "getTimestampbyRequestIDandIndex(uint256,uint256)": "77fbb663",
              "getUintVar(bytes32)": "612c8f7f",
              "getVariablesOnDeck()": "19e8e03b",
              "increaseApproval(address,uint256)": "d73dd623",
              "isInDispute(uint256,uint256)": "3df0777b",
              "mint(address,uint256)": "40c10f19",
              "mintingFinished()": "05d2035b",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "retrieveData(uint256,uint256)": "93fa4915",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "totalTokenSupply()": "1ca8b6cb",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "",
          "userdoc": {
            "methods": {
              "increaseApproval(address,uint256)": {
                "notice": "approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r"
              }
            }
          }
        }
      },
      "contracts/ZapToken.sol": {
        "BasicToken": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "balanceOf(address)": {
                "details": "Gets the balance of the specified address.\r",
                "params": {
                  "_owner": "The address to query the the balance of.\r"
                },
                "return": "An uint256 representing the amount owned by the passed address.\r"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506103e1806100206000396000f3fe608060405260043610610051576000357c01000000000000000000000000000000000000000000000000000000009004806318160ddd1461005657806370a0823114610081578063a9059cbb146100e6575b600080fd5b34801561006257600080fd5b5061006b610159565b6040518082815260200191505060405180910390f35b34801561008d57600080fd5b506100d0600480360360208110156100a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061015f565b6040518082815260200191505060405180910390f35b3480156100f257600080fd5b5061013f6004803603604081101561010957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101a8565b604051808215151515815260200191505060405180910390f35b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156101e557600080fd5b61023782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461037e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102cc82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461039790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561038c57fe5b818303905092915050565b60008082840190508381101515156103ab57fe5b809150509291505056fea165627a7a72305820443eeac6c3055c63b112133ea95f6e75e69f4859f17934a56e0aed86bd4fea550029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x51 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x18160DDD EQ PUSH2 0x56 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH2 0x159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x237 DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x37E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x2CC DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x38C JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x3AB JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 DIFFICULTY RETURNDATACOPY 0xea 0xc6 0xc3 SDIV 0x5c PUSH4 0xB112133E 0xa9 0x5f PUSH15 0x75E69F4859F17934A56E0AED86BD4F 0xea SSTORE STOP 0x29 ",
              "sourceMap": "1620:990:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1620:990:2;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405260043610610051576000357c01000000000000000000000000000000000000000000000000000000009004806318160ddd1461005657806370a0823114610081578063a9059cbb146100e6575b600080fd5b34801561006257600080fd5b5061006b610159565b6040518082815260200191505060405180910390f35b34801561008d57600080fd5b506100d0600480360360208110156100a457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061015f565b6040518082815260200191505060405180910390f35b3480156100f257600080fd5b5061013f6004803603604081101561010957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506101a8565b604051808215151515815260200191505060405180910390f35b60005481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156101e557600080fd5b61023782600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461037e90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102cc82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461039790919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561038c57fe5b818303905092915050565b60008082840190508381101515156103ab57fe5b809150509291505056fea165627a7a72305820443eeac6c3055c63b112133ea95f6e75e69f4859f17934a56e0aed86bd4fea550029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x51 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x18160DDD EQ PUSH2 0x56 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B PUSH2 0x159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x237 DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x37E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x2CC DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x397 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x38C JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x3AB JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 DIFFICULTY RETURNDATACOPY 0xea 0xc6 0xc3 SDIV 0x5c PUSH4 0xB112133E 0xa9 0x5f PUSH15 0x75E69F4859F17934A56E0AED86BD4F 0xea SSTORE STOP 0x29 ",
              "sourceMap": "1620:990:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;898:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2492:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2492:115:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2492:115:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1902:371;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1902:371:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1902:371:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;898:26;;;;:::o;2492:115::-;2548:15;2583:8;:16;2592:6;2583:16;;;;;;;;;;;;;;;;2576:23;;2492:115;;;:::o;1902:371::-;1965:4;2005:1;1990:17;;:3;:17;;;;1982:26;;;;;;;;2110:32;2135:6;2110:8;:20;2119:10;2110:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2087:8;:20;2096:10;2087:20;;;;;;;;;;;;;;;:55;;;;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;2261:4;2254:11;;1902:371;;;;:::o;588:123::-;646:7;678:1;673;:6;;666:14;;;;;;702:1;698;:5;691:12;;588:123;;;;:::o;717:147::-;775:7;795:9;811:1;807;:5;795:17;;835:1;830;:6;;823:14;;;;;;855:1;848:8;;;717:147;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "198600",
                "executionCost": "245",
                "totalCost": "198845"
              },
              "external": {
                "balanceOf(address)": "601",
                "totalSupply()": "388",
                "transfer(address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\\r\",\"params\":{\"_owner\":\"The address to query the the balance of.\\r\"},\"return\":\"An uint256 representing the amount owned by the passed address.\\r\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapToken.sol\":\"BasicToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        },
        "ERC20": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "spender",
                  "type": "address"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "from",
                  "type": "address"
                },
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "owner",
                  "type": "address"
                },
                {
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "see https://github.com/ethereum/EIPs/issues/20\r",
            "methods": {},
            "title": "ERC20 interface\r"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "",
          "userdoc": {
            "methods": {}
          }
        },
        "ERC20Basic": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "who",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "gasEstimates": null,
            "methodIdentifiers": {
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb"
            }
          },
          "metadata": "",
          "userdoc": {
            "methods": {}
          }
        },
        "MintableToken": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "mintingFinished",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "finishMinting",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "remaining",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [],
              "name": "MintFinished",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "allowance(address,address)": {
                "details": "Function to check the amount of tokens that an owner allowed to a spender.\r",
                "params": {
                  "_owner": "address The address which owns the funds.\r",
                  "_spender": "address The address which will spend the funds.\r"
                },
                "return": "A uint256 specifying the amount of tokens still available for the spender.\r"
              },
              "approve(address,uint256)": {
                "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
                "params": {
                  "_spender": "The address which will spend the funds.\r",
                  "_value": "The amount of tokens to be spent.\r"
                }
              },
              "balanceOf(address)": {
                "details": "Gets the balance of the specified address.\r",
                "params": {
                  "_owner": "The address to query the the balance of.\r"
                },
                "return": "An uint256 representing the amount owned by the passed address.\r"
              },
              "finishMinting()": {
                "details": "Function to stop minting new tokens.\r",
                "return": "True if the operation was successful.\r"
              },
              "mint(address,uint256)": {
                "details": "Function to mint tokens\r",
                "params": {
                  "_amount": "The amount of tokens to mint.\r",
                  "_to": "The address that will receive the minted tokens.\r"
                },
                "return": "A boolean that indicates if the operation was successful.\r"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfer tokens from one address to another\r",
                "params": {
                  "_from": "address The address which you want to send tokens from\r",
                  "_to": "address The address which you want to transfer to\r",
                  "_value": "uint256 the amount of tokens to be transferred\r"
                }
              },
              "transferOwnership(address)": {
                "params": {
                  "newOwner": "The address to transfer ownership to."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60806040526000600360146101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115508061006f6000396000f3fe6080604052600436106100bf576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b146100c4578063095ea7b3146100f357806318160ddd1461016657806323b872dd1461019157806340c10f1914610224578063661884631461029757806370a082311461030a5780637d64bcb41461036f5780638da5cb5b1461039e578063a9059cbb146103f5578063d73dd62314610468578063dd62ed3e146104db578063f2fde38b14610560575b600080fd5b3480156100d057600080fd5b506100d96105b1565b604051808215151515815260200191505060405180910390f35b3480156100ff57600080fd5b5061014c6004803603604081101561011657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c4565b604051808215151515815260200191505060405180910390f35b34801561017257600080fd5b5061017b6106b6565b6040518082815260200191505060405180910390f35b34801561019d57600080fd5b5061020a600480360360608110156101b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106bc565b604051808215151515815260200191505060405180910390f35b34801561023057600080fd5b5061027d6004803603604081101561024757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109a8565b604051808215151515815260200191505060405180910390f35b3480156102a357600080fd5b506102f0600480360360408110156102ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b90565b604051808215151515815260200191505060405180910390f35b34801561031657600080fd5b506103596004803603602081101561032d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e21565b6040518082815260200191505060405180910390f35b34801561037b57600080fd5b50610384610e6a565b604051808215151515815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610f16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040157600080fd5b5061044e6004803603604081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f3c565b604051808215151515815260200191505060405180910390f35b34801561047457600080fd5b506104c16004803603604081101561048b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611112565b604051808215151515815260200191505060405180910390f35b3480156104e757600080fd5b5061054a600480360360408110156104fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061130e565b6040518082815260200191505060405180910390f35b34801561056c57600080fd5b506105af6004803603602081101561058357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611395565b005b600360149054906101000a900460ff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f957600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506107cc83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ed90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061086183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108b783826114ed90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0657600080fd5b600360149054906101000a900460ff16151515610a2257600080fd5b610a378260005461150690919063ffffffff16565b600081905550610a8f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ca1576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d35565b610cb483826114ed90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec857600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f7957600080fd5b610fcb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ed90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061106082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006111a382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561142d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156114fb57fe5b818303905092915050565b600080828401905083811015151561151a57fe5b809150509291505056fea165627a7a723058206cbc7f8357ff8b7ad211ba1eb06eac2b3c4de9319d272296f0bf6832cdcba9c80029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLER PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x1550 DUP1 PUSH2 0x6F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBF JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x36F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x560 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x359 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x384 PUSH2 0xE6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B3 PUSH2 0xF16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x48B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1112 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x130E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5AF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1395 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x7CC DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x861 DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x8B7 DUP4 DUP3 PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xA06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA37 DUP3 PUSH1 0x0 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0xA8F DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xD35 JUMP JUMPDEST PUSH2 0xCB4 DUP4 DUP3 PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xEC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xF79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFCB DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1060 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A3 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x13F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x14FB JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x151A JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH13 0xBC7F8357FF8B7AD211BA1EB06E 0xac 0x2b EXTCODECOPY 0x4d 0xe9 BALANCE SWAP14 0x27 0x22 SWAP7 CREATE 0xbf PUSH9 0x32CDCBA9C800290000 ",
              "sourceMap": "6937:1094:2:-;;;7103:5;7073:35;;;;;;;;;;;;;;;;;;;;311:10:3;303:5;;:18;;;;;;;;;;;;;;;;;;6937:1094:2;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600436106100bf576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b146100c4578063095ea7b3146100f357806318160ddd1461016657806323b872dd1461019157806340c10f1914610224578063661884631461029757806370a082311461030a5780637d64bcb41461036f5780638da5cb5b1461039e578063a9059cbb146103f5578063d73dd62314610468578063dd62ed3e146104db578063f2fde38b14610560575b600080fd5b3480156100d057600080fd5b506100d96105b1565b604051808215151515815260200191505060405180910390f35b3480156100ff57600080fd5b5061014c6004803603604081101561011657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c4565b604051808215151515815260200191505060405180910390f35b34801561017257600080fd5b5061017b6106b6565b6040518082815260200191505060405180910390f35b34801561019d57600080fd5b5061020a600480360360608110156101b457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106bc565b604051808215151515815260200191505060405180910390f35b34801561023057600080fd5b5061027d6004803603604081101561024757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109a8565b604051808215151515815260200191505060405180910390f35b3480156102a357600080fd5b506102f0600480360360408110156102ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b90565b604051808215151515815260200191505060405180910390f35b34801561031657600080fd5b506103596004803603602081101561032d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e21565b6040518082815260200191505060405180910390f35b34801561037b57600080fd5b50610384610e6a565b604051808215151515815260200191505060405180910390f35b3480156103aa57600080fd5b506103b3610f16565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561040157600080fd5b5061044e6004803603604081101561041857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f3c565b604051808215151515815260200191505060405180910390f35b34801561047457600080fd5b506104c16004803603604081101561048b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611112565b604051808215151515815260200191505060405180910390f35b3480156104e757600080fd5b5061054a600480360360408110156104fe57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061130e565b6040518082815260200191505060405180910390f35b34801561056c57600080fd5b506105af6004803603602081101561058357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611395565b005b600360149054906101000a900460ff1681565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f957600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506107cc83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ed90919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061086183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108b783826114ed90919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a0657600080fd5b600360149054906101000a900460ff16151515610a2257600080fd5b610a378260005461150690919063ffffffff16565b600081905550610a8f82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610ca1576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d35565b610cb483826114ed90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ec857600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f7957600080fd5b610fcb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114ed90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061106082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006111a382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461150690919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113f157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561142d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008282111515156114fb57fe5b818303905092915050565b600080828401905083811015151561151a57fe5b809150509291505056fea165627a7a723058206cbc7f8357ff8b7ad211ba1eb06eac2b3c4de9319d272296f0bf6832cdcba9c80029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBF JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0xC4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x30A JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x36F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x3F5 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x560 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17B PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x6BC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x247 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB90 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x359 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x384 PUSH2 0xE6A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B3 PUSH2 0xF16 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x474 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x48B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1112 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x54A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x130E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5AF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x583 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1395 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x7CC DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x861 DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x8B7 DUP4 DUP3 PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xA06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA37 DUP3 PUSH1 0x0 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0xA8F DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0xCA1 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xD35 JUMP JUMPDEST PUSH2 0xCB4 DUP4 DUP3 PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xEC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xF79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFCB DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x14ED SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1060 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A3 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1506 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x13F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x142D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x14FB JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x151A JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH13 0xBC7F8357FF8B7AD211BA1EB06E 0xac 0x2b EXTCODECOPY 0x4d 0xe9 BALANCE SWAP14 0x27 0x22 SWAP7 CREATE 0xbf PUSH9 0x32CDCBA9C800290000 ",
              "sourceMap": "6937:1094:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7073:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7073:35:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5209:206;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5209:206:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5209:206:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;898:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3971:583;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3971:583:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3971:583:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7448:300;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7448:300:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7448:300:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6462:468;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6462:468:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6462:468:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2492:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2492:115:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2492:115:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7878:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7878:150:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;51:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;51:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1902:371:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1902:371:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1902:371:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6158:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6158:298:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6158:298:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5754:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5754:144:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5754:144:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;656:200:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;656:200:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;656:200:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;7073:35:2;;;;;;;;;;;;;:::o;5209:206::-;5276:4;5325:6;5293:7;:19;5301:10;5293:19;;;;;;;;;;;;;;;:29;5313:8;5293:29;;;;;;;;;;;;;;;:38;;;;5368:8;5347:38;;5356:10;5347:38;;;5378:6;5347:38;;;;;;;;;;;;;;;;;;5403:4;5396:11;;5209:206;;;;:::o;898:26::-;;;;:::o;3971:583::-;4053:4;4093:1;4078:17;;:3;:17;;;;4070:26;;;;;;;;4107:18;4128:7;:14;4136:5;4128:14;;;;;;;;;;;;;;;:26;4143:10;4128:26;;;;;;;;;;;;;;;;4107:47;;4339:27;4359:6;4339:8;:15;4348:5;4339:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;4321:8;:15;4330:5;4321:15;;;;;;;;;;;;;;;:45;;;;4393:25;4411:6;4393:8;:13;4402:3;4393:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4377:8;:13;4386:3;4377:13;;;;;;;;;;;;;;;:41;;;;4458:22;4473:6;4458:10;:14;;:22;;;;:::i;:::-;4429:7;:14;4437:5;4429:14;;;;;;;;;;;;;;;:26;4444:10;4429:26;;;;;;;;;;;;;;;:51;;;;4512:3;4496:28;;4505:5;4496:28;;;4517:6;4496:28;;;;;;;;;;;;;;;;;;4542:4;4535:11;;;3971:583;;;;;:::o;7448:300::-;7526:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7154:15:2;;;;;;;;;;;7153:16;7145:25;;;;;;;;7557:24;7573:7;7557:11;;:15;;:24;;;;:::i;:::-;7543:11;:38;;;;7608:26;7626:7;7608:8;:13;7617:3;7608:13;;;;;;;;;;;;;;;;:17;;:26;;;;:::i;:::-;7592:8;:13;7601:3;7592:13;;;;;;;;;;;;;;;:42;;;;7655:3;7650:18;;;7660:7;7650:18;;;;;;;;;;;;;;;;;;7705:3;7684:34;;7701:1;7684:34;;;7710:7;7684:34;;;;;;;;;;;;;;;;;;7736:4;7729:11;;7448:300;;;;:::o;6462:468::-;6555:12;6580:13;6596:7;:19;6604:10;6596:19;;;;;;;;;;;;;;;:29;6616:8;6596:29;;;;;;;;;;;;;;;;6580:45;;6659:8;6640:16;:27;6636:188;;;6716:1;6684:7;:19;6692:10;6684:19;;;;;;;;;;;;;;;:29;6704:8;6684:29;;;;;;;;;;;;;;;:33;;;;6636:188;;;6782:30;6795:16;6782:8;:12;;:30;;;;:::i;:::-;6750:7;:19;6758:10;6750:19;;;;;;;;;;;;;;;:29;6770:8;6750:29;;;;;;;;;;;;;;;:62;;;;6636:188;6860:8;6839:61;;6848:10;6839:61;;;6870:7;:19;6878:10;6870:19;;;;;;;;;;;;;;;:29;6890:8;6870:29;;;;;;;;;;;;;;;;6839:61;;;;;;;;;;;;;;;;;;6918:4;6911:11;;;6462:468;;;;:::o;2492:115::-;2548:15;2583:8;:16;2592:6;2583:16;;;;;;;;;;;;;;;;2576:23;;2492:115;;;:::o;7878:150::-;7929:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7964:4:2;7946:15;;:22;;;;;;;;;;;;;;;;;;7984:14;;;;;;;;;;8016:4;8009:11;;7878:150;:::o;51:28:3:-;;;;;;;;;;;;;:::o;1902:371:2:-;1965:4;2005:1;1990:17;;:3;:17;;;;1982:26;;;;;;;;2110:32;2135:6;2110:8;:20;2119:10;2110:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2087:8;:20;2096:10;2087:20;;;;;;;;;;;;;;;:55;;;;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;2261:4;2254:11;;1902:371;;;;:::o;6158:298::-;6246:12;6303:46;6337:11;6303:7;:19;6311:10;6303:19;;;;;;;;;;;;;;;:29;6323:8;6303:29;;;;;;;;;;;;;;;;:33;;:46;;;;:::i;:::-;6271:7;:19;6279:10;6271:19;;;;;;;;;;;;;;;:29;6291:8;6271:29;;;;;;;;;;;;;;;:78;;;;6386:8;6365:61;;6374:10;6365:61;;;6396:7;:19;6404:10;6396:19;;;;;;;;;;;;;;;:29;6416:8;6396:29;;;;;;;;;;;;;;;;6365:61;;;;;;;;;;;;;;;;;;6444:4;6437:11;;6158:298;;;;:::o;5754:144::-;5828:17;5865:7;:15;5873:6;5865:15;;;;;;;;;;;;;;;:25;5881:8;5865:25;;;;;;;;;;;;;;;;5858:32;;5754:144;;;;:::o;656:200:3:-;469:5;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;765:1;745:22;;:8;:22;;;;737:31;;;;;;;;812:8;784:37;;805:5;;;;;;;;;;;784:37;;;;;;;;;;;;840:8;832:5;;:16;;;;;;;;;;;;;;;;;;656:200;:::o;588:123:2:-;646:7;678:1;673;:6;;666:14;;;;;;702:1;698;:5;691:12;;588:123;;;;:::o;717:147::-;775:7;795:9;811:1;807;:5;795:17;;835:1;830;:6;;823:14;;;;;;855:1;848:8;;;717:147;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1091200",
                "executionCost": "41693",
                "totalCost": "1132893"
              },
              "external": {
                "allowance(address,address)": "946",
                "approve(address,uint256)": "22373",
                "balanceOf(address)": "711",
                "decreaseApproval(address,uint256)": "infinite",
                "finishMinting()": "21732",
                "increaseApproval(address,uint256)": "infinite",
                "mint(address,uint256)": "infinite",
                "mintingFinished()": "486",
                "owner()": "612",
                "totalSupply()": "432",
                "transfer(address,uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite",
                "transferOwnership(address)": "22849"
              }
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decreaseApproval(address,uint256)": "66188463",
              "finishMinting()": "7d64bcb4",
              "increaseApproval(address,uint256)": "d73dd623",
              "mint(address,uint256)": "40c10f19",
              "mintingFinished()": "05d2035b",
              "owner()": "8da5cb5b",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\\r\",\"params\":{\"_owner\":\"address The address which owns the funds.\\r\",\"_spender\":\"address The address which will spend the funds.\\r\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\\r\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\",\"params\":{\"_spender\":\"The address which will spend the funds.\\r\",\"_value\":\"The amount of tokens to be spent.\\r\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\\r\",\"params\":{\"_owner\":\"The address to query the the balance of.\\r\"},\"return\":\"An uint256 representing the amount owned by the passed address.\\r\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\\r\",\"return\":\"True if the operation was successful.\\r\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\\r\",\"params\":{\"_amount\":\"The amount of tokens to mint.\\r\",\"_to\":\"The address that will receive the minted tokens.\\r\"},\"return\":\"A boolean that indicates if the operation was successful.\\r\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\\r\",\"params\":{\"_from\":\"address The address which you want to send tokens from\\r\",\"_to\":\"address The address which you want to transfer to\\r\",\"_value\":\"uint256 the amount of tokens to be transferred\\r\"}},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"increaseApproval(address,uint256)\":{\"notice\":\"approve should be called when allowed[_spender] == 0. To increment\\r allowed value is better to use this function to avoid 2 calls (and wait until\\r the first transaction is mined)\\r From MonolithDAO Token.sol\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapToken.sol\":\"MintableToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {
              "increaseApproval(address,uint256)": {
                "notice": "approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r"
              }
            }
          }
        },
        "SafeMath": {
          "abi": [],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b8561ec32fe9cbbb73b2a229e87b81087fb9318b3bc12236c152c1e2da3f1c540029",
              "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb8 JUMP 0x1e 0xc3 0x2f 0xe9 0xcb 0xbb PUSH20 0xB2A229E87B81087FB9318B3BC12236C152C1E2DA EXTCODEHASH SHR SLOAD STOP 0x29 ",
              "sourceMap": "103:764:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b8561ec32fe9cbbb73b2a229e87b81087fb9318b3bc12236c152c1e2da3f1c540029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb8 JUMP 0x1e 0xc3 0x2f 0xe9 0xcb 0xbb PUSH20 0xB2A229E87B81087FB9318B3BC12236C152C1E2DA EXTCODEHASH SHR SLOAD STOP 0x29 ",
              "sourceMap": "103:764:2:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15200",
                "executionCost": "116",
                "totalCost": "15316"
              },
              "internal": {
                "add(uint256,uint256)": "infinite",
                "div(uint256,uint256)": "infinite",
                "mul(uint256,uint256)": "infinite",
                "sub(uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapToken.sol\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        },
        "StandardToken": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "remaining",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "allowance(address,address)": {
                "details": "Function to check the amount of tokens that an owner allowed to a spender.\r",
                "params": {
                  "_owner": "address The address which owns the funds.\r",
                  "_spender": "address The address which will spend the funds.\r"
                },
                "return": "A uint256 specifying the amount of tokens still available for the spender.\r"
              },
              "approve(address,uint256)": {
                "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
                "params": {
                  "_spender": "The address which will spend the funds.\r",
                  "_value": "The amount of tokens to be spent.\r"
                }
              },
              "balanceOf(address)": {
                "details": "Gets the balance of the specified address.\r",
                "params": {
                  "_owner": "The address to query the the balance of.\r"
                },
                "return": "An uint256 representing the amount owned by the passed address.\r"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfer tokens from one address to another\r",
                "params": {
                  "_from": "address The address which you want to send tokens from\r",
                  "_to": "address The address which you want to transfer to\r",
                  "_value": "uint256 the amount of tokens to be transferred\r"
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50610f7b806100206000396000f3fe608060405260043610610088576000357c010000000000000000000000000000000000000000000000000000000090048063095ea7b31461008d57806318160ddd1461010057806323b872dd1461012b57806366188463146101be57806370a0823114610231578063a9059cbb14610296578063d73dd62314610309578063dd62ed3e1461037c575b600080fd5b34801561009957600080fd5b506100e6600480360360408110156100b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610401565b604051808215151515815260200191505060405180910390f35b34801561010c57600080fd5b506101156104f3565b6040518082815260200191505060405180910390f35b34801561013757600080fd5b506101a46004803603606081101561014e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104f9565b604051808215151515815260200191505060405180910390f35b3480156101ca57600080fd5b50610217600480360360408110156101e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e5565b604051808215151515815260200191505060405180910390f35b34801561023d57600080fd5b506102806004803603602081101561025457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a76565b6040518082815260200191505060405180910390f35b3480156102a257600080fd5b506102ef600480360360408110156102b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610abf565b604051808215151515815260200191505060405180910390f35b34801561031557600080fd5b506103626004803603604081101561032c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c95565b604051808215151515815260200191505060405180910390f35b34801561038857600080fd5b506103eb6004803603604081101561039f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e91565b6040518082815260200191505060405180910390f35b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561053657600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061060983600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1890919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061069e83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106f48382610f1890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156108f6576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098a565b6109098382610f1890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610afc57600080fd5b610b4e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610d2682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610f2657fe5b818303905092915050565b6000808284019050838110151515610f4557fe5b809150509291505056fea165627a7a72305820e2d92cb92318d2748e154ac8825d67bae3b085c131dd049e5b35d26b335d6f3f0029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF7B DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x37C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x115 PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x280 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xABF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x609 DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x69E DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x6F4 DUP4 DUP3 PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x98A JUMP JUMPDEST PUSH2 0x909 DUP4 DUP3 PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4E DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xBE3 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD26 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0xF26 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0xF45 JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xe2 0xd9 0x2c 0xb9 0x23 XOR 0xd2 PUSH21 0x8E154AC8825D67BAE3B085C131DD049E5B35D26B33 0x5d PUSH16 0x3F002900000000000000000000000000 ",
              "sourceMap": "3567:3366:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3567:3366:2;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405260043610610088576000357c010000000000000000000000000000000000000000000000000000000090048063095ea7b31461008d57806318160ddd1461010057806323b872dd1461012b57806366188463146101be57806370a0823114610231578063a9059cbb14610296578063d73dd62314610309578063dd62ed3e1461037c575b600080fd5b34801561009957600080fd5b506100e6600480360360408110156100b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610401565b604051808215151515815260200191505060405180910390f35b34801561010c57600080fd5b506101156104f3565b6040518082815260200191505060405180910390f35b34801561013757600080fd5b506101a46004803603606081101561014e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506104f9565b604051808215151515815260200191505060405180910390f35b3480156101ca57600080fd5b50610217600480360360408110156101e157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107e5565b604051808215151515815260200191505060405180910390f35b34801561023d57600080fd5b506102806004803603602081101561025457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610a76565b6040518082815260200191505060405180910390f35b3480156102a257600080fd5b506102ef600480360360408110156102b957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610abf565b604051808215151515815260200191505060405180910390f35b34801561031557600080fd5b506103626004803603604081101561032c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c95565b604051808215151515815260200191505060405180910390f35b34801561038857600080fd5b506103eb6004803603604081101561039f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e91565b6040518082815260200191505060405180910390f35b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561053657600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061060983600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1890919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061069e83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106f48382610f1890919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156108f6576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061098a565b6109098382610f1890919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610afc57600080fd5b610b4e82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f1890919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be382600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6000610d2682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f3190919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610f2657fe5b818303905092915050565b6000808284019050838110151515610f4557fe5b809150509291505056fea165627a7a72305820e2d92cb92318d2748e154ac8825d67bae3b085c131dd049e5b35d26b335d6f3f0029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x231 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x296 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x309 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x37C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x115 PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x14E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x280 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x254 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EF PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xABF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3EB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x609 DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x69E DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x6F4 DUP4 DUP3 PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0x8F6 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x98A JUMP JUMPDEST PUSH2 0x909 DUP4 DUP3 PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4E DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF18 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xBE3 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD26 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xF31 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0xF26 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0xF45 JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xe2 0xd9 0x2c 0xb9 0x23 XOR 0xd2 PUSH21 0x8E154AC8825D67BAE3B085C131DD049E5B35D26B33 0x5d PUSH16 0x3F002900000000000000000000000000 ",
              "sourceMap": "3567:3366:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5209:206;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5209:206:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5209:206:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;898:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3971:583;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3971:583:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3971:583:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6462:468;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6462:468:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6462:468:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2492:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2492:115:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2492:115:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1902:371;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1902:371:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1902:371:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6158:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6158:298:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6158:298:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5754:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5754:144:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5754:144:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5209:206;5276:4;5325:6;5293:7;:19;5301:10;5293:19;;;;;;;;;;;;;;;:29;5313:8;5293:29;;;;;;;;;;;;;;;:38;;;;5368:8;5347:38;;5356:10;5347:38;;;5378:6;5347:38;;;;;;;;;;;;;;;;;;5403:4;5396:11;;5209:206;;;;:::o;898:26::-;;;;:::o;3971:583::-;4053:4;4093:1;4078:17;;:3;:17;;;;4070:26;;;;;;;;4107:18;4128:7;:14;4136:5;4128:14;;;;;;;;;;;;;;;:26;4143:10;4128:26;;;;;;;;;;;;;;;;4107:47;;4339:27;4359:6;4339:8;:15;4348:5;4339:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;4321:8;:15;4330:5;4321:15;;;;;;;;;;;;;;;:45;;;;4393:25;4411:6;4393:8;:13;4402:3;4393:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4377:8;:13;4386:3;4377:13;;;;;;;;;;;;;;;:41;;;;4458:22;4473:6;4458:10;:14;;:22;;;;:::i;:::-;4429:7;:14;4437:5;4429:14;;;;;;;;;;;;;;;:26;4444:10;4429:26;;;;;;;;;;;;;;;:51;;;;4512:3;4496:28;;4505:5;4496:28;;;4517:6;4496:28;;;;;;;;;;;;;;;;;;4542:4;4535:11;;;3971:583;;;;;:::o;6462:468::-;6555:12;6580:13;6596:7;:19;6604:10;6596:19;;;;;;;;;;;;;;;:29;6616:8;6596:29;;;;;;;;;;;;;;;;6580:45;;6659:8;6640:16;:27;6636:188;;;6716:1;6684:7;:19;6692:10;6684:19;;;;;;;;;;;;;;;:29;6704:8;6684:29;;;;;;;;;;;;;;;:33;;;;6636:188;;;6782:30;6795:16;6782:8;:12;;:30;;;;:::i;:::-;6750:7;:19;6758:10;6750:19;;;;;;;;;;;;;;;:29;6770:8;6750:29;;;;;;;;;;;;;;;:62;;;;6636:188;6860:8;6839:61;;6848:10;6839:61;;;6870:7;:19;6878:10;6870:19;;;;;;;;;;;;;;;:29;6890:8;6870:29;;;;;;;;;;;;;;;;6839:61;;;;;;;;;;;;;;;;;;6918:4;6911:11;;;6462:468;;;;:::o;2492:115::-;2548:15;2583:8;:16;2592:6;2583:16;;;;;;;;;;;;;;;;2576:23;;2492:115;;;:::o;1902:371::-;1965:4;2005:1;1990:17;;:3;:17;;;;1982:26;;;;;;;;2110:32;2135:6;2110:8;:20;2119:10;2110:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2087:8;:20;2096:10;2087:20;;;;;;;;;;;;;;;:55;;;;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;2261:4;2254:11;;1902:371;;;;:::o;6158:298::-;6246:12;6303:46;6337:11;6303:7;:19;6311:10;6303:19;;;;;;;;;;;;;;;:29;6323:8;6303:29;;;;;;;;;;;;;;;;:33;;:46;;;;:::i;:::-;6271:7;:19;6279:10;6271:19;;;;;;;;;;;;;;;:29;6291:8;6271:29;;;;;;;;;;;;;;;:78;;;;6386:8;6365:61;;6374:10;6365:61;;;6396:7;:19;6404:10;6396:19;;;;;;;;;;;;;;;:29;6416:8;6396:29;;;;;;;;;;;;;;;;6365:61;;;;;;;;;;;;;;;;;;6444:4;6437:11;;6158:298;;;;:::o;5754:144::-;5828:17;5865:7;:15;5873:6;5865:15;;;;;;;;;;;;;;;:25;5881:8;5865:25;;;;;;;;;;;;;;;;5858:32;;5754:144;;;;:::o;588:123::-;646:7;678:1;673;:6;;666:14;;;;;;702:1;698;:5;691:12;;588:123;;;;:::o;717:147::-;775:7;795:9;811:1;807;:5;795:17;;835:1;830;:6;;823:14;;;;;;855:1;848:8;;;717:147;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "792600",
                "executionCost": "825",
                "totalCost": "793425"
              },
              "external": {
                "allowance(address,address)": "858",
                "approve(address,uint256)": "22351",
                "balanceOf(address)": "667",
                "decreaseApproval(address,uint256)": "infinite",
                "increaseApproval(address,uint256)": "infinite",
                "totalSupply()": "410",
                "transfer(address,uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decreaseApproval(address,uint256)": "66188463",
              "increaseApproval(address,uint256)": "d73dd623",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\\r\",\"params\":{\"_owner\":\"address The address which owns the funds.\\r\",\"_spender\":\"address The address which will spend the funds.\\r\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\\r\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\",\"params\":{\"_spender\":\"The address which will spend the funds.\\r\",\"_value\":\"The amount of tokens to be spent.\\r\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\\r\",\"params\":{\"_owner\":\"The address to query the the balance of.\\r\"},\"return\":\"An uint256 representing the amount owned by the passed address.\\r\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\\r\",\"params\":{\"_from\":\"address The address which you want to send tokens from\\r\",\"_to\":\"address The address which you want to transfer to\\r\",\"_value\":\"uint256 the amount of tokens to be transferred\\r\"}}}},\"userdoc\":{\"methods\":{\"increaseApproval(address,uint256)\":{\"notice\":\"approve should be called when allowed[_spender] == 0. To increment\\r allowed value is better to use this function to avoid 2 calls (and wait until\\r the first transaction is mined)\\r From MonolithDAO Token.sol\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapToken.sol\":\"StandardToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {
              "increaseApproval(address,uint256)": {
                "notice": "approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r"
              }
            }
          }
        },
        "ZapToken": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "mintingFinished",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "finishMinting",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "name": "",
                  "type": "string"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "to",
                  "type": "address"
                },
                {
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "allocate",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseApproval",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "remaining",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [],
              "name": "MintFinished",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "allowance(address,address)": {
                "details": "Function to check the amount of tokens that an owner allowed to a spender.\r",
                "params": {
                  "_owner": "address The address which owns the funds.\r",
                  "_spender": "address The address which will spend the funds.\r"
                },
                "return": "A uint256 specifying the amount of tokens still available for the spender.\r"
              },
              "approve(address,uint256)": {
                "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r",
                "params": {
                  "_spender": "The address which will spend the funds.\r",
                  "_value": "The amount of tokens to be spent.\r"
                }
              },
              "balanceOf(address)": {
                "details": "Gets the balance of the specified address.\r",
                "params": {
                  "_owner": "The address to query the the balance of.\r"
                },
                "return": "An uint256 representing the amount owned by the passed address.\r"
              },
              "finishMinting()": {
                "details": "Function to stop minting new tokens.\r",
                "return": "True if the operation was successful.\r"
              },
              "mint(address,uint256)": {
                "details": "Function to mint tokens\r",
                "params": {
                  "_amount": "The amount of tokens to mint.\r",
                  "_to": "The address that will receive the minted tokens.\r"
                },
                "return": "A boolean that indicates if the operation was successful.\r"
              },
              "transfer(address,uint256)": {
                "details": "transfer token for a specified address\r",
                "params": {
                  "_to": "The address to transfer to.\r",
                  "_value": "The amount to be transferred.\r"
                }
              },
              "transferFrom(address,address,uint256)": {
                "details": "Transfer tokens from one address to another\r",
                "params": {
                  "_from": "address The address which you want to send tokens from\r",
                  "_to": "address The address which you want to transfer to\r",
                  "_value": "uint256 the amount of tokens to be transferred\r"
                }
              },
              "transferOwnership(address)": {
                "params": {
                  "newOwner": "The address to transfer ownership to."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "60806040526000600360146101000a81548160ff0219169083151502179055506040805190810160405280600381526020017f5a61700000000000000000000000000000000000000000000000000000000000815250600490805190602001906200006c92919062000107565b506040805190810160405280600381526020017f5a4150000000000000000000000000000000000000000000000000000000000081525060059080519060200190620000ba92919062000107565b50601260065533600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001b6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014a57805160ff19168380011785556200017b565b828001600101855582156200017b579182015b828111156200017a5782518255916020019190600101906200015d565b5b5090506200018a91906200018e565b5090565b620001b391905b80821115620001af57600081600090555060010162000195565b5090565b90565b61187380620001c66000396000f3fe6080604052600436106100eb576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b146100f057806306fdde031461011f578063095ea7b3146101af57806318160ddd1461022257806323b872dd1461024d578063313ce567146102e057806340c10f191461030b578063661884631461037e57806370a08231146103f15780637d64bcb4146104565780638da5cb5b1461048557806395d89b41146104dc578063a9059cbb1461056c578063b78b52df146105df578063d73dd6231461063a578063dd62ed3e146106ad578063f2fde38b14610732575b600080fd5b3480156100fc57600080fd5b50610105610783565b604051808215151515815260200191505060405180910390f35b34801561012b57600080fd5b50610134610796565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610174578082015181840152602081019050610159565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bb57600080fd5b50610208600480360360408110156101d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610834565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610926565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b506102c66004803603606081101561027057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092c565b604051808215151515815260200191505060405180910390f35b3480156102ec57600080fd5b506102f5610c18565b6040518082815260200191505060405180910390f35b34801561031757600080fd5b506103646004803603604081101561032e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c1e565b604051808215151515815260200191505060405180910390f35b34801561038a57600080fd5b506103d7600480360360408110156103a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e06565b604051808215151515815260200191505060405180910390f35b3480156103fd57600080fd5b506104406004803603602081101561041457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611097565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b5061046b6110e0565b604051808215151515815260200191505060405180910390f35b34801561049157600080fd5b5061049a61118c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e857600080fd5b506104f16111b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610531578082015181840152602081019050610516565b50505050905090810190601f16801561055e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057857600080fd5b506105c56004803603604081101561058f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611250565b604051808215151515815260200191505060405180910390f35b3480156105eb57600080fd5b506106386004803603604081101561060257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611426565b005b34801561064657600080fd5b506106936004803603604081101561065d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611435565b604051808215151515815260200191505060405180910390f35b3480156106b957600080fd5b5061071c600480360360408110156106d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611631565b6040518082815260200191505060405180910390f35b34801561073e57600080fd5b506107816004803603602081101561075557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b8565b005b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561096957600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610a3c83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ad183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b27838261181090919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7c57600080fd5b600360149054906101000a900460ff16151515610c9857600080fd5b610cad8260005461182990919063ffffffff16565b600081905550610d0582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610f17576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fab565b610f2a838261181090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113e57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112485780601f1061121d57610100808354040283529160200191611248565b820191906000526020600020905b81548152906001019060200180831161122b57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561128d57600080fd5b6112df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6114308282610c1e565b505050565b60006114c682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561175057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561181e57fe5b818303905092915050565b600080828401905083811015151561183d57fe5b809150509291505056fea165627a7a7230582031bbafb7d006f1a72fd4646b3a363a13b60e1c969e53986449a2ccdf7d7017860029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A61700000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x6C SWAP3 SWAP2 SWAP1 PUSH3 0x107 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5A41500000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xBA SWAP3 SWAP2 SWAP1 PUSH3 0x107 JUMP JUMPDEST POP PUSH1 0x12 PUSH1 0x6 SSTORE CALLER PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH3 0x1B6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x14A JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x17B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x17B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x17A JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x15D JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x18A SWAP2 SWAP1 PUSH3 0x18E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x1B3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x1AF JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x195 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1873 DUP1 PUSH3 0x1C6 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0xB78B52DF EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x783 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x796 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x174 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x159 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1A1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x834 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F5 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1097 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46B PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49A PUSH2 0x118C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F1 PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x531 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x516 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x55E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x638 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1426 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x693 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1631 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x16B8 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x82C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x801 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x82C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x80F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0xA3C DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xAD1 DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xB27 DUP4 DUP3 PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xC7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCAD DUP3 PUSH1 0x0 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0xD05 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xFAB JUMP JUMPDEST PUSH2 0xF2A DUP4 DUP3 PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x1248 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x121D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1248 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x122B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x128D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12DF DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1374 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1430 DUP3 DUP3 PUSH2 0xC1E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C6 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1750 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x181E JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x183D JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE 0xbb 0xaf 0xb7 0xd0 MOD CALL 0xa7 0x2f 0xd4 PUSH5 0x6B3A363A13 0xb6 0xe SHR SWAP7 SWAP15 MSTORE8 SWAP9 PUSH5 0x49A2CCDF7D PUSH17 0x1786002900000000000000000000000000 ",
              "sourceMap": "8035:233:2:-;;;7103:5;7073:35;;;;;;;;;;;;;;;;;;;;8077:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8110:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8171:2;8145:28;;311:10:3;303:5;;:18;;;;;;;;;;;;;;;;;;8035:233:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052600436106100eb576000357c01000000000000000000000000000000000000000000000000000000009004806305d2035b146100f057806306fdde031461011f578063095ea7b3146101af57806318160ddd1461022257806323b872dd1461024d578063313ce567146102e057806340c10f191461030b578063661884631461037e57806370a08231146103f15780637d64bcb4146104565780638da5cb5b1461048557806395d89b41146104dc578063a9059cbb1461056c578063b78b52df146105df578063d73dd6231461063a578063dd62ed3e146106ad578063f2fde38b14610732575b600080fd5b3480156100fc57600080fd5b50610105610783565b604051808215151515815260200191505060405180910390f35b34801561012b57600080fd5b50610134610796565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610174578082015181840152602081019050610159565b50505050905090810190601f1680156101a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101bb57600080fd5b50610208600480360360408110156101d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610834565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b50610237610926565b6040518082815260200191505060405180910390f35b34801561025957600080fd5b506102c66004803603606081101561027057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092c565b604051808215151515815260200191505060405180910390f35b3480156102ec57600080fd5b506102f5610c18565b6040518082815260200191505060405180910390f35b34801561031757600080fd5b506103646004803603604081101561032e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c1e565b604051808215151515815260200191505060405180910390f35b34801561038a57600080fd5b506103d7600480360360408110156103a157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e06565b604051808215151515815260200191505060405180910390f35b3480156103fd57600080fd5b506104406004803603602081101561041457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611097565b6040518082815260200191505060405180910390f35b34801561046257600080fd5b5061046b6110e0565b604051808215151515815260200191505060405180910390f35b34801561049157600080fd5b5061049a61118c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e857600080fd5b506104f16111b2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610531578082015181840152602081019050610516565b50505050905090810190601f16801561055e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561057857600080fd5b506105c56004803603604081101561058f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611250565b604051808215151515815260200191505060405180910390f35b3480156105eb57600080fd5b506106386004803603604081101561060257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611426565b005b34801561064657600080fd5b506106936004803603604081101561065d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611435565b604051808215151515815260200191505060405180910390f35b3480156106b957600080fd5b5061071c600480360360408110156106d057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611631565b6040518082815260200191505060405180910390f35b34801561073e57600080fd5b506107816004803603602081101561075557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116b8565b005b600360149054906101000a900460ff1681565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561096957600080fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610a3c83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181090919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ad183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610b27838261181090919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b60065481565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c7c57600080fd5b600360149054906101000a900460ff16151515610c9857600080fd5b610cad8260005461182990919063ffffffff16565b600081905550610d0582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885836040518082815260200191505060405180910390a28273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610f17576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fab565b610f2a838261181090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561113e57600080fd5b6001600360146101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112485780601f1061121d57610100808354040283529160200191611248565b820191906000526020600020905b81548152906001019060200180831161122b57829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561128d57600080fd5b6112df82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461181090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b6114308282610c1e565b505050565b60006114c682600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561171457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561175057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600082821115151561181e57fe5b818303905092915050565b600080828401905083811015151561183d57fe5b809150509291505056fea165627a7a7230582031bbafb7d006f1a72fd4646b3a363a13b60e1c969e53986449a2ccdf7d7017860029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x5D2035B EQ PUSH2 0xF0 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2E0 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0xB78B52DF EQ PUSH2 0x5DF JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x63A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x6AD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x732 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x105 PUSH2 0x783 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x134 PUSH2 0x796 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x174 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x159 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1A1 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x208 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x834 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x237 PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x92C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F5 PUSH2 0xC18 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x364 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xC1E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x440 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1097 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x46B PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x49A PUSH2 0x118C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4F1 PUSH2 0x11B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x531 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x516 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x55E JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x638 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1426 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x646 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x693 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x65D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1435 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1631 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x16B8 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x82C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x801 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x82C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x80F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x969 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0xA3C DUP4 PUSH1 0x1 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xAD1 DUP4 PUSH1 0x1 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xB27 DUP4 DUP3 PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0xC7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO PUSH2 0xC98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCAD DUP3 PUSH1 0x0 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH2 0xD05 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xFAB JUMP JUMPDEST PUSH2 0xF2A DUP4 DUP3 PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x1248 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x121D JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1248 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x122B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x128D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12DF DUP3 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1810 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1374 DUP3 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1430 DUP3 DUP3 PUSH2 0xC1E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14C6 DUP3 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x1829 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x1714 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1750 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x181E JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x183D JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE 0xbb 0xaf 0xb7 0xd0 MOD CALL 0xa7 0x2f 0xd4 PUSH5 0x6B3A363A13 0xb6 0xe SHR SWAP7 SWAP15 MSTORE8 SWAP9 PUSH5 0x49A2CCDF7D PUSH17 0x1786002900000000000000000000000000 ",
              "sourceMap": "8035:233:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7073:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7073:35:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8077:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8077:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8077:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5209:206;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5209:206:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5209:206:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;898:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;898:26:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3971:583;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3971:583:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3971:583:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8145:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8145:28:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7448:300;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7448:300:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7448:300:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6462:468;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6462:468:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6462:468:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2492:115;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2492:115:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2492:115:2;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7878:150;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7878:150:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;51:28:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;51:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8110::2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8110:28:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8110:28:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1902:371;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1902:371:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1902:371:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8182:83;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8182:83:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8182:83:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6158:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6158:298:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6158:298:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;5754:144;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5754:144:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5754:144:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;656:200:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;656:200:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;656:200:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;7073:35:2;;;;;;;;;;;;;:::o;8077:26::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5209:206::-;5276:4;5325:6;5293:7;:19;5301:10;5293:19;;;;;;;;;;;;;;;:29;5313:8;5293:29;;;;;;;;;;;;;;;:38;;;;5368:8;5347:38;;5356:10;5347:38;;;5378:6;5347:38;;;;;;;;;;;;;;;;;;5403:4;5396:11;;5209:206;;;;:::o;898:26::-;;;;:::o;3971:583::-;4053:4;4093:1;4078:17;;:3;:17;;;;4070:26;;;;;;;;4107:18;4128:7;:14;4136:5;4128:14;;;;;;;;;;;;;;;:26;4143:10;4128:26;;;;;;;;;;;;;;;;4107:47;;4339:27;4359:6;4339:8;:15;4348:5;4339:15;;;;;;;;;;;;;;;;:19;;:27;;;;:::i;:::-;4321:8;:15;4330:5;4321:15;;;;;;;;;;;;;;;:45;;;;4393:25;4411:6;4393:8;:13;4402:3;4393:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;4377:8;:13;4386:3;4377:13;;;;;;;;;;;;;;;:41;;;;4458:22;4473:6;4458:10;:14;;:22;;;;:::i;:::-;4429:7;:14;4437:5;4429:14;;;;;;;;;;;;;;;:26;4444:10;4429:26;;;;;;;;;;;;;;;:51;;;;4512:3;4496:28;;4505:5;4496:28;;;4517:6;4496:28;;;;;;;;;;;;;;;;;;4542:4;4535:11;;;3971:583;;;;;:::o;8145:28::-;;;;:::o;7448:300::-;7526:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7154:15:2;;;;;;;;;;;7153:16;7145:25;;;;;;;;7557:24;7573:7;7557:11;;:15;;:24;;;;:::i;:::-;7543:11;:38;;;;7608:26;7626:7;7608:8;:13;7617:3;7608:13;;;;;;;;;;;;;;;;:17;;:26;;;;:::i;:::-;7592:8;:13;7601:3;7592:13;;;;;;;;;;;;;;;:42;;;;7655:3;7650:18;;;7660:7;7650:18;;;;;;;;;;;;;;;;;;7705:3;7684:34;;7701:1;7684:34;;;7710:7;7684:34;;;;;;;;;;;;;;;;;;7736:4;7729:11;;7448:300;;;;:::o;6462:468::-;6555:12;6580:13;6596:7;:19;6604:10;6596:19;;;;;;;;;;;;;;;:29;6616:8;6596:29;;;;;;;;;;;;;;;;6580:45;;6659:8;6640:16;:27;6636:188;;;6716:1;6684:7;:19;6692:10;6684:19;;;;;;;;;;;;;;;:29;6704:8;6684:29;;;;;;;;;;;;;;;:33;;;;6636:188;;;6782:30;6795:16;6782:8;:12;;:30;;;;:::i;:::-;6750:7;:19;6758:10;6750:19;;;;;;;;;;;;;;;:29;6770:8;6750:29;;;;;;;;;;;;;;;:62;;;;6636:188;6860:8;6839:61;;6848:10;6839:61;;;6870:7;:19;6878:10;6870:19;;;;;;;;;;;;;;;:29;6890:8;6870:29;;;;;;;;;;;;;;;;6839:61;;;;;;;;;;;;;;;;;;6918:4;6911:11;;;6462:468;;;;:::o;2492:115::-;2548:15;2583:8;:16;2592:6;2583:16;;;;;;;;;;;;;;;;2576:23;;2492:115;;;:::o;7878:150::-;7929:4;469:5:3;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;7964:4:2;7946:15;;:22;;;;;;;;;;;;;;;;;;7984:14;;;;;;;;;;8016:4;8009:11;;7878:150;:::o;51:28:3:-;;;;;;;;;;;;;:::o;8110::2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1902:371::-;1965:4;2005:1;1990:17;;:3;:17;;;;1982:26;;;;;;;;2110:32;2135:6;2110:8;:20;2119:10;2110:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;2087:8;:20;2096:10;2087:20;;;;;;;;;;;;;;;:55;;;;2169:25;2187:6;2169:8;:13;2178:3;2169:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;2153:8;:13;2162:3;2153:13;;;;;;;;;;;;;;;:41;;;;2231:3;2210:33;;2219:10;2210:33;;;2236:6;2210:33;;;;;;;;;;;;;;;;;;2261:4;2254:11;;1902:371;;;;:::o;8182:83::-;8242:15;8247:2;8250:6;8242:4;:15::i;:::-;;8182:83;;:::o;6158:298::-;6246:12;6303:46;6337:11;6303:7;:19;6311:10;6303:19;;;;;;;;;;;;;;;:29;6323:8;6303:29;;;;;;;;;;;;;;;;:33;;:46;;;;:::i;:::-;6271:7;:19;6279:10;6271:19;;;;;;;;;;;;;;;:29;6291:8;6271:29;;;;;;;;;;;;;;;:78;;;;6386:8;6365:61;;6374:10;6365:61;;;6396:7;:19;6404:10;6396:19;;;;;;;;;;;;;;;:29;6416:8;6396:29;;;;;;;;;;;;;;;;6365:61;;;;;;;;;;;;;;;;;;6444:4;6437:11;;6158:298;;;;:::o;5754:144::-;5828:17;5865:7;:15;5873:6;5865:15;;;;;;;;;;;;;;;:25;5881:8;5865:25;;;;;;;;;;;;;;;;5858:32;;5754:144;;;;:::o;656:200:3:-;469:5;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;765:1;745:22;;:8;:22;;;;737:31;;;;;;;;812:8;784:37;;805:5;;;;;;;;;;;784:37;;;;;;;;;;;;840:8;832:5;;:16;;;;;;;;;;;;;;;;;;656:200;:::o;588:123:2:-;646:7;678:1;673;:6;;666:14;;;;;;702:1;698;:5;691:12;;588:123;;;;:::o;717:147::-;775:7;795:9;811:1;807;:5;795:17;;835:1;830;:6;;823:14;;;;;;855:1;848:8;;;717:147;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1251800",
                "executionCost": "infinite",
                "totalCost": "infinite"
              },
              "external": {
                "allocate(address,uint256)": "infinite",
                "allowance(address,address)": "1034",
                "approve(address,uint256)": "22395",
                "balanceOf(address)": "755",
                "decimals()": "498",
                "decreaseApproval(address,uint256)": "infinite",
                "finishMinting()": "21776",
                "increaseApproval(address,uint256)": "infinite",
                "mint(address,uint256)": "infinite",
                "mintingFinished()": "486",
                "name()": "infinite",
                "owner()": "656",
                "symbol()": "infinite",
                "totalSupply()": "454",
                "transfer(address,uint256)": "infinite",
                "transferFrom(address,address,uint256)": "infinite",
                "transferOwnership(address)": "22937"
              }
            },
            "methodIdentifiers": {
              "allocate(address,uint256)": "b78b52df",
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "decreaseApproval(address,uint256)": "66188463",
              "finishMinting()": "7d64bcb4",
              "increaseApproval(address,uint256)": "d73dd623",
              "mint(address,uint256)": "40c10f19",
              "mintingFinished()": "05d2035b",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\\r\",\"params\":{\"_owner\":\"address The address which owns the funds.\\r\",\"_spender\":\"address The address which will spend the funds.\\r\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\\r\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r      * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\",\"params\":{\"_spender\":\"The address which will spend the funds.\\r\",\"_value\":\"The amount of tokens to be spent.\\r\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\\r\",\"params\":{\"_owner\":\"The address to query the the balance of.\\r\"},\"return\":\"An uint256 representing the amount owned by the passed address.\\r\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\\r\",\"return\":\"True if the operation was successful.\\r\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\\r\",\"params\":{\"_amount\":\"The amount of tokens to mint.\\r\",\"_to\":\"The address that will receive the minted tokens.\\r\"},\"return\":\"A boolean that indicates if the operation was successful.\\r\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\\r\",\"params\":{\"_from\":\"address The address which you want to send tokens from\\r\",\"_to\":\"address The address which you want to transfer to\\r\",\"_value\":\"uint256 the amount of tokens to be transferred\\r\"}},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"increaseApproval(address,uint256)\":{\"notice\":\"approve should be called when allowed[_spender] == 0. To increment\\r allowed value is better to use this function to avoid 2 calls (and wait until\\r the first transaction is mined)\\r From MonolithDAO Token.sol\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ZapToken.sol\":\"ZapToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ZapToken.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\n// import \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./libraries/Ownable.sol\\\";\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a * b;\\r\\n        assert(a == 0 || c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint256 public totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender) public view returns (uint256);\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n    mapping(address => uint256) balances;\\r\\n    /**\\r\\n    * @dev transfer token for a specified address\\r\\n    * @param _to The address to transfer to.\\r\\n    * @param _value The amount to be transferred.\\r\\n    */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        // SafeMath.sub will throw if there is not enough balance.\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n    * @dev Gets the balance of the specified address.\\r\\n    * @param _owner The address to query the the balance of.\\r\\n    * @return An uint256 representing the amount owned by the passed address.\\r\\n    */\\r\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\\r\\n// contract Ownable {\\r\\n//     address public owner;\\r\\n//     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n//     /**\\r\\n//      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n//      * account.\\r\\n//      */\\r\\n//     constructor() public {\\r\\n//         owner = msg.sender;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Throws if called by any account other than the owner.\\r\\n//      */\\r\\n//     modifier onlyOwner() {\\r\\n//         require(msg.sender == owner);\\r\\n//         _;\\r\\n//     }\\r\\n//     /**\\r\\n//      * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n//      * @param newOwner The address to transfer ownership to.\\r\\n//      */\\r\\n//     function transferOwnership(address newOwner) onlyOwner public {\\r\\n//         require(newOwner != address(0));\\r\\n//         emit OwnershipTransferred(owner, newOwner);\\r\\n//         owner = newOwner;\\r\\n//     }\\r\\n// }\\r\\n\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping (address => mapping (address => uint256)) allowed;\\r\\n    /**\\r\\n     * @dev Transfer tokens from one address to another\\r\\n     * @param _from address The address which you want to send tokens from\\r\\n     * @param _to address The address which you want to transfer to\\r\\n     * @param _value uint256 the amount of tokens to be transferred\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        uint256 _allowance = allowed[_from][msg.sender];\\r\\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\\r\\n        // require (_value <= _allowance);\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = _allowance.sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender The address which will spend the funds.\\r\\n     * @param _value The amount of tokens to be spent.\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n     * @param _owner address The address which owns the funds.\\r\\n     * @param _spender address The address which will spend the funds.\\r\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n     */\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    /**\\r\\n     * approve should be called when allowed[_spender] == 0. To increment\\r\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n     * the first transaction is mined)\\r\\n     * From MonolithDAO Token.sol\\r\\n     */\\r\\n    function increaseApproval (address _spender, uint _addedValue) public\\r\\n        returns (bool success) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseApproval (address _spender, uint _subtractedValue) public\\r\\n        returns (bool success) {\\r\\n        uint oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue > oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract MintableToken is StandardToken, Ownable {\\r\\n    event Mint(address indexed to, uint256 amount);\\r\\n    event MintFinished();\\r\\n    bool public mintingFinished = false;\\r\\n    modifier canMint() {\\r\\n        require(!mintingFinished);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to mint tokens\\r\\n     * @param _to The address that will receive the minted tokens.\\r\\n     * @param _amount The amount of tokens to mint.\\r\\n     * @return A boolean that indicates if the operation was successful.\\r\\n     */\\r\\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\\r\\n        totalSupply = totalSupply.add(_amount);\\r\\n        balances[_to] = balances[_to].add(_amount);\\r\\n        emit Mint(_to, _amount);\\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function to stop minting new tokens.\\r\\n     * @return True if the operation was successful.\\r\\n     */\\r\\n    function finishMinting() onlyOwner public returns (bool) {\\r\\n        mintingFinished = true;\\r\\n        emit MintFinished();\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ZapToken is MintableToken {\\r\\n    string public name = \\\"Zap\\\";\\r\\n    string public symbol = \\\"ZAP\\\";\\r\\n    uint256 public decimals = 18;\\r\\n\\r\\n    function allocate(address to, uint amount) public{\\r\\n        mint(to,amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8337087c64c2accded96d21205ae73fabe208d01f6286cb07938dcb5116dbdb0\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {
              "increaseApproval(address,uint256)": {
                "notice": "approve should be called when allowed[_spender] == 0. To increment\r allowed value is better to use this function to avoid 2 calls (and wait until\r the first transaction is mined)\r From MonolithDAO Token.sol\r"
              }
            }
          }
        }
      },
      "contracts/libraries/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "constant": true,
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "name": "",
                  "type": "address"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            }
          ],
          "devdoc": {
            "methods": {
              "constructor": {
                "details": "The Ownable constructor sets the original `owner` of the contract to the sender account."
              },
              "transferOwnership(address)": {
                "params": {
                  "newOwner": "The address to transfer ownership to."
                }
              }
            }
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610299806100606000396000f3fe608060405260043610610046576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b1461004b578063f2fde38b146100a2575b600080fd5b34801561005757600080fd5b506100606100f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ae57600080fd5b506100f1600480360360208110156100c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610118565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561017357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156101af57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820bbdc20998b7bfd5c7f8f3673ba0978b5bd2939558a42e3b45e4b6b478e8589130029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x299 DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60 PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x118 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xbb 0xdc KECCAK256 SWAP10 DUP12 PUSH28 0xFD5C7F8F3673BA0978B5BD2939558A42E3B45E4B6B478E8589130029 ",
              "sourceMap": "27:832:3:-;;;280:44;8:9:-1;5:2;;;30:1;27;20:12;5:2;280:44:3;311:10;303:5;;:18;;;;;;;;;;;;;;;;;;27:832;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405260043610610046576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b1461004b578063f2fde38b146100a2575b600080fd5b34801561005757600080fd5b506100606100f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100ae57600080fd5b506100f1600480360360208110156100c557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610118565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561017357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156101af57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fea165627a7a72305820bbdc20998b7bfd5c7f8f3673ba0978b5bd2939558a42e3b45e4b6b478e8589130029",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xA2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60 PUSH2 0xF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x118 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xbb 0xdc KECCAK256 SWAP10 DUP12 PUSH28 0xFD5C7F8F3673BA0978B5BD2939558A42E3B45E4B6B478E8589130029 ",
              "sourceMap": "27:832:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;51:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;51:28:3;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;656:200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;656:200:3;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;656:200:3;;;;;;;;;;;;;;;;;;;:::i;:::-;;51:28;;;;;;;;;;;;;:::o;656:200::-;469:5;;;;;;;;;;;455:19;;:10;:19;;;447:28;;;;;;;;765:1;745:22;;:8;:22;;;;737:31;;;;;;;;812:8;784:37;;805:5;;;;;;;;;;;784:37;;;;;;;;;;;;840:8;832:5;;:16;;;;;;;;;;;;;;;;;;656:200;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "133000",
                "executionCost": "20443",
                "totalCost": "153443"
              },
              "external": {
                "owner()": "436",
                "transferOwnership(address)": "22607"
              }
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"details\":\"The Ownable constructor sets the original `owner` of the contract to the sender account.\"},\"transferOwnership(address)\":{\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.5.1;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);\\r\\n\\r\\n    /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\\r\\n    constructor() public { owner = msg.sender; }\\r\\n\\r\\n    /// @dev Throws if called by any contract other than latest designated caller\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n    /// @param newOwner The address to transfer ownership to.\\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x57de2c9816f88b17e20c5ef3741d46f49f8909c139955fec16ed48e6bb25a802\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/SafeMathM.sol": {
        "SafeMathM": {
          "abi": [],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582099ade311978b15155c86100018710941a7abff3219327d90e509da31818a3ebc0029",
              "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SWAP10 0xad 0xe3 GT SWAP8 DUP12 ISZERO ISZERO 0x5c DUP7 LT STOP XOR PUSH18 0x941A7ABFF3219327D90E509DA31818A3EBC STOP 0x29 ",
              "sourceMap": "126:722:4:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582099ade311978b15155c86100018710941a7abff3219327d90e509da31818a3ebc0029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SWAP10 0xad 0xe3 GT SWAP8 DUP12 ISZERO ISZERO 0x5c DUP7 LT STOP XOR PUSH18 0x941A7ABFF3219327D90E509DA31818A3EBC STOP 0x29 ",
              "sourceMap": "126:722:4:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15200",
                "executionCost": "116",
                "totalCost": "15316"
              },
              "internal": {
                "add(uint256,uint256)": "infinite",
                "max(int256,int256)": "infinite",
                "max(uint256,uint256)": "infinite",
                "min(uint256,uint256)": "infinite",
                "mul(uint256,uint256)": "infinite",
                "sub(uint256,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/SafeMathM.sol\":\"SafeMathM\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/Utilities.sol": {
        "Utilities": {
          "abi": [],
          "devdoc": {
            "methods": {}
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582012cbe54a883c7b2688773a6ce5d1419eea4982250b6cc9f58e803bc3f30e815c0029",
              "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SLT 0xcb 0xe5 0x4a DUP9 EXTCODECOPY PUSH28 0x2688773A6CE5D1419EEA4982250B6CC9F58E803BC3F30E815C002900 ",
              "sourceMap": "220:1306:5:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582012cbe54a883c7b2688773a6ce5d1419eea4982250b6cc9f58e803bc3f30e815c0029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SLT 0xcb 0xe5 0x4a DUP9 EXTCODECOPY PUSH28 0x2688773A6CE5D1419EEA4982250B6CC9F58E803BC3F30E815C002900 ",
              "sourceMap": "220:1306:5:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15200",
                "executionCost": "116",
                "totalCost": "15316"
              },
              "internal": {
                "getMax(uint256[51] memory)": "infinite",
                "getMin(uint256[51] memory)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Utilities.sol\":\"Utilities\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/Utilities.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Functions for retrieving min and Max in 51 length array (requestQ)\\n//Taken partly from: https://github.com/modular-network/ethereum-libraries-array-utils/blob/master/contracts/Array256Lib.sol\\n\\nlibrary Utilities{\\n\\n  /// @dev Returns the minimum value and position in an array.\\n  //@note IT IGNORES THE 0 INDEX\\n    function getMin(uint[51] memory arr) internal pure returns (uint256 min, uint256 minIndex) {\\n      assembly {\\n          minIndex := 50\\n          min := mload(add(arr, mul(minIndex , 0x20)))\\n          for {let i := 49 } gt(i,0) { i := sub(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(item,min){\\n                  min := item\\n                  minIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  // function getMin(uint[51] memory data) internal pure returns(uint256 minimal,uint minIndex) {\\n  //       minIndex = data.length - 1;\\n  //       minimal = data[minIndex];\\n  //       for(uint i = data.length-1;i > 0;i--) {\\n  //           if(data[i] < minimal) {\\n  //               minimal = data[i];\\n  //               minIndex = i;\\n  //           }\\n  //       }\\n  // }\\n  \\n  function getMax(uint256[51] memory arr) internal pure returns (uint256 max, uint256 maxIndex) {\\n      assembly {\\n          for { let i := 0 } lt(i,51) { i := add(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(max, item) {\\n                  max := item\\n                  maxIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  }\\n\",\"keccak256\":\"0x5194385f0138f2f8a8e91f322115e8a32e7ef14c6510a5f39d5a4618dd2aefc3\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/ZapDispute.sol": {
        "ZapDispute": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_disputeId",
                  "type": "uint256"
                }
              ],
              "name": "tallyVotes",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "name": "_timestamp",
                  "type": "uint256"
                },
                {
                  "name": "_minerIndex",
                  "type": "uint256"
                }
              ],
              "name": "beginDispute",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_propNewZapAddress",
                  "type": "address"
                }
              ],
              "name": "proposeFork",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                }
              ],
              "name": "updateDisputeFee",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "name": "_supportsDispute",
                  "type": "bool"
                }
              ],
              "name": "vote",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_disputeId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "name": "_requestId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "name": "_timestamp",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "name": "_miner",
                  "type": "address"
                }
              ],
              "name": "NewDispute",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_disputeID",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "name": "_position",
                  "type": "bool"
                },
                {
                  "indexed": true,
                  "name": "_voter",
                  "type": "address"
                }
              ],
              "name": "Voted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_disputeID",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "name": "_result",
                  "type": "int256"
                },
                {
                  "indexed": true,
                  "name": "_reportedMiner",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "_reportingParty",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "_active",
                  "type": "bool"
                }
              ],
              "name": "DisputeVoteTallied",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "name": "_newZap",
                  "type": "address"
                }
              ],
              "name": "NewZapAddress",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "Contais the methods related to disputes. Zap.sol references this library for function's logic.",
            "methods": {
              "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)": {
                "details": "Helps initialize a dispute by assigning it a disputeId when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the invalidated value information to POS voting",
                "params": {
                  "_minerIndex": "the index of the miner that submitted the value being disputed. Since each official value requires 5 miners to submit a value.",
                  "_requestId": "being disputed",
                  "_timestamp": "being disputed"
                }
              },
              "proposeFork(ZapStorage.ZapStorageStruct storage,address)": {
                "details": "Allows for a fork to be proposed",
                "params": {
                  "_propNewZapAddress": "address for new proposed Zap"
                }
              },
              "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)": {
                "details": "tallies the votes.",
                "params": {
                  "_disputeId": "is the dispute id"
                }
              },
              "updateDisputeFee(ZapStorage.ZapStorageStruct storage)": {
                "details": "this function allows the dispute fee to fluctuate based on the number of miners on the system. The floor for the fee is 15e18."
              },
              "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)": {
                "details": "Allows token holders to vote",
                "params": {
                  "_disputeId": "is the dispute id",
                  "_supportsDispute": "is the vote (true=the dispute has basis false = vote against dispute)"
                }
              }
            },
            "title": "Zap Dispute"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 1101
                    },
                    {
                      "length": 20,
                      "start": 1490
                    },
                    {
                      "length": 20,
                      "start": 2110
                    },
                    {
                      "length": 20,
                      "start": 3853
                    },
                    {
                      "length": 20,
                      "start": 6134
                    },
                    {
                      "length": 20,
                      "start": 8180
                    }
                  ]
                }
              },
              "object": "6123bc610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061007e576000357c0100000000000000000000000000000000000000000000000000000000900480633cedafe51461008357806360dd6c35146100c8578063804b8931146101215780639264b8881461017c578063bcc7a8a8146101b7575b600080fd5b81801561008f57600080fd5b506100c6600480360360408110156100a657600080fd5b810190808035906020019092919080359060200190929190505050610208565b005b8180156100d457600080fd5b5061011f600480360360808110156100eb57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610d86565b005b81801561012d57600080fd5b5061017a6004803603604081101561014457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173a565b005b81801561018857600080fd5b506101b56004803603602081101561019f57600080fd5b8101908080359060200190929190505050611d2a565b005b8180156101c357600080fd5b50610206600480360360608110156101da57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050611fa7565b005b60008260440160008381526020019081526020016000209050600083604801600083600501600060405180807f72657175657374496400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000205481526020019081526020016000209050600015158260020160009054906101000a900460ff1615151415156102a857600080fd5b81600501600060405180807f6d696e457865637574696f6e4461746500000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020544211151561030057600080fd5b600015158260020160029054906101000a900460ff1615151415610a665760008460470160008460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600083600101541315610802576000816000018190555062015180428115156103ac57fe5b064203816001018190555084604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020600081548092919060019003919050555061041b85611d2a565b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d03868560020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561058857600080fd5b505af415801561059c573d6000803e3d6000fd5b5050505073__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0386308660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b1580156106e957600080fd5b505af41580156106fd573d6000803e3d6000fd5b5050505060018360020160016101000a81548160ff0219169083151502179055506001151582600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060009054906101000a900460ff16151514156107fd57600082600601600085600501600060405180807f74696d657374616d700000000000000000000000000000000000000000000000815250600901905060405180910390208152602001908152602001600020548152602001908152602001600020819055505b610a60565b6001816000018190555073__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0386308660020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561095557600080fd5b505af4158015610969573d6000803e3d6000fd5b505050506001151582600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060009054906101000a900460ff1615151415610a5f57600082600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b50610c77565b600082600101541315610c76576064601485604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205402811515610acc57fe5b0482600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054111515610b2457600080fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684603f01600060405180807f7a6170436f6e7472616374000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260020160016101000a81548160ff0219169083151502179055507f4a9a276906262ed9ed5e1fd15850a5f2b951b97198cc2fc0d32625f1bf3ab2708260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15b5b60018260020160006101000a81548160ff0219169083151502179055508160020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16837f21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e1043473984600101548560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160019054906101000a900460ff16604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a350505050565b60008460480160008581526020019081526020016000209050609081600501600085815260200190815260200160002054430311151515610dc657600080fd5b600081600501600085815260200190815260200160002054111515610dea57600080fd5b600582101515610df957600080fd5b600081600801600085815260200190815260200160002083600581101515610e1d57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000818686604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018281526020019350505050604051602081830303815290604052805190602001209050600087604a01600083815260200190815260200160002054141515610edb57600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d038833308b604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561100057600080fd5b505af4158015611014573d6000803e3d6000fd5b50505050600187604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020540187604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002081905550600087604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205490508088604a0160008481526020019081526020016000208190555061010060405190810160405280838152602001600081526020016000151581526020016000151581526020016000151581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250886044016000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505086886044016000838152602001908152602001600020600501600060405180807f72657175657374496400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000208190555085886044016000838152602001908152602001600020600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002081905550836009016000878152602001908152602001600020856005811015156113ee57fe5b0154886044016000838152602001908152602001600020600501600060405180807f76616c75650000000000000000000000000000000000000000000000000000008152506005019050604051809103902081526020019081526020016000208190555062093a804201886044016000838152602001908152602001600020600501600060405180807f6d696e457865637574696f6e44617465000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000208190555043886044016000838152602001908152602001600020600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000208190555084886044016000838152602001908152602001600020600501600060405180807f6d696e6572536c6f7400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000208190555087604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002054886044016000838152602001908152602001600020600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020819055506002851415611679576001886048016000898152602001908152602001600020600701600088815260200190815260200160002060006101000a81548160ff0219169083151502179055505b60038860470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555086817feceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da648886604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a35050505050505050565b600081604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050600083604a016000838152602001908152602001600020541415156117c457600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0384333087604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b1580156118e957600080fd5b505af41580156118fd573d6000803e3d6000fd5b5050505082604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002060008154809291906001019190505550600083604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205490508084604a0160008481526020019081526020016000208190555061010060405190810160405280838152602001600081526020016000151581526020016000151581526020016001151581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250846044016000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505043846044016000838152602001908152602001600020600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000208190555083604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002054846044016000838152602001908152602001600020600501600060405180807f66656500000000000000000000000000000000000000000000000000000000008152506003019050604051809103902081526020019081526020016000208190555062093a804201846044016000838152602001908152602001600020600501600060405180807f6d696e457865637574696f6e44617465000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000208190555050505050565b6103e881604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020546103e883604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205402811515611dd057fe5b041015611f4c57611ef967d02ab486cedc00006103e8611eea84604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020546103e886604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205402811515611e8c57fe5b046103e80385604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205461234490919063ffffffff16565b811515611ef357fe5b04612377565b81604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002081905550611fa4565b67d02ab486cedc000081604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020819055505b50565b60008360440160008481526020019081526020016000209050600073__$946cc509dcf4b4c97ecabc42418c409021$__63c6f7efe0863385600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156120b357600080fd5b505af41580156120c7573d6000803e3d6000fd5b505050506040513d60208110156120dd57600080fd5b81019080805190602001909291905050509050600115158260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415151561215257600080fd5b60008111151561216157600080fd5b60038560470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515156121b557600080fd5b60018260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600182600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d01905060405180910390208152602001908152602001600020600082825401925050819055508082600501600060405180807f71756f72756d00000000000000000000000000000000000000000000000000008152506006019050604051809103902081526020019081526020016000206000828254019250508190555082156122da578082600101540182600101819055506122ea565b8082600101540382600101819055505b3373ffffffffffffffffffffffffffffffffffffffff16847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae085604051808215151515815260200191505060405180910390a35050505050565b60008082840290506000841480612365575082848281151561236257fe5b04145b151561236d57fe5b8091505092915050565b60008183116123865781612388565b825b90509291505056fea165627a7a72305820d740aff49b76709d4b3c3fbf0db6771a200ee21fd2f64ece535d1a8e17de03460029",
              "opcodes": "PUSH2 0x23BC PUSH2 0x30 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH2 0x20 JUMPI PUSH2 0x22 JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7E JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x3CEDAFE5 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x60DD6C35 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x804B8931 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x9264B888 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xBCC7A8A8 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x208 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD86 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x173A JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D2A JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x206 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FA7 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP4 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 ISZERO ISZERO DUP3 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD TIMESTAMP GT ISZERO ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO DUP3 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP5 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 ADD SLOAD SGT ISZERO PUSH2 0x802 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0x3AC JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP PUSH2 0x41B DUP6 PUSH2 0x1D2A JUMP JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 DUP6 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x59C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 ADDRESS DUP7 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x7FD JUMPI PUSH1 0x0 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 ADDRESS DUP7 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x969 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xA5F JUMPI PUSH1 0x0 DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD SLOAD SGT ISZERO PUSH2 0xC76 JUMPI PUSH1 0x64 PUSH1 0x14 DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0xACC JUMPI INVALID JUMPDEST DIV DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO ISZERO PUSH2 0xB24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x3F ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7A6170436F6E7472616374000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x4A9A276906262ED9ED5E1FD15850A5F2B951B97198CC2FC0D32625F1BF3AB270 DUP3 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x21459C2F5447EBCF83A7F0A238C32C71076FAEF0D12295E771C0CB1E10434739 DUP5 PUSH1 0x1 ADD SLOAD DUP6 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x48 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x90 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD NUMBER SUB GT ISZERO ISZERO ISZERO PUSH2 0xDC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO ISZERO PUSH2 0xDEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 DUP3 LT ISZERO ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x8 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x5 DUP2 LT ISZERO ISZERO PUSH2 0xE1D JUMPI INVALID JUMPDEST ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP9 CALLER ADDRESS DUP12 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1000 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD ADD DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP9 PUSH1 0x4A ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x9 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x5 DUP2 LT ISZERO ISZERO PUSH2 0x13EE JUMPI INVALID JUMPDEST ADD SLOAD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x76616C7565000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH3 0x93A80 TIMESTAMP ADD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP NUMBER DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E6572536C6F740000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP6 EQ ISZERO PUSH2 0x1679 JUMPI PUSH1 0x1 DUP9 PUSH1 0x48 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP9 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP7 DUP2 PUSH32 0xECEEC1AEBF67772B2440120C4B4DC913A1FE1B865509219F9456785C23B9DA64 DUP9 DUP7 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0x17C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP5 CALLER ADDRESS DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x18FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x4A ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP NUMBER DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH3 0x93A80 TIMESTAMP ADD DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3E8 DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1DD0 JUMPI INVALID JUMPDEST DIV LT ISZERO PUSH2 0x1F4C JUMPI PUSH2 0x1EF9 PUSH8 0xD02AB486CEDC0000 PUSH2 0x3E8 PUSH2 0x1EEA DUP5 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3E8 DUP7 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1E8C JUMPI INVALID JUMPDEST DIV PUSH2 0x3E8 SUB DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2344 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x1EF3 JUMPI INVALID JUMPDEST DIV PUSH2 0x2377 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1FA4 JUMP JUMPDEST PUSH8 0xD02AB486CEDC0000 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xC6F7EFE0 DUP7 CALLER DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x20C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x6 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO ISZERO ISZERO PUSH2 0x2152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT ISZERO ISZERO PUSH2 0x2161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO ISZERO PUSH2 0x21B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x6 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6E756D6265724F66566F74657300000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xD ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 ISZERO PUSH2 0x22DA JUMPI DUP1 DUP3 PUSH1 0x1 ADD SLOAD ADD DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x22EA JUMP JUMPDEST DUP1 DUP3 PUSH1 0x1 ADD SLOAD SUB DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x86ABFCE99B7DD908BEC0169288797F85049EC73CBE046ED9DE818FAB3A497AE0 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 0x0 DUP5 EQ DUP1 PUSH2 0x2365 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2362 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x236D JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x2386 JUMPI DUP2 PUSH2 0x2388 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd7 BLOCKHASH 0xaf DELEGATECALL SWAP12 PUSH23 0x709D4B3C3FBF0DB6771A200EE21FD2F64ECE535D1A8E17 0xde SUB 0x46 STOP 0x29 ",
              "sourceMap": "213:12261:6:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 1053
                    },
                    {
                      "length": 20,
                      "start": 1442
                    },
                    {
                      "length": 20,
                      "start": 2062
                    },
                    {
                      "length": 20,
                      "start": 3805
                    },
                    {
                      "length": 20,
                      "start": 6086
                    },
                    {
                      "length": 20,
                      "start": 8132
                    }
                  ]
                }
              },
              "object": "730000000000000000000000000000000000000000301460806040526004361061007e576000357c0100000000000000000000000000000000000000000000000000000000900480633cedafe51461008357806360dd6c35146100c8578063804b8931146101215780639264b8881461017c578063bcc7a8a8146101b7575b600080fd5b81801561008f57600080fd5b506100c6600480360360408110156100a657600080fd5b810190808035906020019092919080359060200190929190505050610208565b005b8180156100d457600080fd5b5061011f600480360360808110156100eb57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610d86565b005b81801561012d57600080fd5b5061017a6004803603604081101561014457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061173a565b005b81801561018857600080fd5b506101b56004803603602081101561019f57600080fd5b8101908080359060200190929190505050611d2a565b005b8180156101c357600080fd5b50610206600480360360608110156101da57600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050611fa7565b005b60008260440160008381526020019081526020016000209050600083604801600083600501600060405180807f72657175657374496400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000205481526020019081526020016000209050600015158260020160009054906101000a900460ff1615151415156102a857600080fd5b81600501600060405180807f6d696e457865637574696f6e4461746500000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020544211151561030057600080fd5b600015158260020160029054906101000a900460ff1615151415610a665760008460470160008460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600083600101541315610802576000816000018190555062015180428115156103ac57fe5b064203816001018190555084604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020600081548092919060019003919050555061041b85611d2a565b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d03868560020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561058857600080fd5b505af415801561059c573d6000803e3d6000fd5b5050505073__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0386308660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b1580156106e957600080fd5b505af41580156106fd573d6000803e3d6000fd5b5050505060018360020160016101000a81548160ff0219169083151502179055506001151582600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060009054906101000a900460ff16151514156107fd57600082600601600085600501600060405180807f74696d657374616d700000000000000000000000000000000000000000000000815250600901905060405180910390208152602001908152602001600020548152602001908152602001600020819055505b610a60565b6001816000018190555073__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0386308660020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561095557600080fd5b505af4158015610969573d6000803e3d6000fd5b505050506001151582600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060009054906101000a900460ff1615151415610a5f57600082600701600085600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200190815260200160002060006101000a81548160ff0219169083151502179055505b5b50610c77565b600082600101541315610c76576064601485604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205402811515610acc57fe5b0482600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054111515610b2457600080fd5b8160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684603f01600060405180807f7a6170436f6e7472616374000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260020160016101000a81548160ff0219169083151502179055507f4a9a276906262ed9ed5e1fd15850a5f2b951b97198cc2fc0d32625f1bf3ab2708260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15b5b60018260020160006101000a81548160ff0219169083151502179055508160020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16837f21459c2f5447ebcf83a7f0a238c32c71076faef0d12295e771c0cb1e1043473984600101548560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020160019054906101000a900460ff16604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182151515158152602001935050505060405180910390a350505050565b60008460480160008581526020019081526020016000209050609081600501600085815260200190815260200160002054430311151515610dc657600080fd5b600081600501600085815260200190815260200160002054111515610dea57600080fd5b600582101515610df957600080fd5b600081600801600085815260200190815260200160002083600581101515610e1d57fe5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000818686604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018381526020018281526020019350505050604051602081830303815290604052805190602001209050600087604a01600083815260200190815260200160002054141515610edb57600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d038833308b604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b15801561100057600080fd5b505af4158015611014573d6000803e3d6000fd5b50505050600187604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020540187604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002081905550600087604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205490508088604a0160008481526020019081526020016000208190555061010060405190810160405280838152602001600081526020016000151581526020016000151581526020016000151581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815250886044016000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505086886044016000838152602001908152602001600020600501600060405180807f72657175657374496400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000208190555085886044016000838152602001908152602001600020600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002081905550836009016000878152602001908152602001600020856005811015156113ee57fe5b0154886044016000838152602001908152602001600020600501600060405180807f76616c75650000000000000000000000000000000000000000000000000000008152506005019050604051809103902081526020019081526020016000208190555062093a804201886044016000838152602001908152602001600020600501600060405180807f6d696e457865637574696f6e44617465000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000208190555043886044016000838152602001908152602001600020600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000208190555084886044016000838152602001908152602001600020600501600060405180807f6d696e6572536c6f7400000000000000000000000000000000000000000000008152506009019050604051809103902081526020019081526020016000208190555087604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002054886044016000838152602001908152602001600020600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020819055506002851415611679576001886048016000898152602001908152602001600020600701600088815260200190815260200160002060006101000a81548160ff0219169083151502179055505b60038860470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555086817feceec1aebf67772b2440120c4b4dc913a1fe1b865509219f9456785c23b9da648886604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a35050505050505050565b600081604051602001808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051602081830303815290604052805190602001209050600083604a016000838152602001908152602001600020541415156117c457600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__63a93a4d0384333087604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020546040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060006040518083038186803b1580156118e957600080fd5b505af41580156118fd573d6000803e3d6000fd5b5050505082604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002060008154809291906001019190505550600083604001600060405180807f64697370757465436f756e740000000000000000000000000000000000000000815250600c019050604051809103902081526020019081526020016000205490508084604a0160008481526020019081526020016000208190555061010060405190810160405280838152602001600081526020016000151581526020016000151581526020016001151581526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250846044016000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505043846044016000838152602001908152602001600020600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000208190555083604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002054846044016000838152602001908152602001600020600501600060405180807f66656500000000000000000000000000000000000000000000000000000000008152506003019050604051809103902081526020019081526020016000208190555062093a804201846044016000838152602001908152602001600020600501600060405180807f6d696e457865637574696f6e44617465000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000208190555050505050565b6103e881604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020546103e883604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205402811515611dd057fe5b041015611f4c57611ef967d02ab486cedc00006103e8611eea84604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020546103e886604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205402811515611e8c57fe5b046103e80385604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205461234490919063ffffffff16565b811515611ef357fe5b04612377565b81604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a0190506040518091039020815260200190815260200160002081905550611fa4565b67d02ab486cedc000081604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020819055505b50565b60008360440160008481526020019081526020016000209050600073__$946cc509dcf4b4c97ecabc42418c409021$__63c6f7efe0863385600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020546040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156120b357600080fd5b505af41580156120c7573d6000803e3d6000fd5b505050506040513d60208110156120dd57600080fd5b81019080805190602001909291905050509050600115158260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415151561215257600080fd5b60008111151561216157600080fd5b60038560470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515156121b557600080fd5b60018260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600182600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d01905060405180910390208152602001908152602001600020600082825401925050819055508082600501600060405180807f71756f72756d00000000000000000000000000000000000000000000000000008152506006019050604051809103902081526020019081526020016000206000828254019250508190555082156122da578082600101540182600101819055506122ea565b8082600101540382600101819055505b3373ffffffffffffffffffffffffffffffffffffffff16847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae085604051808215151515815260200191505060405180910390a35050505050565b60008082840290506000841480612365575082848281151561236257fe5b04145b151561236d57fe5b8091505092915050565b60008183116123865781612388565b825b90509291505056fea165627a7a72305820d740aff49b76709d4b3c3fbf0db6771a200ee21fd2f64ece535d1a8e17de03460029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7E JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x3CEDAFE5 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x60DD6C35 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x804B8931 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x9264B888 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xBCC7A8A8 EQ PUSH2 0x1B7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x208 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0xEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD86 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x173A JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1D2A JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x206 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1FA7 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x48 ADD PUSH1 0x0 DUP4 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 ISZERO ISZERO DUP3 PUSH1 0x2 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 0x2A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD TIMESTAMP GT ISZERO ISZERO PUSH2 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 ISZERO ISZERO DUP3 PUSH1 0x2 ADD PUSH1 0x2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP5 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 ADD SLOAD SGT ISZERO PUSH2 0x802 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0x3AC JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 SUB SWAP2 SWAP1 POP SSTORE POP PUSH2 0x41B DUP6 PUSH2 0x1D2A JUMP JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 DUP6 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x588 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x59C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 ADDRESS DUP7 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x6FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP4 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0x7FD JUMPI PUSH1 0x0 DUP3 PUSH1 0x6 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 0xA60 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0xA93A4D03 DUP7 ADDRESS DUP7 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x969 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xA5F JUMPI PUSH1 0x0 DUP3 PUSH1 0x7 ADD PUSH1 0x0 DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 ADD SLOAD SGT ISZERO PUSH2 0xC76 JUMPI PUSH1 0x64 PUSH1 0x14 DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0xACC JUMPI INVALID JUMPDEST DIV DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO ISZERO PUSH2 0xB24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x3F ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7A6170436F6E7472616374000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x4A9A276906262ED9ED5E1FD15850A5F2B951B97198CC2FC0D32625F1BF3AB270 DUP3 PUSH1 0x4 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x2 ADD PUSH1 0x3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH32 0x21459C2F5447EBCF83A7F0A238C32C71076FAEF0D12295E771C0CB1E10434739 DUP5 PUSH1 0x1 ADD SLOAD DUP6 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x2 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x48 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x90 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD NUMBER SUB GT ISZERO ISZERO ISZERO PUSH2 0xDC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO ISZERO PUSH2 0xDEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 DUP3 LT ISZERO ISZERO PUSH2 0xDF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x8 ADD PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH1 0x5 DUP2 LT ISZERO ISZERO PUSH2 0xE1D JUMPI INVALID JUMPDEST ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 DUP2 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP9 CALLER ADDRESS DUP12 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1000 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD ADD DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP9 PUSH1 0x4A ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP7 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7265717565737449640000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP6 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D657374616D700000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x9 ADD PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x5 DUP2 LT ISZERO ISZERO PUSH2 0x13EE JUMPI INVALID JUMPDEST ADD SLOAD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x76616C7565000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x5 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH3 0x93A80 TIMESTAMP ADD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP NUMBER DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP5 DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E6572536C6F740000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x9 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP9 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP6 EQ ISZERO PUSH2 0x1679 JUMPI PUSH1 0x1 DUP9 PUSH1 0x48 ADD PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x7 ADD PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x3 DUP9 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP DUP7 DUP2 PUSH32 0xECEEC1AEBF67772B2440120C4B4DC913A1FE1B865509219F9456785C23B9DA64 DUP9 DUP7 PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x4A ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0x17C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0xA93A4D03 DUP5 CALLER ADDRESS DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x18FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x64697370757465436F756E740000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP5 PUSH1 0x4A ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x100 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x3 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0xE0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP NUMBER DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6665650000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x3 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH3 0x93A80 TIMESTAMP ADD DUP5 PUSH1 0x44 ADD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6D696E457865637574696F6E4461746500000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x10 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3E8 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3E8 DUP4 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1DD0 JUMPI INVALID JUMPDEST DIV LT ISZERO PUSH2 0x1F4C JUMPI PUSH2 0x1EF9 PUSH8 0xD02AB486CEDC0000 PUSH2 0x3E8 PUSH2 0x1EEA DUP5 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3E8 DUP7 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 0x1E8C JUMPI INVALID JUMPDEST DIV PUSH2 0x3E8 SUB DUP6 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2344 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x1EF3 JUMPI INVALID JUMPDEST DIV PUSH2 0x2377 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x1FA4 JUMP JUMPDEST PUSH8 0xD02AB486CEDC0000 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x44 ADD PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xC6F7EFE0 DUP7 CALLER DUP6 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x626C6F636B4E756D626572000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x20C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x20DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 0x1 ISZERO ISZERO DUP3 PUSH1 0x6 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO ISZERO ISZERO PUSH2 0x2152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT ISZERO ISZERO PUSH2 0x2161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP6 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO ISZERO PUSH2 0x21B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x6 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6E756D6265724F66566F74657300000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xD ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP3 PUSH1 0x5 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x71756F72756D0000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 ISZERO PUSH2 0x22DA JUMPI DUP1 DUP3 PUSH1 0x1 ADD SLOAD ADD DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x22EA JUMP JUMPDEST DUP1 DUP3 PUSH1 0x1 ADD SLOAD SUB DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0x86ABFCE99B7DD908BEC0169288797F85049EC73CBE046ED9DE818FAB3A497AE0 DUP6 PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 0x0 DUP5 EQ DUP1 PUSH2 0x2365 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 0x2362 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 0x236D JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 GT PUSH2 0x2386 JUMPI DUP2 PUSH2 0x2388 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd7 BLOCKHASH 0xaf DELEGATECALL SWAP12 PUSH23 0x709D4B3C3FBF0DB6771A200EE21FD2F64ECE535D1A8E17 0xde SUB 0x46 STOP 0x29 ",
              "sourceMap": "213:12261:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6378:3747;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6378:3747:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6378:3747:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1268:3225;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1268:3225:6;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1268:3225:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10252:1200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10252:1200:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10252:1200:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;11622:850;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11622:850:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11622:850:6;;;;;;;;;;;;;;;;;:::i;:::-;;4697:1587;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4697:1587:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4697:1587:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6378:3747;6474:31;6508:4;:17;;:29;6526:10;6508:29;;;;;;;;;;;6474:63;;6547:35;6585:4;:19;;:65;6605:4;:20;;:44;6626:22;;;;;;;;;;;;;;;;;;;6605:44;;;;;;;;;;;;6585:65;;;;;;;;;;;6547:103;;6746:5;6729:22;;:4;:13;;;;;;;;;;;;:22;;;6721:31;;;;;;;;6826:4;:20;;:51;6847:29;;;;;;;;;;;;;;;;;;;6826:51;;;;;;;;;;;;6820:3;:57;6812:66;;;;;;;;6959:5;6941:23;;:4;:15;;;;;;;;;;;;:23;;;6937:2977;;;6975:35;7013:4;:18;;:38;7032:4;:18;;;;;;;;;;;;7013:38;;;;;;;;;;;;;;;6975:76;;7277:1;7264:4;:10;;;:14;7260:2132;;;7476:1;7453:6;:20;;:24;;;;7526:5;7520:3;:11;;;;;;;;7514:3;:18;7495:6;:16;;:37;;;;7636:4;:13;;:39;7650:24;;;;;;;;;;;;;;;;;;;7636:39;;;;;;;;;;;;:41;;;;;;;;;;;;;;7695:22;7712:4;7695:16;:22::i;:::-;7827:11;:22;7850:4;7856;:18;;;;;;;;;;;;7875:4;:19;;;;;;;;;;;;7896:4;:13;;:39;7910:24;;;;;;;;;;;;;;;;;;;7896:39;;;;;;;;;;;;7827:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7827:109:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7827:109:6;;;;8035:11;:22;8058:4;8072;8078;:19;;;;;;;;;;;;8098:4;:20;;:38;8119:16;;;;;;;;;;;;;;;;;;;8098:38;;;;;;;;;;;;8035:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8035:102:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8035:102:6;;;;8252:4;8227;:22;;;:29;;;;;;;;;;;;;;;;;;8509:4;8441:72;;:8;:18;;:64;8460:4;:20;;:44;8481:22;;;;;;;;;;;;;;;;;;;8460:44;;;;;;;;;;;;8441:64;;;;;;;;;;;;;;;;;;;;;:72;;;8438:187;;;8605:1;8536:8;:20;;:66;8557:4;:20;;:44;8578:22;;;;;;;;;;;;;;;;;;;8557:44;;;;;;;;;;;;8536:66;;;;;;;;;;;:70;;;;8438:187;7260:2132;;;8983:1;8960:6;:20;;:24;;;;9071:11;:22;9094:4;9107;9113;:18;;;;;;;;;;;;9132:4;:20;;:38;9153:16;;;;;;;;;;;;;;;;;;;9132:38;;;;;;;;;;;;9071:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9071:100:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9071:100:6;;;;9260:4;9192:72;;:8;:18;;:64;9211:4;:20;;:44;9232:22;;;;;;;;;;;;;;;;;;;9211:44;;;;;;;;;;;;9192:64;;;;;;;;;;;;;;;;;;;;;:72;;;9189:189;;;9354:5;9287:8;:18;;:64;9306:4;:20;;:44;9327:22;;;;;;;;;;;;;;;;;;;9306:44;;;;;;;;;;;;9287:64;;;;;;;;;;;;:72;;;;;;;;;;;;;;;;;;9189:189;7260:2132;6937:2977;;;;9565:1;9552:4;:10;;;:14;9549:355;;;9688:3;9683:2;9640:4;:13;;:40;9654:25;;;;;;;;;;;;;;;;;;;9640:40;;;;;;;;;;;;:45;:51;;;;;;;;9594:4;:20;;:41;9615:19;;;;;;;;;;;;;;;;;;;9594:41;;;;;;;;;;;;:98;9586:107;;;;;;;;9756:4;:24;;;;;;;;;;;;9711:4;:16;;:42;9728:24;;;;;;;;;;;;;;;;;;;9711:42;;;;;;;;;;;;:69;;;;;;;;;;;;;;;;;;9823:4;9798;:22;;;:29;;;;;;;;;;;;;;;;;;9850:39;9864:4;:24;;;;;;;;;;;;9850:39;;;;;;;;;;;;;;;;;;;;;;9549:355;6937:2977;9996:4;9980;:13;;;:20;;;;;;;;;;;;;;;;;;10056:4;:18;;;;;;;;;;;;10015:103;;10034:10;10015:103;10045:4;:10;;;10075:4;:19;;;;;;;;;;;;10095:4;:22;;;;;;;;;;;;10015:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6378:3747;;;;:::o;1268:3225::-;1399:35;1437:4;:19;;:31;1457:10;1437:31;;;;;;;;;;;1399:69;;1666:3;1629:8;:22;;:34;1652:10;1629:34;;;;;;;;;;;;1615:12;:48;:54;;1607:63;;;;;;;;1725:1;1688:8;:22;;:34;1711:10;1688:34;;;;;;;;;;;;:38;1680:47;;;;;;;;1759:1;1745:11;:15;1737:24;;;;;;;;1954:14;1971:8;:22;;:34;1994:10;1971:34;;;;;;;;;;;2006:11;1971:47;;;;;;;;;;;;;;;;;;;;1954:64;;2028:13;2071:6;2078:10;2089;2054:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2054:46:6;;;2044:57;;;;;;2028:73;;2263:1;2225:4;:27;;:34;2253:5;2225:34;;;;;;;;;;;;:39;2217:48;;;;;;;;2275:11;:22;2298:4;2304:10;2323:4;2330;:13;;:38;2344:23;;;;;;;;;;;;;;;;;;;2330:38;;;;;;;;;;;;2275:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2275:94:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2275:94:6;;;;2517:1;2474:4;:13;;:40;2488:25;;;;;;;;;;;;;;;;;;;2474:40;;;;;;;;;;;;:44;2430:4;:13;;:40;2444:25;;;;;;;;;;;;;;;;;;;2430:40;;;;;;;;;;;:88;;;;2590:14;2607:4;:13;;:40;2621:25;;;;;;;;;;;;;;;;;;;2607:40;;;;;;;;;;;;2590:57;;2752:9;2715:4;:27;;:34;2743:5;2715:34;;;;;;;;;;;:46;;;;2851:297;;;;;;;;;2889:5;2851:297;;;;3132:1;2851:297;;;;3068:5;2851:297;;;;;;3106:5;2851:297;;;;;;2920:5;2851:297;;;;;;2954:6;2851:297;;;;;;2990:10;2851:297;;;;;;3042:1;2851:297;;;;;2820:4;:17;;:28;2838:9;2820:28;;;;;;;;;;;:328;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3298:10;3227:4;:17;;:28;3245:9;3227:28;;;;;;;;;;;:44;;:68;3272:22;;;;;;;;;;;;;;;;;;;3227:68;;;;;;;;;;;:81;;;;3389:10;3318:4;:17;;:28;3336:9;3318:28;;;;;;;;;;;:44;;:68;3363:22;;;;;;;;;;;;;;;;;;;3318:68;;;;;;;;;;;:81;;;;3476:8;:26;;:38;3503:10;3476:38;;;;;;;;;;;3515:11;3476:51;;;;;;;;;;;3409:4;:17;;:28;3427:9;3409:28;;;;;;;;;;;:44;;:64;3454:18;;;;;;;;;;;;;;;;;;;3409:64;;;;;;;;;;;:118;;;;3621:6;3615:3;:12;3537:4;:17;;:28;3555:9;3537:28;;;;;;;;;;;:44;;:75;3582:29;;;;;;;;;;;;;;;;;;;3537:75;;;;;;;;;;;:90;;;;3710:12;3637:4;:17;;:28;3655:9;3637:28;;;;;;;;;;;:44;;:70;3682:24;;;;;;;;;;;;;;;;;;;3637:70;;;;;;;;;;;:85;;;;3803:11;3732:4;:17;;:28;3750:9;3732:28;;;;;;;;;;;:44;;:68;3777:22;;;;;;;;;;;;;;;;;;;3732:68;;;;;;;;;;;:82;;;;3890:4;:13;;:38;3904:23;;;;;;;;;;;;;;;;;;;3890:38;;;;;;;;;;;;3824:4;:17;;:28;3842:9;3824:28;;;;;;;;;;;:44;;:62;3869:16;;;;;;;;;;;;;;;;;;;3824:62;;;;;;;;;;;:104;;;;4281:1;4266:11;:16;4263:105;;;4353:4;4297;:19;;:31;4317:10;4297:31;;;;;;;;;;;:41;;:53;4339:10;4297:53;;;;;;;;;;;;:60;;;;;;;;;;;;;;;;;;4263:105;4420:1;4377:4;:18;;:26;4396:6;4377:26;;;;;;;;;;;;;;;:40;;:44;;;;4457:10;4447:9;4436:50;4468:10;4479:6;4436:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;1268:3225;;;;;;;;:::o;10252:1200::-;10360:13;10403:18;10386:36;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10386:36:6;;;10376:47;;;;;;10360:63;;10479:1;10441:4;:27;;:34;10469:5;10441:34;;;;;;;;;;;;:39;10433:48;;;;;;;;10491:11;:22;10514:4;10520:10;10539:4;10546;:13;;:38;10560:23;;;;;;;;;;;;;;;;;;;10546:38;;;;;;;;;;;;10491:94;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10491:94:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10491:94:6;;;;10617:4;:13;;:40;10631:25;;;;;;;;;;;;;;;;;;;10617:40;;;;;;;;;;;;:42;;;;;;;;;;;;;10669:14;10686:4;:13;;:40;10700:25;;;;;;;;;;;;;;;;;;;10686:40;;;;;;;;;;;;10669:57;;10773:9;10736:4;:27;;:34;10764:5;10736:34;;;;;;;;;;;:46;;;;10823:312;;;;;;;;;10862:5;10823:312;;;;11119:1;10823:312;;;;11055:5;10823:312;;;;;;11093:5;10823:312;;;;;;10893:4;10823:312;;;;;;10926:10;10823:312;;;;;;10967:10;10823:312;;;;;;11013:18;10823:312;;;;;10792:4;:17;;:28;10810:9;10792:28;;;;;;;;;;;:343;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11219:12;11146:4;:17;;:28;11164:9;11146:28;;;;;;;;;;;:44;;:70;11191:24;;;;;;;;;;;;;;;;;;;11146:70;;;;;;;;;;;:85;;;;11307:4;:13;;:38;11321:23;;;;;;;;;;;;;;;;;;;11307:38;;;;;;;;;;;;11241:4;:17;;:28;11259:9;11241:28;;;;;;;;;;;:44;;:62;11286:16;;;;;;;;;;;;;;;;;;;11241:62;;;;;;;;;;;:104;;;;11439:6;11433:3;:12;11355:4;:17;;:28;11373:9;11355:28;;;;;;;;;;;:44;;:75;11400:29;;;;;;;;;;;;;;;;;;;11355:75;;;;;;;;;;;:90;;;;10252:1200;;;;:::o;11622:850::-;11907:4;11864;:13;;:40;11878:25;;;;;;;;;;;;;;;;;;;11864:40;;;;;;;;;;;;11859:4;11819;:13;;:39;11833:24;;;;;;;;;;;;;;;;;;;11819:39;;;;;;;;;;;;:44;:85;;;;;;;;:92;11816:650;;;12103:163;12117:5;12261:4;12123:137;12219:4;:13;;:40;12233:25;;;;;;;;;;;;;;;;;;;12219:40;;;;;;;;;;;;12214:4;12174;:13;;:39;12188:24;;;;;;;;;;;;;;;;;;;12174:39;;;;;;;;;;;;:44;:85;;;;;;;;12167:4;:92;12123:4;:13;;:39;12137:24;;;;;;;;;;;;;;;;;;;12123:39;;;;;;;;;;;;:43;;:137;;;;:::i;:::-;:142;;;;;;;;12103:13;:163::i;:::-;12062:4;:13;;:38;12076:23;;;;;;;;;;;;;;;;;;;12062:38;;;;;;;;;;;:204;;;;11816:650;;;12446:5;12405:4;:13;;:38;12419:23;;;;;;;;;;;;;;;;;;;12405:38;;;;;;;;;;;:46;;;;11816:650;11622:850;:::o;4697:1587::-;4810:31;4844:4;:17;;:29;4862:10;4844:29;;;;;;;;;;;4810:63;;4990:15;5008:11;:23;5032:4;5037:10;5048:4;:20;;:46;5069:24;;;;;;;;;;;;;;;;;;;5048:46;;;;;;;;;;;;5008:87;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5008:87:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5008:87:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5008:87:6;;;;;;;;;;;;;;;;4990:105;;5200:4;5174:30;;:4;:10;;:22;5185:10;5174:22;;;;;;;;;;;;;;;;;;;;;;;;;:30;;;;5166:39;;;;;;;;5331:1;5318:10;:14;5310:23;;;;;;;;5468:1;5420:4;:18;;:30;5439:10;5420:30;;;;;;;;;;;;;;;:44;;;:49;;5412:58;;;;;;;;5558:4;5533;:10;;:22;5544:10;5533:22;;;;;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;5686:1;5634:4;:20;;:48;5655:26;;;;;;;;;;;;;;;;;;;5634:48;;;;;;;;;;;;:53;;;;;;;;;;;5804:10;5759:4;:20;;:41;5780:19;;;;;;;;;;;;;;;;;;;5759:41;;;;;;;;;;;;:55;;;;;;;;;;;5966:16;5962:160;;;6028:10;6011:4;:10;;;:28;5998:4;:10;;:41;;;;5962:160;;;6100:10;6083:4;:10;;;:28;6070:4;:10;;:41;;;;5962:160;6266:10;6232:45;;6238:10;6232:45;6249:16;6232:45;;;;;;;;;;;;;;;;;;;;;;4697:1587;;;;;:::o;588:143:4:-;646:7;661:9;677:1;673;:5;661:17;;696:1;691;:6;:20;;;;710:1;705;701;:5;;;;;;;;:10;691:20;684:28;;;;;;725:1;718:8;;;588:143;;;;:::o;282:92::-;334:7;360:1;356;:5;:13;;368:1;356:13;;;364:1;356:13;349:20;;282:92;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "1829600",
                "executionCost": "1977",
                "totalCost": "1831577"
              },
              "external": {
                "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)": "infinite",
                "proposeFork(ZapStorage.ZapStorageStruct storage,address)": "infinite",
                "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)": "infinite",
                "updateDisputeFee(ZapStorage.ZapStorageStruct storage)": "infinite",
                "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)": "infinite"
              }
            },
            "methodIdentifiers": {
              "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)": "60dd6c35",
              "proposeFork(ZapStorage.ZapStorageStruct storage,address)": "804b8931",
              "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)": "3cedafe5",
              "updateDisputeFee(ZapStorage.ZapStorageStruct storage)": "9264b888",
              "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)": "bcc7a8a8"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_minerIndex\",\"type\":\"uint256\"}],\"name\":\"beginDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_propNewZapAddress\",\"type\":\"address\"}],\"name\":\"proposeFork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"}],\"name\":\"updateDisputeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_supportsDispute\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"_requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"NewDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_position\",\"type\":\"bool\"},{\"indexed\":true,\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"_reportedMiner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_reportingParty\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"DisputeVoteTallied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newZap\",\"type\":\"address\"}],\"name\":\"NewZapAddress\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contais the methods related to disputes. Zap.sol references this library for function's logic.\",\"methods\":{\"beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)\":{\"details\":\"Helps initialize a dispute by assigning it a disputeId when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the invalidated value information to POS voting\",\"params\":{\"_minerIndex\":\"the index of the miner that submitted the value being disputed. Since each official value requires 5 miners to submit a value.\",\"_requestId\":\"being disputed\",\"_timestamp\":\"being disputed\"}},\"proposeFork(ZapStorage.ZapStorageStruct storage,address)\":{\"details\":\"Allows for a fork to be proposed\",\"params\":{\"_propNewZapAddress\":\"address for new proposed Zap\"}},\"tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)\":{\"details\":\"tallies the votes.\",\"params\":{\"_disputeId\":\"is the dispute id\"}},\"updateDisputeFee(ZapStorage.ZapStorageStruct storage)\":{\"details\":\"this function allows the dispute fee to fluctuate based on the number of miners on the system. The floor for the fee is 15e18.\"},\"vote(ZapStorage.ZapStorageStruct storage,uint256,bool)\":{\"details\":\"Allows token holders to vote\",\"params\":{\"_disputeId\":\"is the dispute id\",\"_supportsDispute\":\"is the vote (true=the dispute has basis false = vote against dispute)\"}}},\"title\":\"Zap Dispute\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZapDispute.sol\":\"ZapDispute\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"},\"contracts/libraries/ZapDispute.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./ZapTransfer.sol\\\";\\n\\n/**\\n* @title Zap Dispute\\n* @dev Contais the methods related to disputes. Zap.sol references this library for function's logic.\\n*/\\n\\n\\nlibrary ZapDispute {\\n    using SafeMathM for uint256;\\n\\n    event NewDispute(uint indexed _disputeId, uint indexed _requestId, uint _timestamp, address _miner);//emitted when a new dispute is initialized\\n    event Voted(uint indexed _disputeID, bool _position, address indexed _voter);//emitted when a new vote happens\\n    event DisputeVoteTallied(uint indexed _disputeID, int _result,address indexed _reportedMiner,address _reportingParty, bool _active);//emitted upon dispute tally\\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Helps initialize a dispute by assigning it a disputeId\\n    * when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the\\n    * invalidated value information to POS voting\\n    * @param _requestId being disputed\\n    * @param _timestamp being disputed\\n    * @param _minerIndex the index of the miner that submitted the value being disputed. Since each official value\\n    * requires 5 miners to submit a value.\\n    */\\n    function beginDispute(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp,uint _minerIndex) public {\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId];\\n        //require that no more than a day( (24 hours * 60 minutes)/10minutes=144 blocks) has gone by since the value was \\\"mined\\\"\\n        require(block.number- _request.minedBlockNum[_timestamp]<= 144);\\n        require(_request.minedBlockNum[_timestamp] > 0);\\n        require(_minerIndex < 5);\\n        \\n        //_miner is the miner being disputed. For every mined value 5 miners are saved in an array and the _minerIndex\\n        //provided by the party initiating the dispute\\n        address _miner = _request.minersByValue[_timestamp][_minerIndex];\\n        bytes32 _hash = keccak256(abi.encodePacked(_miner,_requestId,_timestamp));\\n        \\n        //Ensures that a dispute is not already open for the that miner, requestId and timestamp\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);\\n        \\n        //Increase the dispute count by 1\\n        self.uintVars[keccak256(\\\"disputeCount\\\")] =  self.uintVars[keccak256(\\\"disputeCount\\\")] + 1;\\n        \\n        //Sets the new disputeCount as the disputeId\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        \\n        //maps the dispute hash to the disputeId\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        //maps the dispute to the Dispute struct\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash:_hash,\\n            isPropFork: false,\\n            reportedMiner: _miner,\\n            reportingParty: msg.sender,\\n            proposedForkAddress:address(0),\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            });\\n        \\n        //Saves all the dispute variables for the disputeId\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"requestId\\\")] = _requestId;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"timestamp\\\")] = _timestamp;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"value\\\")] = _request.valuesByTimestamp[_timestamp][_minerIndex];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minerSlot\\\")] = _minerIndex;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        \\n        //Values are sorted as they come in and the official value is the median of the first five\\n        //So the \\\"official value\\\" miner is always minerIndex==2. If the official value is being \\n        //disputed, it sets its status to inDispute(currentStatus = 3) so that users are made aware it is under dispute\\n        if(_minerIndex == 2){\\n            self.requestDetails[_requestId].inDispute[_timestamp] = true;\\n        }\\n        self.stakerDetails[_miner].currentStatus = 3;\\n        emit NewDispute(disputeId,_requestId,_timestamp,_miner);\\n    }\\n\\n\\n    /**\\n    * @dev Allows token holders to vote\\n    * @param _disputeId is the dispute id\\n    * @param _supportsDispute is the vote (true=the dispute has basis false = vote against dispute)\\n    */\\n    function vote(ZapStorage.ZapStorageStruct storage self, uint _disputeId, bool _supportsDispute) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        \\n        //Get the voteWeight or the balance of the user at the time/blockNumber the disupte began\\n        uint voteWeight = ZapTransfer.balanceOfAt(self,msg.sender,disp.disputeUintVars[keccak256(\\\"blockNumber\\\")]);\\n        \\n        //Require that the msg.sender has not voted\\n        require(disp.voted[msg.sender] != true);\\n        \\n        //Requre that the user had a balance >0 at time/blockNumber the disupte began\\n        require(voteWeight > 0);\\n        \\n        //ensures miners that are under dispute cannot vote\\n        require(self.stakerDetails[msg.sender].currentStatus != 3);\\n        \\n        //Update user voting status to true\\n        disp.voted[msg.sender] = true;\\n        \\n        //Update the number of votes for the dispute\\n        disp.disputeUintVars[keccak256(\\\"numberOfVotes\\\")] += 1;\\n        \\n        //Update the quorum by adding the voteWeight\\n        disp.disputeUintVars[keccak256(\\\"quorum\\\")] += voteWeight; \\n        \\n        //If the user supports the dispute increase the tally for the dispute by the voteWeight\\n        //otherwise decrease it\\n        if (_supportsDispute) {\\n            disp.tally = disp.tally + int(voteWeight);\\n        } else {\\n            disp.tally = disp.tally - int(voteWeight);\\n        }\\n        \\n        //Let the network know the user has voted on the dispute and their casted vote\\n        emit Voted(_disputeId,_supportsDispute,msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev tallies the votes.\\n    * @param _disputeId is the dispute id\\n    */\\n    function tallyVotes(ZapStorage.ZapStorageStruct storage self, uint _disputeId) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        ZapStorage.Request storage _request = self.requestDetails[disp.disputeUintVars[keccak256(\\\"requestId\\\")]];\\n\\n        //Ensure this has not already been executed/tallied\\n        require(disp.executed == false);\\n\\n        //Ensure the time for voting has elapsed\\n        require(now > disp.disputeUintVars[keccak256(\\\"minExecutionDate\\\")]);  \\n\\n        //If the vote is not a proposed fork \\n        if (disp.isPropFork== false){\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[disp.reportedMiner];  \\n            //If the vote for disputing a value is succesful(disp.tally >0) then unstake the reported \\n            // miner and transfer the stakeAmount and dispute fee to the reporting party \\n            if (disp.tally > 0 ) { \\n\\n                //Changing the currentStatus and startDate unstakes the reported miner and allows for the\\n                //transfer of the stakeAmount\\n                stakes.currentStatus = 0;\\n                stakes.startDate = now -(now % 86400);\\n\\n                //Decreases the stakerCount since the miner's stake is being slashed\\n                self.uintVars[keccak256(\\\"stakerCount\\\")]--;\\n                updateDisputeFee(self);\\n\\n                //Transfers the StakeAmount from the reporded miner to the reporting party\\n                ZapTransfer.doTransfer(self, disp.reportedMiner,disp.reportingParty, self.uintVars[keccak256(\\\"stakeAmount\\\")]);\\n                \\n                //Returns the dispute fee to the reportingParty\\n                ZapTransfer.doTransfer(self, address(this),disp.reportingParty,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                \\n                //Set the dispute state to passed/true\\n                disp.disputeVotePassed = true;\\n\\n                //If the dispute was succeful(miner found guilty) then update the timestamp value to zero\\n                //so that users don't use this datapoint\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.finalValues[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = 0;\\n                }\\n\\n            //If the vote for disputing a value is unsuccesful then update the miner status from being on \\n            //dispute(currentStatus=3) to staked(currentStatus =1) and tranfer the dispute fee to the miner\\n            } else {\\n                //Update the miner's current status to staked(currentStatus = 1)\\n                stakes.currentStatus = 1;              \\n                //tranfer the dispute fee to the miner\\n                ZapTransfer.doTransfer(self,address(this),disp.reportedMiner,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = false;\\n                }\\n            }\\n        //If the vote is for a proposed fork require a 20% quorum before exceduting the update to the new zap contract address\\n        } else {\\n            if(disp.tally > 0 ){\\n                require(disp.disputeUintVars[keccak256(\\\"quorum\\\")] >  (self.uintVars[keccak256(\\\"total_supply\\\")] * 20 / 100));\\n                self.addressVars[keccak256(\\\"zapContract\\\")] = disp.proposedForkAddress;\\n                disp.disputeVotePassed = true;\\n                emit NewZapAddress(disp.proposedForkAddress);\\n            }\\n        }\\n        \\n        //update the dispute status to executed\\n        disp.executed = true;\\n        emit DisputeVoteTallied(_disputeId,disp.tally,disp.reportedMiner,disp.reportingParty,disp.disputeVotePassed);\\n    }\\n\\n\\n    /**\\n    * @dev Allows for a fork to be proposed\\n    * @param _propNewZapAddress address for new proposed Zap\\n    */\\n    function proposeFork(ZapStorage.ZapStorageStruct storage self, address _propNewZapAddress) public {\\n        bytes32 _hash = keccak256(abi.encodePacked(_propNewZapAddress));\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);//This is the fork fee\\n        self.uintVars[keccak256(\\\"disputeCount\\\")]++;\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash: _hash,\\n            isPropFork: true,\\n            reportedMiner: msg.sender, \\n            reportingParty: msg.sender, \\n            proposedForkAddress: _propNewZapAddress,\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            }); \\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n    }\\n    \\n\\n    /**\\n    * @dev this function allows the dispute fee to fluctuate based on the number of miners on the system.\\n    * The floor for the fee is 15e18.\\n    */\\n    function updateDisputeFee(ZapStorage.ZapStorageStruct storage self) public {\\n            //if the number of staked miners divided by the target count of staked miners is less than 1\\n            if(self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")] < 1000){\\n                //Set the dispute fee at stakeAmt * (1- stakerCount/targetMiners)\\n                //or at the its minimum of 15e18 \\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = SafeMathM.max(15e18,self.uintVars[keccak256(\\\"stakeAmount\\\")].mul(1000 - self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")])/1000);\\n            }\\n            else{\\n                //otherwise set the dispute fee at 15e18 (the floor/minimum fee allowed)\\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = 15e18;\\n            }\\n    }\\n}\\n\",\"keccak256\":\"0x06cb29c92743acc7974e8615118cd9d1365f8d7816e1bc101b41f0830ef44a4d\"},\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"},\"contracts/libraries/ZapTransfer.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\n\\n/**\\n* @title Zap Transfer\\n* @dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\\n* reference this library for function's logic.\\n*/\\nlibrary ZapTransfer {\\n    using SafeMathM for uint256;\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);//ERC20 Approval event\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);//ERC20 Transfer Event\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Allows for a transfer of tokens to _to\\n    * @param _to The address to send tokens to\\n    * @param _amount The amount of tokens to send\\n    * @return true if transfer is successful\\n    */\\n    function transfer(ZapStorage.ZapStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\\n        doTransfer(self,msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @notice Send _amount tokens to _to from _from on the condition it\\n    * is approved by _from\\n    * @param _from The address holding the tokens being transferred\\n    * @param _to The address of the recipient\\n    * @param _amount The amount of tokens to be transferred\\n    * @return True if the transfer was successful\\n    */\\n    function transferFrom(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint256 _amount) public returns (bool success) {\\n        require(self.allowed[_from][msg.sender] >= _amount);\\n        self.allowed[_from][msg.sender] -= _amount;\\n        doTransfer(self,_from, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @dev This function approves a _spender an _amount of tokens to use\\n    * @param _spender address\\n    * @param _amount amount the spender is being approved for\\n    * @return true if spender appproved successfully\\n    */\\n    function approve(ZapStorage.ZapStorageStruct storage self, address _spender, uint _amount) public returns (bool) {\\n        require(allowedToTrade(self,msg.sender,_amount));\\n        require(_spender != address(0));\\n        self.allowed[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @param _user address of party with the balance\\n    * @param _spender address of spender of parties said balance\\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\\n    */\\n    function allowance(ZapStorage.ZapStorageStruct storage self,address _user, address _spender) public view returns (uint) {\\n       \\n       return self.allowed[_user][_spender]; \\n    }\\n\\n\\n    /**\\n    * @dev Completes POWO transfers by updating the balances on the current block number\\n    * @param _from address to transfer from\\n    * @param _to addres to transfer to\\n    * @param _amount to transfer\\n    */\\n    function doTransfer(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint _amount) public {\\n        require(_amount > 0);\\n        require(_to != address(0));\\n        require(allowedToTrade(self,_from,_amount)); //allowedToTrade checks the stakeAmount is removed from balance if the _user is staked\\n        uint previousBalance = balanceOfAt(self,_from, block.number);\\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\\n        previousBalance = balanceOfAt(self,_to, block.number);\\n        require(previousBalance + _amount >= previousBalance); // Check for overflow\\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n\\n    /**\\n    * @dev Gets balance of owner specified\\n    * @param _user is the owner address used to look up the balance\\n    * @return Returns the balance associated with the passed in _user\\n    */\\n    function balanceOf(ZapStorage.ZapStorageStruct storage self,address _user) public view returns (uint) {\\n        return balanceOfAt(self,_user, block.number);\\n    }\\n\\n\\n    /**\\n    * @dev Queries the balance of _user at a specific _blockNumber\\n    * @param _user The address from which the balance will be retrieved\\n    * @param _blockNumber The block number when the balance is queried\\n    * @return The balance at _blockNumber specified\\n    */\\n    function balanceOfAt(ZapStorage.ZapStorageStruct storage self,address _user, uint _blockNumber) public view returns (uint) {\\n        if ((self.balances[_user].length == 0) || (self.balances[_user][0].fromBlock > _blockNumber)) {\\n                return 0;\\n        }\\n     else {\\n        return getBalanceAt(self.balances[_user], _blockNumber);\\n     }\\n    }\\n\\n\\n    /**\\n    * @dev Getter for balance for owner on the specified _block number\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _block is the block number to search the balance on\\n    * @return the balance at the checkpoint\\n    */\\n    function getBalanceAt(ZapStorage.Checkpoint[] storage checkpoints, uint _block) view public returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n\\n    /**\\n    * @dev This function returns whether or not a given user is allowed to trade a given amount \\n    * and removing the staked amount from their balance if they are staked\\n    * @param _user address of user\\n    * @param _amount to check if the user can spend\\n    * @return true if they are allowed to spend the amount being checked\\n    */\\n    function allowedToTrade(ZapStorage.ZapStorageStruct storage self,address _user,uint _amount) public view returns(bool) {\\n        if(self.stakerDetails[_user].currentStatus >0){\\n            //Removes the stakeAmount from balance if the _user is staked\\n            if(balanceOf(self,_user).sub(self.uintVars[keccak256(\\\"stakeAmount\\\")]).sub(_amount) >= 0){\\n                return true;\\n            }\\n        }\\n        else if(balanceOf(self,_user).sub(_amount) >= 0){\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n\\n    /**\\n    * @dev Updates balance for from and to on the current block number via doTransfer\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _value is the new balance\\n    */\\n    function updateBalanceAtNow(ZapStorage.Checkpoint[] storage checkpoints, uint _value) public {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               ZapStorage.Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n        } else {\\n               ZapStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87399d0a6627e7413463f1df4e20cd3b6a9cbe459d826b096abf253a6f649748\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/ZapGettersLibrary.sol": {
        "ZapGettersLibrary": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "name": "_newZap",
                  "type": "address"
                }
              ],
              "name": "NewZapAddress",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This is the getter library for all variables in the Zap Token system. ZapGetters references this  libary for the getters logic",
            "methods": {},
            "title": "Zap Getters Library"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820591eea357c481a0b5238b9e41233db7e7a617923faed6e40566d8a0d3c6f43a90029",
              "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 MSIZE 0x1e 0xea CALLDATALOAD PUSH29 0x481A0B5238B9E41233DB7E7A617923FAED6E40566D8A0D3C6F43A90029 ",
              "sourceMap": "277:16675:7:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820591eea357c481a0b5238b9e41233db7e7a617923faed6e40566d8a0d3c6f43a90029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 MSIZE 0x1e 0xea CALLDATALOAD PUSH29 0x481A0B5238B9E41233DB7E7A617923FAED6E40566D8A0D3C6F43A90029 ",
              "sourceMap": "277:16675:7:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15200",
                "executionCost": "116",
                "totalCost": "15316"
              },
              "internal": {
                "changeDeity(struct ZapStorage.ZapStorageStruct storage pointer,address)": "infinite",
                "changeZapContract(struct ZapStorage.ZapStorageStruct storage pointer,address)": "infinite",
                "didMine(struct ZapStorage.ZapStorageStruct storage pointer,bytes32,address)": "infinite",
                "didVote(struct ZapStorage.ZapStorageStruct storage pointer,uint256,address)": "infinite",
                "getAddressVars(struct ZapStorage.ZapStorageStruct storage pointer,bytes32)": "infinite",
                "getAllDisputeVars(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getCurrentVariables(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getDisputeIdByDisputeHash(struct ZapStorage.ZapStorageStruct storage pointer,bytes32)": "infinite",
                "getDisputeUintVars(struct ZapStorage.ZapStorageStruct storage pointer,uint256,bytes32)": "infinite",
                "getLastNewValue(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getLastNewValueById(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getMinedBlockNum(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "getMinersByRequestIdAndTimestamp(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "getName(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getNewValueCountbyRequestId(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getRequestIdByQueryHash(struct ZapStorage.ZapStorageStruct storage pointer,bytes32)": "infinite",
                "getRequestIdByRequestQIndex(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getRequestIdByTimestamp(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getRequestQ(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getRequestUintVars(struct ZapStorage.ZapStorageStruct storage pointer,uint256,bytes32)": "infinite",
                "getRequestVars(struct ZapStorage.ZapStorageStruct storage pointer,uint256)": "infinite",
                "getStakerInfo(struct ZapStorage.ZapStorageStruct storage pointer,address)": "infinite",
                "getSubmissionsByTimestamp(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "getSymbol(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getTimestampbyRequestIDandIndex(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "getTopRequestID(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "getUintVar(struct ZapStorage.ZapStorageStruct storage pointer,bytes32)": "infinite",
                "getVariablesOnDeck(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite",
                "isInDispute(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "retrieveData(struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256)": "infinite",
                "totalSupply(struct ZapStorage.ZapStorageStruct storage pointer)": "infinite"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newZap\",\"type\":\"address\"}],\"name\":\"NewZapAddress\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This is the getter library for all variables in the Zap Token system. ZapGetters references this  libary for the getters logic\",\"methods\":{},\"title\":\"Zap Getters Library\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZapGettersLibrary.sol\":\"ZapGettersLibrary\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Functions for retrieving min and Max in 51 length array (requestQ)\\n//Taken partly from: https://github.com/modular-network/ethereum-libraries-array-utils/blob/master/contracts/Array256Lib.sol\\n\\nlibrary Utilities{\\n\\n  /// @dev Returns the minimum value and position in an array.\\n  //@note IT IGNORES THE 0 INDEX\\n    function getMin(uint[51] memory arr) internal pure returns (uint256 min, uint256 minIndex) {\\n      assembly {\\n          minIndex := 50\\n          min := mload(add(arr, mul(minIndex , 0x20)))\\n          for {let i := 49 } gt(i,0) { i := sub(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(item,min){\\n                  min := item\\n                  minIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  // function getMin(uint[51] memory data) internal pure returns(uint256 minimal,uint minIndex) {\\n  //       minIndex = data.length - 1;\\n  //       minimal = data[minIndex];\\n  //       for(uint i = data.length-1;i > 0;i--) {\\n  //           if(data[i] < minimal) {\\n  //               minimal = data[i];\\n  //               minIndex = i;\\n  //           }\\n  //       }\\n  // }\\n  \\n  function getMax(uint256[51] memory arr) internal pure returns (uint256 max, uint256 maxIndex) {\\n      assembly {\\n          for { let i := 0 } lt(i,51) { i := add(i, 1) } {\\n              let item := mload(add(arr, mul(i, 0x20)))\\n              if lt(max, item) {\\n                  max := item\\n                  maxIndex := i\\n              }\\n          }\\n      }\\n    }\\n\\n  }\\n\",\"keccak256\":\"0x5194385f0138f2f8a8e91f322115e8a32e7ef14c6510a5f39d5a4618dd2aefc3\"},\"contracts/libraries/ZapGettersLibrary.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\n/**\\n* @title Zap Getters Library\\n* @dev This is the getter library for all variables in the Zap Token system. ZapGetters references this \\n* libary for the getters logic\\n*/\\nlibrary ZapGettersLibrary{\\n    using SafeMathM for uint256;\\n\\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\\n\\n    /*Functions*/\\n\\n    //The next two functions are onlyOwner functions.  For Zap to be truly decentralized, we will need to transfer the Deity to the 0 address.\\n    //Only needs to be in library\\n    /**\\n    * @dev This function allows us to set a new Deity (or remove it) \\n    * @param _newDeity address of the new Deity of the zap system \\n    */\\n    function changeDeity(ZapStorage.ZapStorageStruct storage self, address _newDeity) internal{\\n        require(self.addressVars[keccak256(\\\"_deity\\\")] == msg.sender);\\n        self.addressVars[keccak256(\\\"_deity\\\")] =_newDeity;\\n    }\\n\\n\\n    //Only needs to be in library\\n    /**\\n    * @dev This function allows the deity to upgrade the Zap System\\n    * @param _zapContract address of new updated ZapCore contract\\n    */\\n    function changeZapContract(ZapStorage.ZapStorageStruct storage self,address _zapContract) internal{\\n        require(self.addressVars[keccak256(\\\"_deity\\\")] == msg.sender);\\n        self.addressVars[keccak256(\\\"zapContract\\\")]= _zapContract;\\n        emit NewZapAddress(_zapContract);\\n    }\\n\\n\\n    /*Zap Getters*/\\n\\n    /**\\n    * @dev This function tells you if a given challenge has been completed by a given miner\\n    * @param _challenge the challenge to search for\\n    * @param _miner address that you want to know if they solved the challenge\\n    * @return true if the _miner address provided solved the \\n    */\\n    function didMine(ZapStorage.ZapStorageStruct storage self, bytes32 _challenge,address _miner) internal view returns(bool){\\n        return self.minersByChallenge[_challenge][_miner];\\n    }\\n    \\n\\n    /**\\n    * @dev Checks if an address voted in a dispute\\n    * @param _disputeId to look up\\n    * @param _address of voting party to look up\\n    * @return bool of whether or not party voted\\n    */\\n    function didVote(ZapStorage.ZapStorageStruct storage self,uint _disputeId, address _address) internal view returns(bool){\\n        return self.disputesById[_disputeId].voted[_address];\\n    }\\n\\n\\n    /**\\n    * @dev allows Zap to read data from the addressVars mapping\\n    * @param _data is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. \\n    * These are examples of how the variables are saved within other functions:\\n    * addressVars[keccak256(\\\"_owner\\\")]\\n    * addressVars[keccak256(\\\"zapContract\\\")]\\n    */\\n    function getAddressVars(ZapStorage.ZapStorageStruct storage self, bytes32 _data) view internal returns(address){\\n        return self.addressVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Gets all dispute variables\\n    * @param _disputeId to look up\\n    * @return bytes32 hash of dispute \\n    * @return bool executed where true if it has been voted on\\n    * @return bool disputeVotePassed\\n    * @return bool isPropFork true if the dispute is a proposed fork\\n    * @return address of reportedMiner\\n    * @return address of reportingParty\\n    * @return address of proposedForkAddress\\n    * @return uint of requestId\\n    * @return uint of timestamp\\n    * @return uint of value\\n    * @return uint of minExecutionDate\\n    * @return uint of numberOfVotes\\n    * @return uint of blocknumber\\n    * @return uint of minerSlot\\n    * @return uint of quorum\\n    * @return uint of fee\\n    * @return int count of the current tally\\n    */\\n    function getAllDisputeVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId) internal view returns(bytes32, bool, bool, bool, address, address, address,uint[9] memory, int){\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        return(disp.hash,disp.executed, disp.disputeVotePassed, disp.isPropFork, disp.reportedMiner, disp.reportingParty,disp.proposedForkAddress,[disp.disputeUintVars[keccak256(\\\"requestId\\\")], disp.disputeUintVars[keccak256(\\\"timestamp\\\")], disp.disputeUintVars[keccak256(\\\"value\\\")], disp.disputeUintVars[keccak256(\\\"minExecutionDate\\\")], disp.disputeUintVars[keccak256(\\\"numberOfVotes\\\")], disp.disputeUintVars[keccak256(\\\"blockNumber\\\")], disp.disputeUintVars[keccak256(\\\"minerSlot\\\")], disp.disputeUintVars[keccak256(\\\"quorum\\\")],disp.disputeUintVars[keccak256(\\\"fee\\\")]],disp.tally);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for variables for the requestId being currently mined(currentRequestId)\\n    * @return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \\n    */\\n    function getCurrentVariables(ZapStorage.ZapStorageStruct storage self) internal view returns(bytes32, uint, uint,string memory,uint,uint){    \\n        return (self.currentChallenge,self.uintVars[keccak256(\\\"currentRequestId\\\")],self.uintVars[keccak256(\\\"difficulty\\\")],self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].queryString,self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].apiUintVars[keccak256(\\\"granularity\\\")],self.requestDetails[self.uintVars[keccak256(\\\"currentRequestId\\\")]].apiUintVars[keccak256(\\\"totalTip\\\")]);\\n    }\\n\\n\\n    /**\\n    * @dev Checks if a given hash of miner,requestId has been disputed\\n    * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\\n    * @return uint disputeId\\n    */\\n    function getDisputeIdByDisputeHash(ZapStorage.ZapStorageStruct storage self,bytes32 _hash) internal view returns(uint){\\n        return  self.disputeIdByDisputeHash[_hash];\\n    }\\n\\n\\n    /**\\n    * @dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\\n    * @param _disputeId is the dispute id;\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the disputeUintVars under the Dispute struct\\n    * @return uint value for the bytes32 data submitted\\n    */\\n    function getDisputeUintVars(ZapStorage.ZapStorageStruct storage self,uint _disputeId,bytes32 _data) internal view returns(uint){\\n        return self.disputesById[_disputeId].disputeUintVars[_data];\\n    }\\n\\n    \\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @return value for timestamp of last proof of work submited\\n    * @return true if the is a timestamp for the lastNewValue\\n    */\\n    function getLastNewValue(ZapStorage.ZapStorageStruct storage self) internal view returns(uint,bool){\\n        return (retrieveData(self,self.requestIdByTimestamp[self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")]], self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")]),true);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the a value for the latest timestamp available\\n    * @param _requestId being requested\\n    * @return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\\n    */\\n    function getLastNewValueById(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(uint,bool){\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \\n        if(_request.requestTimestamps.length > 0){\\n            return (retrieveData(self,_requestId,_request.requestTimestamps[_request.requestTimestamps.length - 1]),true);\\n        }\\n        else{\\n            return (0,false);\\n        }\\n    }\\n\\n\\n    /**\\n    * @dev Gets blocknumber for mined timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up blocknumber\\n    * @return uint of the blocknumber which the dispute was mined\\n    */\\n    function getMinedBlockNum(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp) internal view returns(uint){\\n        return self.requestDetails[_requestId].minedBlockNum[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return the 5 miners' addresses\\n    */\\n    function getMinersByRequestIdAndTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(address[5] memory){\\n        return self.requestDetails[_requestId].minersByValue[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Get the name of the token\\n    * @return string of the token name\\n    */\\n    function getName(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\\n        return \\\"Zap Token\\\";\\n    }\\n\\n\\n    /**\\n    * @dev Counts the number of values that have been submited for the request \\n    * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\\n    * request so far\\n    * @param _requestId the requestId to look up\\n    * @return uint count of the number of values received for the requestId\\n    */\\n    function getNewValueCountbyRequestId(ZapStorage.ZapStorageStruct storage self, uint _requestId) internal view returns(uint){\\n        return self.requestDetails[_requestId].requestTimestamps.length;\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the specified requestQ index\\n    * @param _index to look up in the requestQ array\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByRequestQIndex(ZapStorage.ZapStorageStruct storage self, uint _index) internal view returns(uint){\\n        require(_index <= 50);\\n        return self.requestIdByRequestQIndex[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for requestId based on timestamp \\n    * @param _timestamp to check requestId\\n    * @return uint of reqeuestId\\n    */\\n    function getRequestIdByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _timestamp) internal view returns(uint){    \\n        return self.requestIdByTimestamp[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for requestId based on the qeuaryHash\\n    * @param _queryHash hash(of string api and granularity) to check if a request already exists\\n    * @return uint requestId\\n    */\\n    function getRequestIdByQueryHash(ZapStorage.ZapStorageStruct storage self, bytes32 _queryHash) internal view returns(uint){    \\n        return self.requestIdByQueryHash[_queryHash];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the requestQ array\\n    * @return the requestQ arrray\\n    */\\n    function getRequestQ(ZapStorage.ZapStorageStruct storage self) view internal returns(uint[51] memory){\\n        return self.requestQ;\\n    }\\n\\n\\n    /**\\n    * @dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\\n    * for the requestId specified\\n    * @param _requestId to look up\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the apiUintVars under the requestDetails struct\\n    * @return uint value of the apiUintVars specified in _data for the requestId specified\\n    */\\n    function getRequestUintVars(ZapStorage.ZapStorageStruct storage self,uint _requestId,bytes32 _data) internal view returns(uint){\\n        return self.requestDetails[_requestId].apiUintVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the API struct variables that are not mappings\\n    * @param _requestId to look up\\n    * @return string of api to query\\n    * @return string of symbol of api to query\\n    * @return bytes32 hash of string\\n    * @return bytes32 of the granularity(decimal places) requested\\n    * @return uint of index in requestQ array\\n    * @return uint of current payout/tip for this requestId\\n    */\\n    function getRequestVars(ZapStorage.ZapStorageStruct storage self,uint _requestId) internal view returns(string memory,string memory, bytes32,uint, uint, uint) {\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId]; \\n        return (_request.queryString,_request.dataSymbol,_request.queryHash, _request.apiUintVars[keccak256(\\\"granularity\\\")],_request.apiUintVars[keccak256(\\\"requestQPosition\\\")],_request.apiUintVars[keccak256(\\\"totalTip\\\")]);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows users to retireve all information about a staker\\n    * @param _staker address of staker inquiring about\\n    * @return uint current state of staker\\n    * @return uint startDate of staking\\n    */\\n    function getStakerInfo(ZapStorage.ZapStorageStruct storage self,address _staker) internal view returns(uint,uint){\\n        return (self.stakerDetails[_staker].currentStatus,self.stakerDetails[_staker].startDate);\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestampt to look up miners for\\n    * @return address[5] array of 5 addresses ofminers that mined the requestId\\n    */\\n    function getSubmissionsByTimestamp(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(uint[5] memory){\\n        return self.requestDetails[_requestId].valuesByTimestamp[_timestamp];\\n    }\\n\\n    /**\\n    * @dev Get the symbol of the token\\n    * @return string of the token symbol\\n    */\\n    function getSymbol(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\\n        return \\\"TT\\\";\\n    } \\n\\n\\n    /**\\n    * @dev Gets the timestamp for the value based on their index\\n    * @param _requestID is the requestId to look up\\n    * @param _index is the value index to look up\\n    * @return uint timestamp\\n    */\\n    function getTimestampbyRequestIDandIndex(ZapStorage.ZapStorageStruct storage self,uint _requestID, uint _index) internal view returns(uint){\\n        return self.requestDetails[_requestID].requestTimestamps[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the variables saved under the ZapStorageStruct uintVars variable\\n    * @param _data the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\n    * the variables/strings used to save the data in the mapping. The variables names are  \\n    * commented out under the uintVars under the ZapStorageStruct struct\\n    * This is an example of how data is saved into the mapping within other functions: \\n    * self.uintVars[keccak256(\\\"stakerCount\\\")]\\n    * @return uint of specified variable  \\n    */ \\n    function getUintVar(ZapStorage.ZapStorageStruct storage self,bytes32 _data) view internal returns(uint){\\n        return self.uintVars[_data];\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for next requestId on queue/request with highest payout at time the function is called\\n    * @return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\\n    */\\n    function getVariablesOnDeck(ZapStorage.ZapStorageStruct storage self) internal view returns(uint, uint,string memory){ \\n        uint newRequestId = getTopRequestID(self);\\n        return (newRequestId,self.requestDetails[newRequestId].apiUintVars[keccak256(\\\"totalTip\\\")],self.requestDetails[newRequestId].queryString);\\n    }\\n\\n\\n    /**\\n    * @dev Getter function for the request with highest payout. This function is used withing the getVariablesOnDeck function\\n    * @return uint _requestId of request with highest payout at the time the function is called\\n    */\\n    function getTopRequestID(ZapStorage.ZapStorageStruct storage self) internal view returns(uint _requestId){\\n            uint _max;\\n            uint _index;\\n            (_max,_index) = Utilities.getMax(self.requestQ);\\n             _requestId = self.requestIdByRequestQIndex[_index];\\n    }\\n\\n\\n    /**\\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \\n    * @param _requestId to look up\\n    * @param _timestamp is the timestamp to look up miners for\\n    * @return bool true if requestId/timestamp is under dispute\\n    */\\n    function isInDispute(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns(bool){\\n        return self.requestDetails[_requestId].inDispute[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Retreive value from oracle based on requestId/timestamp\\n    * @param _requestId being requested\\n    * @param _timestamp to retreive data/value from\\n    * @return uint value for requestId/timestamp submitted\\n    */\\n    function retrieveData(ZapStorage.ZapStorageStruct storage self, uint _requestId, uint _timestamp) internal view returns (uint) {\\n        return self.requestDetails[_requestId].finalValues[_timestamp];\\n    }\\n\\n\\n    /**\\n    * @dev Getter for the total_supply of oracle tokens\\n    * @return uint total supply\\n    */\\n    function totalSupply(ZapStorage.ZapStorageStruct storage self) internal view returns (uint) {\\n       return self.uintVars[keccak256(\\\"total_supply\\\")];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3b11f3f1fdc884e22320d4ae9923e51ec5860246a413b30bf62055e576b1a63f\"},\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/ZapStake.sol": {
        "ZapStake": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                }
              ],
              "name": "depositStake",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                }
              ],
              "name": "requestStakingWithdraw",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                }
              ],
              "name": "init",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                }
              ],
              "name": "withdrawStake",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_sender",
                  "type": "address"
                }
              ],
              "name": "NewStake",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_sender",
                  "type": "address"
                }
              ],
              "name": "StakeWithdrawn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_sender",
                  "type": "address"
                }
              ],
              "name": "StakeWithdrawRequested",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "Contais the methods related to miners staking and unstaking. Zap.sol  references this library for function's logic.",
            "methods": {
              "depositStake(ZapStorage.ZapStorageStruct storage)": {
                "details": "This function allows miners to deposit their stake."
              },
              "init(ZapStorage.ZapStorageStruct storage)": {
                "details": "This function stakes the five initial miners, sets the supply and all the constant variables. This function is called by the constructor function on ZapMaster.sol"
              },
              "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)": {
                "details": "This function allows stakers to request to withdraw their stake (no longer stake) once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they can withdraw the deposit"
              },
              "withdrawStake(ZapStorage.ZapStorageStruct storage)": {
                "details": "This function allows users to withdraw their stake after a 7 day waiting period from request "
              }
            },
            "title": "Zap Dispute"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {
                "contracts/libraries/ZapDispute.sol": {
                  "ZapDispute": [
                    {
                      "length": 20,
                      "start": 416
                    },
                    {
                      "length": 20,
                      "start": 762
                    }
                  ]
                },
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 1053
                    },
                    {
                      "length": 20,
                      "start": 1743
                    },
                    {
                      "length": 20,
                      "start": 3064
                    }
                  ]
                }
              },
              "object": "610ebc610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610073576000357c010000000000000000000000000000000000000000000000000000000090048063326991a3146100785780633c734827146100b357806347b024eb146100ee57806378bfa27714610129575b600080fd5b81801561008457600080fd5b506100b16004803603602081101561009b57600080fd5b8101908080359060200190929190505050610164565b005b8180156100bf57600080fd5b506100ec600480360360208110156100d657600080fd5b81019080803590602001909291905050506101f4565b005b8180156100fa57600080fd5b506101276004803603602081101561011157600080fd5b8101908080359060200190929190505050610392565b005b81801561013557600080fd5b506101626004803603602081101561014c57600080fd5b8101908080359060200190929190505050610aaa565b005b61016e8133610b7b565b73__$a129b1b574282adaa6f30b90cf6e0e269c$__639264b888826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b1580156101d957600080fd5b505af41580156101ed573d6000803e3d6000fd5b5050505050565b60008160470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506001816000015414151561024c57600080fd5b60028160000181905550620151804281151561026457fe5b0642038160010181905550600182604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000206000828254039250508190555073__$a129b1b574282adaa6f30b90cf6e0e269c$__639264b888836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561033357600080fd5b505af4158015610347573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf60405160405180910390a25050565b600081604001600060405180807f646563696d616c73000000000000000000000000000000000000000000000000815250600801905060405180910390208152602001908152602001600020541415156103eb57600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__632dfd89088260450160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000207ffffffffffffffffffffffffffffffffffffffffffffffebabd45ed5cc83fffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b1580156104be57600080fd5b505af41580156104d2573d6000803e3d6000fd5b505050506104de610e6d565b60c06040519081016040528073df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250905060008090505b60068110156107ac5773__$946cc509dcf4b4c97ecabc42418c409021$__632dfd890884604501600085856006811015156106cb57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020683635c9adc5dea000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b15801561076b57600080fd5b505af415801561077f573d6000803e3d6000fd5b5050505061079f83838360068110151561079557fe5b6020020151610b7b565b8080600101915050610694565b5069014542ba12a337c0000082604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002060008282540192505081905550601282604001600060405180807f646563696d616c730000000000000000000000000000000000000000000000008152506008019050604051809103902081526020019081526020016000208190555060c882604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002081905550683635c9adc5dea0000082604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020819055506834957444b840e8000082604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000208190555061025882604001600060405180807f74696d6554617267657400000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000208190555081604001600060405180807f74696d6554617267657400000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000205442811515610a0557fe5b06420382604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002081905550600182604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020819055505050565b60008160470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905062093a8081600101546201518042811515610b0657fe5b0642030310151515610b1757600080fd5b60028160000154141515610b2a57600080fd5b600081600001819055503373ffffffffffffffffffffffffffffffffffffffff167f4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec60405160405180910390a25050565b81604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205473__$946cc509dcf4b4c97ecabc42418c409021$__63f07528dd84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610c6557600080fd5b505af4158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b810190808051906020019092919050505010151515610cad57600080fd5b60008260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541480610d44575060028260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b1515610d4f57600080fd5b600182604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020600082825401925050819055506040805190810160405280600181526020016201518042811515610dc857fe5b0642038152508260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050508073ffffffffffffffffffffffffffffffffffffffff167f46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e260405160405180910390a25050565b60c06040519081016040528060069060208202803883398082019150509050509056fea165627a7a72305820a23d78364c8f3ca93be681fa2e04a89793ad85fdfc16842c97bab9c9183ca0210029",
              "opcodes": "PUSH2 0xEBC PUSH2 0x30 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH2 0x20 JUMPI PUSH2 0x22 JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x73 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x326991A3 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x3C734827 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x47B024EB EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x78BFA277 EQ PUSH2 0x129 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x164 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F4 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAAA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16E DUP2 CALLER PUSH2 0xB7B JUMP JUMPDEST PUSH20 0x0 PUSH4 0x9264B888 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0x264 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0x9264B888 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x347 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x453865710D0CB4B14AD25DE371C860DA196368895DAA9662E5087711D14DAECF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646563696D616C73000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0x2DFD8908 DUP3 PUSH1 0x45 ADD PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBABD45ED5CC83FFFFF PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4DE PUSH2 0xE6D JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0xDF3E18D64BC6A983F673AB319CCAE4F1A57C7097 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xCD3B766CCDD6AE721141F452C550CA635964CE71 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x2546BCD3C84621E976D8185A91A922AE77ECEC30 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xBDA5747BFD65F08DEB54CB465EB87D40E51B197E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xDD2FD4581271E230360230F9337D5C0430BF44C0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x8626F6940E2EB28930EFB4CEF49B2D1F2C9C1199 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x7AC JUMPI PUSH20 0x0 PUSH4 0x2DFD8908 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 DUP6 PUSH1 0x6 DUP2 LT ISZERO ISZERO PUSH2 0x6CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH9 0x3635C9ADC5DEA00000 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x77F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x79F DUP4 DUP4 DUP4 PUSH1 0x6 DUP2 LT ISZERO ISZERO PUSH2 0x795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xB7B JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x694 JUMP JUMPDEST POP PUSH10 0x14542BA12A337C00000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x12 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646563696D616C73000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xC8 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH9 0x3635C9ADC5DEA00000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH9 0x34957444B840E80000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x258 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D6554617267657400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D6554617267657400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xA05 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646966666963756C747900000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH3 0x93A80 DUP2 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xB06 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB SUB LT ISZERO ISZERO ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO PUSH2 0xB2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A7934670BD8304E7DA22378BE1368F7C4FEF17C5AEE81804BEDA8638FE428EC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH20 0x0 PUSH4 0xF07528DD DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO ISZERO ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ DUP1 PUSH2 0xD44 JUMPI POP PUSH1 0x2 DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 0xD4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xDC8 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 MSTORE POP DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x46D8AB1385F70E5A3673E97C23C764F7600F7ED7A09B6687DEAE7131D51752E2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG2 RETURNDATASIZE PUSH25 0x364C8F3CA93BE681FA2E04A89793AD85FDFC16842C97BAB9C9 XOR EXTCODECOPY LOG0 0x21 STOP 0x29 ",
              "sourceMap": "262:5230:8:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {
                "contracts/libraries/ZapDispute.sol": {
                  "ZapDispute": [
                    {
                      "length": 20,
                      "start": 368
                    },
                    {
                      "length": 20,
                      "start": 714
                    }
                  ]
                },
                "contracts/libraries/ZapTransfer.sol": {
                  "ZapTransfer": [
                    {
                      "length": 20,
                      "start": 1005
                    },
                    {
                      "length": 20,
                      "start": 1695
                    },
                    {
                      "length": 20,
                      "start": 3016
                    }
                  ]
                }
              },
              "object": "7300000000000000000000000000000000000000003014608060405260043610610073576000357c010000000000000000000000000000000000000000000000000000000090048063326991a3146100785780633c734827146100b357806347b024eb146100ee57806378bfa27714610129575b600080fd5b81801561008457600080fd5b506100b16004803603602081101561009b57600080fd5b8101908080359060200190929190505050610164565b005b8180156100bf57600080fd5b506100ec600480360360208110156100d657600080fd5b81019080803590602001909291905050506101f4565b005b8180156100fa57600080fd5b506101276004803603602081101561011157600080fd5b8101908080359060200190929190505050610392565b005b81801561013557600080fd5b506101626004803603602081101561014c57600080fd5b8101908080359060200190929190505050610aaa565b005b61016e8133610b7b565b73__$a129b1b574282adaa6f30b90cf6e0e269c$__639264b888826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b1580156101d957600080fd5b505af41580156101ed573d6000803e3d6000fd5b5050505050565b60008160470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506001816000015414151561024c57600080fd5b60028160000181905550620151804281151561026457fe5b0642038160010181905550600182604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000206000828254039250508190555073__$a129b1b574282adaa6f30b90cf6e0e269c$__639264b888836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060006040518083038186803b15801561033357600080fd5b505af4158015610347573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f453865710d0cb4b14ad25de371c860da196368895daa9662e5087711d14daecf60405160405180910390a25050565b600081604001600060405180807f646563696d616c73000000000000000000000000000000000000000000000000815250600801905060405180910390208152602001908152602001600020541415156103eb57600080fd5b73__$946cc509dcf4b4c97ecabc42418c409021$__632dfd89088260450160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000207ffffffffffffffffffffffffffffffffffffffffffffffebabd45ed5cc83fffff6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b1580156104be57600080fd5b505af41580156104d2573d6000803e3d6000fd5b505050506104de610e6d565b60c06040519081016040528073df3e18d64bc6a983f673ab319ccae4f1a57c709773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173cd3b766ccdd6ae721141f452c550ca635964ce7173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001732546bcd3c84621e976d8185a91a922ae77ecec3073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173bda5747bfd65f08deb54cb465eb87d40e51b197e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200173dd2fd4581271e230360230f9337d5c0430bf44c073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001738626f6940e2eb28930efb4cef49b2d1f2c9c119973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250905060008090505b60068110156107ac5773__$946cc509dcf4b4c97ecabc42418c409021$__632dfd890884604501600085856006811015156106cb57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020683635c9adc5dea000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b15801561076b57600080fd5b505af415801561077f573d6000803e3d6000fd5b5050505061079f83838360068110151561079557fe5b6020020151610b7b565b8080600101915050610694565b5069014542ba12a337c0000082604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002060008282540192505081905550601282604001600060405180807f646563696d616c730000000000000000000000000000000000000000000000008152506008019050604051809103902081526020019081526020016000208190555060c882604001600060405180807f7461726765744d696e6572730000000000000000000000000000000000000000815250600c0190506040518091039020815260200190815260200160002081905550683635c9adc5dea0000082604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020819055506834957444b840e8000082604001600060405180807f6469737075746546656500000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000208190555061025882604001600060405180807f74696d6554617267657400000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000208190555081604001600060405180807f74696d6554617267657400000000000000000000000000000000000000000000815250600a019050604051809103902081526020019081526020016000205442811515610a0557fe5b06420382604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002081905550600182604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020819055505050565b60008160470160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905062093a8081600101546201518042811515610b0657fe5b0642030310151515610b1757600080fd5b60028160000154141515610b2a57600080fd5b600081600001819055503373ffffffffffffffffffffffffffffffffffffffff167f4a7934670bd8304e7da22378be1368f7c4fef17c5aee81804beda8638fe428ec60405160405180910390a25050565b81604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205473__$946cc509dcf4b4c97ecabc42418c409021$__63f07528dd84846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015610c6557600080fd5b505af4158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b810190808051906020019092919050505010151515610cad57600080fd5b60008260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541480610d44575060028260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b1515610d4f57600080fd5b600182604001600060405180807f7374616b6572436f756e74000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020600082825401925050819055506040805190810160405280600181526020016201518042811515610dc857fe5b0642038152508260470160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050508073ffffffffffffffffffffffffffffffffffffffff167f46d8ab1385f70e5a3673e97c23c764f7600f7ed7a09b6687deae7131d51752e260405160405180910390a25050565b60c06040519081016040528060069060208202803883398082019150509050509056fea165627a7a72305820a23d78364c8f3ca93be681fa2e04a89793ad85fdfc16842c97bab9c9183ca0210029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x73 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x326991A3 EQ PUSH2 0x78 JUMPI DUP1 PUSH4 0x3C734827 EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x47B024EB EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0x78BFA277 EQ PUSH2 0x129 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x164 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1F4 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x127 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAAA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16E DUP2 CALLER PUSH2 0xB7B JUMP JUMPDEST PUSH20 0x0 PUSH4 0x9264B888 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0x264 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH20 0x0 PUSH4 0x9264B888 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x347 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x453865710D0CB4B14AD25DE371C860DA196368895DAA9662E5087711D14DAECF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646563696D616C73000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0x0 PUSH4 0x2DFD8908 DUP3 PUSH1 0x45 ADD PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBABD45ED5CC83FFFFF PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x4D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x4DE PUSH2 0xE6D JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH20 0xDF3E18D64BC6A983F673AB319CCAE4F1A57C7097 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xCD3B766CCDD6AE721141F452C550CA635964CE71 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x2546BCD3C84621E976D8185A91A922AE77ECEC30 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xBDA5747BFD65F08DEB54CB465EB87D40E51B197E PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0xDD2FD4581271E230360230F9337D5C0430BF44C0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH20 0x8626F6940E2EB28930EFB4CEF49B2D1F2C9C1199 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST PUSH1 0x6 DUP2 LT ISZERO PUSH2 0x7AC JUMPI PUSH20 0x0 PUSH4 0x2DFD8908 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 DUP6 PUSH1 0x6 DUP2 LT ISZERO ISZERO PUSH2 0x6CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH9 0x3635C9ADC5DEA00000 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x77F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x79F DUP4 DUP4 DUP4 PUSH1 0x6 DUP2 LT ISZERO ISZERO PUSH2 0x795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xB7B JUMP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x694 JUMP JUMPDEST POP PUSH10 0x14542BA12A337C00000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x746F74616C5F737570706C790000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x12 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646563696D616C73000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x8 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0xC8 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7461726765744D696E6572730000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xC ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH9 0x3635C9ADC5DEA00000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH9 0x34957444B840E80000 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x6469737075746546656500000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x258 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D6554617267657400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D6554617267657400000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xA05 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x74696D654F664C6173744E657756616C75650000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x12 ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x646966666963756C747900000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xA ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x47 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH3 0x93A80 DUP2 PUSH1 0x1 ADD SLOAD PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xB06 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB SUB LT ISZERO ISZERO ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO ISZERO PUSH2 0xB2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4A7934670BD8304E7DA22378BE1368F7C4FEF17C5AEE81804BEDA8638FE428EC PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST DUP2 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH20 0x0 PUSH4 0xF07528DD DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH29 0x100000000000000000000000000000000000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC79 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP LT ISZERO ISZERO ISZERO PUSH2 0xCAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ DUP1 PUSH2 0xD44 JUMPI POP PUSH1 0x2 DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 0xD4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B6572436F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x15180 TIMESTAMP DUP2 ISZERO ISZERO PUSH2 0xDC8 JUMPI INVALID JUMPDEST MOD TIMESTAMP SUB DUP2 MSTORE POP DUP3 PUSH1 0x47 ADD PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE SWAP1 POP POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x46D8AB1385F70E5A3673E97C23C764F7600F7ED7A09B6687DEAE7131D51752E2 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0xC0 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 LOG2 RETURNDATASIZE PUSH25 0x364C8F3CA93BE681FA2E04A89793AD85FDFC16842C97BAB9C9 XOR EXTCODECOPY LOG0 0x21 STOP 0x29 ",
              "sourceMap": "262:5230:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4265:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4265:187:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4265:187:8;;;;;;;;;;;;;;;;;:::i;:::-;;2817:748;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2817:748:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2817:748:8;;;;;;;;;;;;;;;;;:::i;:::-;;781:1791;;8:9:-1;5:2;;;30:1;27;20:12;5:2;781:1791:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;781:1791:8;;;;;;;;;;;;;;;;;:::i;:::-;;3692:488;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3692:488:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3692:488:8;;;;;;;;;;;;;;;;;:::i;:::-;;4265:187;4344:26;4353:4;4359:10;4344:8;:26::i;:::-;4412:10;:27;4440:4;4412:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4412:33:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4412:33:8;;;;4265:187;:::o;2817:748::-;2908:35;2946:4;:18;;:30;2965:10;2946:30;;;;;;;;;;;;;;;2908:68;;3061:1;3037:6;:20;;;:25;3029:34;;;;;;;;3161:1;3138:6;:20;;:24;;;;3371:5;3365:3;:11;;;;;;;;3359:3;:18;3340:6;:16;;:37;;;;3465:1;3422:4;:13;;:39;3436:24;;;;;;;;;;;;;;;;;;;3422:39;;;;;;;;;;;;:44;;;;;;;;;;;3476:10;:27;3504:4;3476:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3476:33:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3476:33:8;;;;3547:10;3524:34;;;;;;;;;;;;2817:748;;:::o;781:1791::-;901:1;861:4;:13;;:36;875:21;;;;;;;;;;;;;;;;;;;861:36;;;;;;;;;;;;:41;853:50;;;;;;;;999:11;:30;1030:4;:13;;:28;1052:4;1030:28;;;;;;;;;;;;;;;1060:18;999:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;999:80:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;999:80:8;;;;1189:39;;:::i;:::-;:442;;;;;;;;;1253:42;1189:442;;;;;;;;1318:42;1189:442;;;;;;;;1383:42;1189:442;;;;;;;;1448:42;1189:442;;;;;;;;1513:42;1189:442;;;;;;;;1578:42;1189:442;;;;;;;;;1698:6;1705:1;1698:8;;1694:281;1709:1;1707;:3;1694:281;;;1846:11;:30;1877:4;:13;;:31;1891:13;1905:1;1891:16;;;;;;;;;;;;;1877:31;;;;;;;;;;;;;;;1909:7;1846:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1846:71:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1846:71:8;;;;1932:32;1941:4;1947:13;1961:1;1947:16;;;;;;;;;;;;;1932:8;:32::i;:::-;1711:3;;;;;;;1694:281;;;;2064:7;2020:4;:13;;:40;2034:25;;;;;;;;;;;;;;;;;;;2020:40;;;;;;;;;;;;:51;;;;;;;;;;;2176:2;2137:4;:13;;:36;2151:21;;;;;;;;;;;;;;;;;;;2137:36;;;;;;;;;;;:41;;;;2231:3;2188:4;:13;;:40;2202:25;;;;;;;;;;;;;;;;;;;2188:40;;;;;;;;;;;:46;;;;2286:7;2244:4;:13;;:39;2258:24;;;;;;;;;;;;;;;;;;;2244:39;;;;;;;;;;;:49;;;;2344:6;2303:4;:13;;:38;2317:23;;;;;;;;;;;;;;;;;;;2303:38;;;;;;;;;;;:47;;;;2400:3;2360:4;:13;;:38;2374:23;;;;;;;;;;;;;;;;;;;2360:38;;;;;;;;;;;:43;;;;2475:4;:13;;:38;2489:23;;;;;;;;;;;;;;;;;;;2475:38;;;;;;;;;;;;2468:3;:45;;;;;;;;2462:3;:51;2413:4;:13;;:46;2427:31;;;;;;;;;;;;;;;;;;;2413:46;;;;;;;;;;;:100;;;;2564:1;2523:4;:13;;:38;2537:23;;;;;;;;;;;;;;;;;;;2523:38;;;;;;;;;;;:42;;;;781:1791;;:::o;3692:488::-;3774:35;3812:4;:18;;:30;3831:10;3812:30;;;;;;;;;;;;;;;3774:68;;4047:6;4027;:16;;;4018:5;4012:3;:11;;;;;;;;4005:3;:19;:38;:48;;3997:57;;;;;;;;4096:1;4072:6;:20;;;:25;4064:34;;;;;;;;4131:1;4108:6;:20;;:24;;;;4162:10;4147:26;;;;;;;;;;;;3692:488;;:::o;4738:752::-;4879:4;:13;;:39;4893:24;;;;;;;;;;;;;;;;;;;4879:39;;;;;;;;;;;;4841:11;:21;4863:4;4868:6;4841:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4841:34:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4841:34:8;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4841:34:8;;;;;;;;;;;;;;;;:77;;4833:86;;;;;;;;5144:1;5100:4;:18;;:26;5119:6;5100:26;;;;;;;;;;;;;;;:40;;;:45;:94;;;;5193:1;5149:4;:18;;:26;5168:6;5149:26;;;;;;;;;;;;;;;:40;;;:45;5100:94;5092:103;;;;;;;;5248:1;5205:4;:13;;:39;5219:24;;;;;;;;;;;;;;;;;;;5205:39;;;;;;;;;;;;:44;;;;;;;;;;;5288:164;;;;;;;;;5338:1;5288:164;;;;5435:5;5429:3;:11;;;;;;;;5422:3;:19;5288:164;;;5259:4;:18;;:26;5278:6;5259:26;;;;;;;;;;;;;;;:193;;;;;;;;;;;;;;;;;;;5476:6;5467:16;;;;;;;;;;;;4738:752;;:::o;262:5230::-;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;262:5230:8;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "754400",
                "executionCost": "836",
                "totalCost": "755236"
              },
              "external": {
                "depositStake(ZapStorage.ZapStorageStruct storage)": "infinite",
                "init(ZapStorage.ZapStorageStruct storage)": "infinite",
                "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)": "infinite",
                "withdrawStake(ZapStorage.ZapStorageStruct storage)": "7088"
              },
              "internal": {
                "newStake(struct ZapStorage.ZapStorageStruct storage pointer,address)": "infinite"
              }
            },
            "methodIdentifiers": {
              "depositStake(ZapStorage.ZapStorageStruct storage)": "326991a3",
              "init(ZapStorage.ZapStorageStruct storage)": "47b024eb",
              "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)": "3c734827",
              "withdrawStake(ZapStorage.ZapStorageStruct storage)": "78bfa277"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"}],\"name\":\"depositStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"}],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"NewStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"StakeWithdrawRequested\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contais the methods related to miners staking and unstaking. Zap.sol  references this library for function's logic.\",\"methods\":{\"depositStake(ZapStorage.ZapStorageStruct storage)\":{\"details\":\"This function allows miners to deposit their stake.\"},\"init(ZapStorage.ZapStorageStruct storage)\":{\"details\":\"This function stakes the five initial miners, sets the supply and all the constant variables. This function is called by the constructor function on ZapMaster.sol\"},\"requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)\":{\"details\":\"This function allows stakers to request to withdraw their stake (no longer stake) once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they can withdraw the deposit\"},\"withdrawStake(ZapStorage.ZapStorageStruct storage)\":{\"details\":\"This function allows users to withdraw their stake after a 7 day waiting period from request \"}},\"title\":\"Zap Dispute\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZapStake.sol\":\"ZapStake\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"},\"contracts/libraries/ZapDispute.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./ZapTransfer.sol\\\";\\n\\n/**\\n* @title Zap Dispute\\n* @dev Contais the methods related to disputes. Zap.sol references this library for function's logic.\\n*/\\n\\n\\nlibrary ZapDispute {\\n    using SafeMathM for uint256;\\n\\n    event NewDispute(uint indexed _disputeId, uint indexed _requestId, uint _timestamp, address _miner);//emitted when a new dispute is initialized\\n    event Voted(uint indexed _disputeID, bool _position, address indexed _voter);//emitted when a new vote happens\\n    event DisputeVoteTallied(uint indexed _disputeID, int _result,address indexed _reportedMiner,address _reportingParty, bool _active);//emitted upon dispute tally\\n    event NewZapAddress(address _newZap); //emmited when a proposed fork is voted true\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Helps initialize a dispute by assigning it a disputeId\\n    * when a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the\\n    * invalidated value information to POS voting\\n    * @param _requestId being disputed\\n    * @param _timestamp being disputed\\n    * @param _minerIndex the index of the miner that submitted the value being disputed. Since each official value\\n    * requires 5 miners to submit a value.\\n    */\\n    function beginDispute(ZapStorage.ZapStorageStruct storage self,uint _requestId, uint _timestamp,uint _minerIndex) public {\\n        ZapStorage.Request storage _request = self.requestDetails[_requestId];\\n        //require that no more than a day( (24 hours * 60 minutes)/10minutes=144 blocks) has gone by since the value was \\\"mined\\\"\\n        require(block.number- _request.minedBlockNum[_timestamp]<= 144);\\n        require(_request.minedBlockNum[_timestamp] > 0);\\n        require(_minerIndex < 5);\\n        \\n        //_miner is the miner being disputed. For every mined value 5 miners are saved in an array and the _minerIndex\\n        //provided by the party initiating the dispute\\n        address _miner = _request.minersByValue[_timestamp][_minerIndex];\\n        bytes32 _hash = keccak256(abi.encodePacked(_miner,_requestId,_timestamp));\\n        \\n        //Ensures that a dispute is not already open for the that miner, requestId and timestamp\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);\\n        \\n        //Increase the dispute count by 1\\n        self.uintVars[keccak256(\\\"disputeCount\\\")] =  self.uintVars[keccak256(\\\"disputeCount\\\")] + 1;\\n        \\n        //Sets the new disputeCount as the disputeId\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        \\n        //maps the dispute hash to the disputeId\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        //maps the dispute to the Dispute struct\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash:_hash,\\n            isPropFork: false,\\n            reportedMiner: _miner,\\n            reportingParty: msg.sender,\\n            proposedForkAddress:address(0),\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            });\\n        \\n        //Saves all the dispute variables for the disputeId\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"requestId\\\")] = _requestId;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"timestamp\\\")] = _timestamp;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"value\\\")] = _request.valuesByTimestamp[_timestamp][_minerIndex];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minerSlot\\\")] = _minerIndex;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        \\n        //Values are sorted as they come in and the official value is the median of the first five\\n        //So the \\\"official value\\\" miner is always minerIndex==2. If the official value is being \\n        //disputed, it sets its status to inDispute(currentStatus = 3) so that users are made aware it is under dispute\\n        if(_minerIndex == 2){\\n            self.requestDetails[_requestId].inDispute[_timestamp] = true;\\n        }\\n        self.stakerDetails[_miner].currentStatus = 3;\\n        emit NewDispute(disputeId,_requestId,_timestamp,_miner);\\n    }\\n\\n\\n    /**\\n    * @dev Allows token holders to vote\\n    * @param _disputeId is the dispute id\\n    * @param _supportsDispute is the vote (true=the dispute has basis false = vote against dispute)\\n    */\\n    function vote(ZapStorage.ZapStorageStruct storage self, uint _disputeId, bool _supportsDispute) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        \\n        //Get the voteWeight or the balance of the user at the time/blockNumber the disupte began\\n        uint voteWeight = ZapTransfer.balanceOfAt(self,msg.sender,disp.disputeUintVars[keccak256(\\\"blockNumber\\\")]);\\n        \\n        //Require that the msg.sender has not voted\\n        require(disp.voted[msg.sender] != true);\\n        \\n        //Requre that the user had a balance >0 at time/blockNumber the disupte began\\n        require(voteWeight > 0);\\n        \\n        //ensures miners that are under dispute cannot vote\\n        require(self.stakerDetails[msg.sender].currentStatus != 3);\\n        \\n        //Update user voting status to true\\n        disp.voted[msg.sender] = true;\\n        \\n        //Update the number of votes for the dispute\\n        disp.disputeUintVars[keccak256(\\\"numberOfVotes\\\")] += 1;\\n        \\n        //Update the quorum by adding the voteWeight\\n        disp.disputeUintVars[keccak256(\\\"quorum\\\")] += voteWeight; \\n        \\n        //If the user supports the dispute increase the tally for the dispute by the voteWeight\\n        //otherwise decrease it\\n        if (_supportsDispute) {\\n            disp.tally = disp.tally + int(voteWeight);\\n        } else {\\n            disp.tally = disp.tally - int(voteWeight);\\n        }\\n        \\n        //Let the network know the user has voted on the dispute and their casted vote\\n        emit Voted(_disputeId,_supportsDispute,msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev tallies the votes.\\n    * @param _disputeId is the dispute id\\n    */\\n    function tallyVotes(ZapStorage.ZapStorageStruct storage self, uint _disputeId) public {\\n        ZapStorage.Dispute storage disp = self.disputesById[_disputeId];\\n        ZapStorage.Request storage _request = self.requestDetails[disp.disputeUintVars[keccak256(\\\"requestId\\\")]];\\n\\n        //Ensure this has not already been executed/tallied\\n        require(disp.executed == false);\\n\\n        //Ensure the time for voting has elapsed\\n        require(now > disp.disputeUintVars[keccak256(\\\"minExecutionDate\\\")]);  \\n\\n        //If the vote is not a proposed fork \\n        if (disp.isPropFork== false){\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[disp.reportedMiner];  \\n            //If the vote for disputing a value is succesful(disp.tally >0) then unstake the reported \\n            // miner and transfer the stakeAmount and dispute fee to the reporting party \\n            if (disp.tally > 0 ) { \\n\\n                //Changing the currentStatus and startDate unstakes the reported miner and allows for the\\n                //transfer of the stakeAmount\\n                stakes.currentStatus = 0;\\n                stakes.startDate = now -(now % 86400);\\n\\n                //Decreases the stakerCount since the miner's stake is being slashed\\n                self.uintVars[keccak256(\\\"stakerCount\\\")]--;\\n                updateDisputeFee(self);\\n\\n                //Transfers the StakeAmount from the reporded miner to the reporting party\\n                ZapTransfer.doTransfer(self, disp.reportedMiner,disp.reportingParty, self.uintVars[keccak256(\\\"stakeAmount\\\")]);\\n                \\n                //Returns the dispute fee to the reportingParty\\n                ZapTransfer.doTransfer(self, address(this),disp.reportingParty,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                \\n                //Set the dispute state to passed/true\\n                disp.disputeVotePassed = true;\\n\\n                //If the dispute was succeful(miner found guilty) then update the timestamp value to zero\\n                //so that users don't use this datapoint\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.finalValues[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = 0;\\n                }\\n\\n            //If the vote for disputing a value is unsuccesful then update the miner status from being on \\n            //dispute(currentStatus=3) to staked(currentStatus =1) and tranfer the dispute fee to the miner\\n            } else {\\n                //Update the miner's current status to staked(currentStatus = 1)\\n                stakes.currentStatus = 1;              \\n                //tranfer the dispute fee to the miner\\n                ZapTransfer.doTransfer(self,address(this),disp.reportedMiner,disp.disputeUintVars[keccak256(\\\"fee\\\")]);\\n                if(_request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] == true){\\n                    _request.inDispute[disp.disputeUintVars[keccak256(\\\"timestamp\\\")]] = false;\\n                }\\n            }\\n        //If the vote is for a proposed fork require a 20% quorum before exceduting the update to the new zap contract address\\n        } else {\\n            if(disp.tally > 0 ){\\n                require(disp.disputeUintVars[keccak256(\\\"quorum\\\")] >  (self.uintVars[keccak256(\\\"total_supply\\\")] * 20 / 100));\\n                self.addressVars[keccak256(\\\"zapContract\\\")] = disp.proposedForkAddress;\\n                disp.disputeVotePassed = true;\\n                emit NewZapAddress(disp.proposedForkAddress);\\n            }\\n        }\\n        \\n        //update the dispute status to executed\\n        disp.executed = true;\\n        emit DisputeVoteTallied(_disputeId,disp.tally,disp.reportedMiner,disp.reportingParty,disp.disputeVotePassed);\\n    }\\n\\n\\n    /**\\n    * @dev Allows for a fork to be proposed\\n    * @param _propNewZapAddress address for new proposed Zap\\n    */\\n    function proposeFork(ZapStorage.ZapStorageStruct storage self, address _propNewZapAddress) public {\\n        bytes32 _hash = keccak256(abi.encodePacked(_propNewZapAddress));\\n        require(self.disputeIdByDisputeHash[_hash] == 0);\\n        ZapTransfer.doTransfer(self, msg.sender,address(this), self.uintVars[keccak256(\\\"disputeFee\\\")]);//This is the fork fee\\n        self.uintVars[keccak256(\\\"disputeCount\\\")]++;\\n        uint disputeId = self.uintVars[keccak256(\\\"disputeCount\\\")];\\n        self.disputeIdByDisputeHash[_hash] = disputeId;\\n        self.disputesById[disputeId] = ZapStorage.Dispute({\\n            hash: _hash,\\n            isPropFork: true,\\n            reportedMiner: msg.sender, \\n            reportingParty: msg.sender, \\n            proposedForkAddress: _propNewZapAddress,\\n            executed: false,\\n            disputeVotePassed: false,\\n            tally: 0\\n            }); \\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"blockNumber\\\")] = block.number;\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"fee\\\")]  = self.uintVars[keccak256(\\\"disputeFee\\\")];\\n        self.disputesById[disputeId].disputeUintVars[keccak256(\\\"minExecutionDate\\\")] = now + 7 days;\\n    }\\n    \\n\\n    /**\\n    * @dev this function allows the dispute fee to fluctuate based on the number of miners on the system.\\n    * The floor for the fee is 15e18.\\n    */\\n    function updateDisputeFee(ZapStorage.ZapStorageStruct storage self) public {\\n            //if the number of staked miners divided by the target count of staked miners is less than 1\\n            if(self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")] < 1000){\\n                //Set the dispute fee at stakeAmt * (1- stakerCount/targetMiners)\\n                //or at the its minimum of 15e18 \\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = SafeMathM.max(15e18,self.uintVars[keccak256(\\\"stakeAmount\\\")].mul(1000 - self.uintVars[keccak256(\\\"stakerCount\\\")]*1000/self.uintVars[keccak256(\\\"targetMiners\\\")])/1000);\\n            }\\n            else{\\n                //otherwise set the dispute fee at 15e18 (the floor/minimum fee allowed)\\n                self.uintVars[keccak256(\\\"disputeFee\\\")] = 15e18;\\n            }\\n    }\\n}\\n\",\"keccak256\":\"0x06cb29c92743acc7974e8615118cd9d1365f8d7816e1bc101b41f0830ef44a4d\"},\"contracts/libraries/ZapStake.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ZapStorage.sol\\\";\\nimport \\\"./ZapTransfer.sol\\\";\\nimport \\\"./ZapDispute.sol\\\";\\n\\n/**\\n* @title Zap Dispute\\n* @dev Contais the methods related to miners staking and unstaking. Zap.sol \\n* references this library for function's logic.\\n*/\\n\\nlibrary ZapStake {\\n    event NewStake(address indexed _sender);//Emits upon new staker\\n    event StakeWithdrawn(address indexed _sender);//Emits when a staker is now no longer staked\\n    event StakeWithdrawRequested(address indexed _sender);//Emits when a staker begins the 7 day withdraw period\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev This function stakes the five initial miners, sets the supply and all the constant variables.\\n    * This function is called by the constructor function on ZapMaster.sol\\n    */\\n    function init(ZapStorage.ZapStorageStruct storage self) public{\\n        require(self.uintVars[keccak256(\\\"decimals\\\")] == 0);\\n        //Give this contract 6000 Zap Token so that it can stake the initial 6 miners\\n        ZapTransfer.updateBalanceAtNow(self.balances[address(this)], 2**256-1 - 6000e18);\\n\\n        // //the initial 5 miner addresses are specfied below\\n        // //changed payable[5] to 6\\n        address payable[6] memory _initalMiners = [\\n            address(0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097),\\n            address(0xcd3B766CCDd6AE721141F452C550Ca635964ce71),\\n            address(0x2546BcD3c84621e976D8185a91A922aE77ECEc30),\\n            address(0xbDA5747bFD65F08deb54cb465eB87D40e51B197E),\\n            address(0xdD2FD4581271e230360230F9337D5c0430Bf44C0),\\n            address(0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199)\\n        ];\\n        //Stake each of the 5 miners specified above\\n        for(uint i=0;i<6;i++){//6th miner to allow for dispute\\n            //Miner balance is set at 1000e18 at the block that this function is ran\\n            ZapTransfer.updateBalanceAtNow(self.balances[_initalMiners[i]],1000e18);\\n\\n            newStake(self, _initalMiners[i]);\\n        }\\n\\n        //update the total suppply\\n        self.uintVars[keccak256(\\\"total_supply\\\")] += 6000e18;//6th miner to allow for dispute\\n        //set Constants\\n        self.uintVars[keccak256(\\\"decimals\\\")] = 18;\\n        self.uintVars[keccak256(\\\"targetMiners\\\")] = 200;\\n        self.uintVars[keccak256(\\\"stakeAmount\\\")] = 1000e18;\\n        self.uintVars[keccak256(\\\"disputeFee\\\")] = 970e18;\\n        self.uintVars[keccak256(\\\"timeTarget\\\")]= 600;\\n        self.uintVars[keccak256(\\\"timeOfLastNewValue\\\")] = now - now  % self.uintVars[keccak256(\\\"timeTarget\\\")];\\n        self.uintVars[keccak256(\\\"difficulty\\\")] = 1;\\n    }\\n\\n\\n    /**\\n    * @dev This function allows stakers to request to withdraw their stake (no longer stake)\\n    * once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they\\n    * can withdraw the deposit\\n    */\\n    function requestStakingWithdraw(ZapStorage.ZapStorageStruct storage self) public {\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\\n        //Require that the miner is staked\\n        require(stakes.currentStatus == 1);\\n\\n        //Change the miner staked to locked to be withdrawStake\\n        stakes.currentStatus = 2;\\n\\n        //Change the startDate to now since the lock up period begins now\\n        //and the miner can only withdraw 7 days later from now(check the withdraw function)\\n        stakes.startDate = now -(now % 86400);\\n\\n        //Reduce the staker count\\n        self.uintVars[keccak256(\\\"stakerCount\\\")] -= 1;\\n        ZapDispute.updateDisputeFee(self);\\n        emit StakeWithdrawRequested(msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows users to withdraw their stake after a 7 day waiting period from request \\n    */\\n    function withdrawStake(ZapStorage.ZapStorageStruct storage self) public {\\n        ZapStorage.StakeInfo storage stakes = self.stakerDetails[msg.sender];\\n        //Require the staker has locked for withdraw(currentStatus ==2) and that 7 days have \\n        //passed by since they locked for withdraw\\n        require(now - (now % 86400) - stakes.startDate >= 7 days);\\n        require(stakes.currentStatus == 2);\\n        stakes.currentStatus = 0;\\n        emit StakeWithdrawn(msg.sender);\\n    }\\n\\n\\n    /**\\n    * @dev This function allows miners to deposit their stake.\\n    */\\n    function depositStake(ZapStorage.ZapStorageStruct storage self) public {\\n      newStake(self, msg.sender);\\n      //self adjusting disputeFee\\n      ZapDispute.updateDisputeFee(self);\\n    }\\n\\n    /**\\n    * @dev This function is used by the init function to succesfully stake the initial 5 miners.\\n    * The function updates their status/state and status start date so they are locked it so they can't withdraw\\n    * and updates the number of stakers in the system.\\n    */\\n    function newStake(ZapStorage.ZapStorageStruct storage self, address staker) internal {\\n        require(ZapTransfer.balanceOf(self,staker) >= self.uintVars[keccak256(\\\"stakeAmount\\\")]);\\n        //Ensure they can only stake if they are not currrently staked or if their stake time frame has ended\\n        //and they are currently locked for witdhraw\\n        require(self.stakerDetails[staker].currentStatus == 0 || self.stakerDetails[staker].currentStatus == 2);\\n        self.uintVars[keccak256(\\\"stakerCount\\\")] += 1;\\n        self.stakerDetails[staker] = ZapStorage.StakeInfo({\\n            currentStatus: 1,\\n            //this resets their stake start date to today\\n            startDate: now - (now % 86400)\\n        });\\n        emit NewStake(staker);\\n    }\\n}\\n\",\"keccak256\":\"0xea613dc19066e26a290d642332457603f83e7164b0701ec61fa42157749b75cf\"},\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"},\"contracts/libraries/ZapTransfer.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\n\\n/**\\n* @title Zap Transfer\\n* @dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\\n* reference this library for function's logic.\\n*/\\nlibrary ZapTransfer {\\n    using SafeMathM for uint256;\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);//ERC20 Approval event\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);//ERC20 Transfer Event\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Allows for a transfer of tokens to _to\\n    * @param _to The address to send tokens to\\n    * @param _amount The amount of tokens to send\\n    * @return true if transfer is successful\\n    */\\n    function transfer(ZapStorage.ZapStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\\n        doTransfer(self,msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @notice Send _amount tokens to _to from _from on the condition it\\n    * is approved by _from\\n    * @param _from The address holding the tokens being transferred\\n    * @param _to The address of the recipient\\n    * @param _amount The amount of tokens to be transferred\\n    * @return True if the transfer was successful\\n    */\\n    function transferFrom(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint256 _amount) public returns (bool success) {\\n        require(self.allowed[_from][msg.sender] >= _amount);\\n        self.allowed[_from][msg.sender] -= _amount;\\n        doTransfer(self,_from, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @dev This function approves a _spender an _amount of tokens to use\\n    * @param _spender address\\n    * @param _amount amount the spender is being approved for\\n    * @return true if spender appproved successfully\\n    */\\n    function approve(ZapStorage.ZapStorageStruct storage self, address _spender, uint _amount) public returns (bool) {\\n        require(allowedToTrade(self,msg.sender,_amount));\\n        require(_spender != address(0));\\n        self.allowed[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @param _user address of party with the balance\\n    * @param _spender address of spender of parties said balance\\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\\n    */\\n    function allowance(ZapStorage.ZapStorageStruct storage self,address _user, address _spender) public view returns (uint) {\\n       \\n       return self.allowed[_user][_spender]; \\n    }\\n\\n\\n    /**\\n    * @dev Completes POWO transfers by updating the balances on the current block number\\n    * @param _from address to transfer from\\n    * @param _to addres to transfer to\\n    * @param _amount to transfer\\n    */\\n    function doTransfer(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint _amount) public {\\n        require(_amount > 0);\\n        require(_to != address(0));\\n        require(allowedToTrade(self,_from,_amount)); //allowedToTrade checks the stakeAmount is removed from balance if the _user is staked\\n        uint previousBalance = balanceOfAt(self,_from, block.number);\\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\\n        previousBalance = balanceOfAt(self,_to, block.number);\\n        require(previousBalance + _amount >= previousBalance); // Check for overflow\\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n\\n    /**\\n    * @dev Gets balance of owner specified\\n    * @param _user is the owner address used to look up the balance\\n    * @return Returns the balance associated with the passed in _user\\n    */\\n    function balanceOf(ZapStorage.ZapStorageStruct storage self,address _user) public view returns (uint) {\\n        return balanceOfAt(self,_user, block.number);\\n    }\\n\\n\\n    /**\\n    * @dev Queries the balance of _user at a specific _blockNumber\\n    * @param _user The address from which the balance will be retrieved\\n    * @param _blockNumber The block number when the balance is queried\\n    * @return The balance at _blockNumber specified\\n    */\\n    function balanceOfAt(ZapStorage.ZapStorageStruct storage self,address _user, uint _blockNumber) public view returns (uint) {\\n        if ((self.balances[_user].length == 0) || (self.balances[_user][0].fromBlock > _blockNumber)) {\\n                return 0;\\n        }\\n     else {\\n        return getBalanceAt(self.balances[_user], _blockNumber);\\n     }\\n    }\\n\\n\\n    /**\\n    * @dev Getter for balance for owner on the specified _block number\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _block is the block number to search the balance on\\n    * @return the balance at the checkpoint\\n    */\\n    function getBalanceAt(ZapStorage.Checkpoint[] storage checkpoints, uint _block) view public returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n\\n    /**\\n    * @dev This function returns whether or not a given user is allowed to trade a given amount \\n    * and removing the staked amount from their balance if they are staked\\n    * @param _user address of user\\n    * @param _amount to check if the user can spend\\n    * @return true if they are allowed to spend the amount being checked\\n    */\\n    function allowedToTrade(ZapStorage.ZapStorageStruct storage self,address _user,uint _amount) public view returns(bool) {\\n        if(self.stakerDetails[_user].currentStatus >0){\\n            //Removes the stakeAmount from balance if the _user is staked\\n            if(balanceOf(self,_user).sub(self.uintVars[keccak256(\\\"stakeAmount\\\")]).sub(_amount) >= 0){\\n                return true;\\n            }\\n        }\\n        else if(balanceOf(self,_user).sub(_amount) >= 0){\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n\\n    /**\\n    * @dev Updates balance for from and to on the current block number via doTransfer\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _value is the new balance\\n    */\\n    function updateBalanceAtNow(ZapStorage.Checkpoint[] storage checkpoints, uint _value) public {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               ZapStorage.Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n        } else {\\n               ZapStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87399d0a6627e7413463f1df4e20cd3b6a9cbe459d826b096abf253a6f649748\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/ZapStorage.sol": {
        "ZapStorage": {
          "abi": [],
          "devdoc": {
            "details": "Contains all the variables/structs used by Zap",
            "methods": {},
            "title": "Zap Oracle Storage Library"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820c5e7025cd397133f9d7833605eaacadb024174a9a7c472f3bee0de07ed33d98f0029",
              "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc5 0xe7 MUL 0x5c 0xd3 SWAP8 SGT EXTCODEHASH SWAP14 PUSH25 0x33605EAACADB024174A9A7C472F3BEE0DE07ED33D98F002900 ",
              "sourceMap": "171:6874:9:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820c5e7025cd397133f9d7833605eaacadb024174a9a7c472f3bee0de07ed33d98f0029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xc5 0xe7 MUL 0x5c 0xd3 SWAP8 SGT EXTCODEHASH SWAP14 PUSH25 0x33605EAACADB024174A9A7C472F3BEE0DE07ED33D98F002900 ",
              "sourceMap": "171:6874:9:-;;;;;;;;"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "15200",
                "executionCost": "116",
                "totalCost": "15316"
              }
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contains all the variables/structs used by Zap\",\"methods\":{},\"title\":\"Zap Oracle Storage Library\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZapStorage.sol\":\"ZapStorage\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"}},\"version\":1}",
          "userdoc": {
            "methods": {}
          }
        }
      },
      "contracts/libraries/ZapTransfer.sol": {
        "ZapTransfer": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "name": "checkpoints",
                  "type": "ZapStorage.Checkpoint[] storage"
                },
                {
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "updateBalanceAtNow",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "checkpoints",
                  "type": "ZapStorage.Checkpoint[] storage"
                },
                {
                  "name": "_block",
                  "type": "uint256"
                }
              ],
              "name": "getBalanceAt",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "doTransfer",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "allowedToTrade",
              "outputs": [
                {
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_blockNumber",
                  "type": "uint256"
                }
              ],
              "name": "balanceOfAt",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_from",
                  "type": "address"
                },
                {
                  "name": "_to",
                  "type": "address"
                },
                {
                  "name": "_amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "name": "success",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_user",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "constant": true,
              "inputs": [
                {
                  "name": "self",
                  "type": "ZapStorage.ZapStorageStruct storage"
                },
                {
                  "name": "_user",
                  "type": "address"
                },
                {
                  "name": "_spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "name": "",
                  "type": "uint256"
                }
              ],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "_spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "name": "_from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "name": "_to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "name": "_value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol reference this library for function's logic.",
            "methods": {
              "allowance(ZapStorage.ZapStorageStruct storage,address,address)": {
                "params": {
                  "_spender": "address of spender of parties said balance",
                  "_user": "address of party with the balance"
                },
                "return": "Returns the remaining allowance of tokens granted to the _spender from the _user"
              },
              "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)": {
                "details": "This function returns whether or not a given user is allowed to trade a given amount  and removing the staked amount from their balance if they are staked",
                "params": {
                  "_amount": "to check if the user can spend",
                  "_user": "address of user"
                },
                "return": "true if they are allowed to spend the amount being checked"
              },
              "approve(ZapStorage.ZapStorageStruct storage,address,uint256)": {
                "details": "This function approves a _spender an _amount of tokens to use",
                "params": {
                  "_amount": "amount the spender is being approved for",
                  "_spender": "address"
                },
                "return": "true if spender appproved successfully"
              },
              "balanceOf(ZapStorage.ZapStorageStruct storage,address)": {
                "details": "Gets balance of owner specified",
                "params": {
                  "_user": "is the owner address used to look up the balance"
                },
                "return": "Returns the balance associated with the passed in _user"
              },
              "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)": {
                "details": "Queries the balance of _user at a specific _blockNumber",
                "params": {
                  "_blockNumber": "The block number when the balance is queried",
                  "_user": "The address from which the balance will be retrieved"
                },
                "return": "The balance at _blockNumber specified"
              },
              "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)": {
                "details": "Completes POWO transfers by updating the balances on the current block number",
                "params": {
                  "_amount": "to transfer",
                  "_from": "address to transfer from",
                  "_to": "addres to transfer to"
                }
              },
              "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)": {
                "details": "Getter for balance for owner on the specified _block number",
                "params": {
                  "_block": "is the block number to search the balance on",
                  "checkpoints": "gets the mapping for the balances[owner]"
                },
                "return": "the balance at the checkpoint"
              },
              "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)": {
                "details": "Allows for a transfer of tokens to _to",
                "params": {
                  "_amount": "The amount of tokens to send",
                  "_to": "The address to send tokens to"
                },
                "return": "true if transfer is successful"
              },
              "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)": {
                "params": {
                  "_amount": "The amount of tokens to be transferred",
                  "_from": "The address holding the tokens being transferred",
                  "_to": "The address of the recipient"
                },
                "return": "True if the transfer was successful"
              },
              "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)": {
                "details": "Updates balance for from and to on the current block number via doTransfer",
                "params": {
                  "_value": "is the new balance",
                  "checkpoints": "gets the mapping for the balances[owner]"
                }
              }
            },
            "title": "Zap Transfer"
          },
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "61109c610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b5576000357c0100000000000000000000000000000000000000000000000000000000900480632dfd8908146100ba5780637e781a9e146100ff57806382c1fecb1461017c5780639a07de1f146101c8578063a93a4d0314610245578063b9290ca5146102ca578063c6f7efe01461033a578063ed1034e2146103a6578063f07528dd14610443578063fade3342146104a5575b600080fd5b8180156100c657600080fd5b506100fd600480360360408110156100dd57600080fd5b810190808035906020019092919080359060200190929190505050610527565b005b81801561010b57600080fd5b506101626004803603606081101561012257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069c565b604051808215151515815260200191505060405180910390f35b6101b26004803603604081101561019257600080fd5b8101908080359060200190929190803590602001909291905050506107e3565b6040518082815260200191505060405180910390f35b8180156101d457600080fd5b5061022b600480360360608110156101eb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109f2565b604051808215151515815260200191505060405180910390f35b81801561025157600080fd5b506102c86004803603608081101561026857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a0b565b005b610320600480360360608110156102e057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b9d565b604051808215151515815260200191505060405180910390f35b6103906004803603606081101561035057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cb5565b6040518082815260200191505060405180910390f35b8180156103b257600080fd5b50610429600480360360808110156103c957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df4565b604051808215151515815260200191505060405180910390f35b61048f6004803603604081101561045957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f27565b6040518082815260200191505060405180910390f35b610511600480360360608110156104bb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3c565b6040518082815260200191505060405180910390f35b60008280549050148061058957504382600184805490500381548110151561054b57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15610638576000828380548091906001016105a49190610fdf565b8154811015156105b057fe5b906000526020600020019050438160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050610698565b600082600184805490500381548110151561064f57fe5b906000526020600020019050818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b5050565b60006106a9843384610b9d565b15156106b457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f057600080fd5b818460460160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190509392505050565b600080838054905014156107fa57600090506109ec565b82600184805490500381548110151561080f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16821015156108ab5782600184805490500381548110151561086857fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506109ec565b8260008154811015156108ba57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1682101561090657600090506109ec565b60008090506000600185805490500390505b8181111561099d576000600260018484010181151561093357fe5b04905084868281548110151561094557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611151561099057809250610997565b6001810391505b50610918565b84828154811015156109ab57fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16925050505b92915050565b6000610a0084338585610a0b565b600190509392505050565b600081111515610a1a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5657600080fd5b610a61848483610b9d565b1515610a6c57600080fd5b6000610a79858543610cb5565b9050610ac78560450160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838303610527565b610ad2858443610cb5565b90508082820110151515610ae557600080fd5b610b318560450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838301610527565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050505050565b6000808460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610c7a576000610c6583610c5787604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054610c498989610f27565b610fc690919063ffffffff16565b610fc690919063ffffffff16565b101515610c755760019050610cae565b610ca9565b6000610c9883610c8a8787610f27565b610fc690919063ffffffff16565b101515610ca85760019050610cae565b5b600090505b9392505050565b6000808460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480610d925750818460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815481101515610d5457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15610da05760009050610ded565b610dea8460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836107e3565b90505b9392505050565b6000818560460160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e8357600080fd5b818560460160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610f1b85858585610a0b565b60019050949350505050565b6000610f34838343610cb5565b905092915050565b60008360460160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b6000828211151515610fd457fe5b818303905092915050565b81548183558181111561100657818360005260206000209182019101611005919061100b565b5b505050565b61106d91905b8082111561106957600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101611011565b5090565b9056fea165627a7a723058206023db62afe446fff32a6989d84e9b1733b1f5afe350aedbe749ebf07206a2db0029",
              "opcodes": "PUSH2 0x109C PUSH2 0x30 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH2 0x20 JUMPI PUSH2 0x22 JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x2DFD8908 EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0x7E781A9E EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x82C1FECB EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x9A07DE1F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA93A4D03 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xB9290CA5 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xC6F7EFE0 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0xED1034E2 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xF07528DD EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xFADE3342 EQ PUSH2 0x4A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x527 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA0B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x511 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP3 DUP1 SLOAD SWAP1 POP EQ DUP1 PUSH2 0x589 JUMPI POP NUMBER DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x54B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP3 DUP4 DUP1 SLOAD DUP1 SWAP2 SWAP1 PUSH1 0x1 ADD PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0xFDF JUMP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5B0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP NUMBER DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x698 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A9 DUP5 CALLER DUP5 PUSH2 0xB9D JUMP JUMPDEST ISZERO ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 PUSH1 0x46 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x80F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO ISZERO PUSH2 0x8AB JUMPI DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x868 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x8BA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP6 DUP1 SLOAD SWAP1 POP SUB SWAP1 POP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x99D JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 DUP5 DUP5 ADD ADD DUP2 ISZERO ISZERO PUSH2 0x933 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x945 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO ISZERO PUSH2 0x990 JUMPI DUP1 SWAP3 POP PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB SWAP2 POP JUMPDEST POP PUSH2 0x918 JUMP JUMPDEST DUP5 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x9AB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA00 DUP5 CALLER DUP6 DUP6 PUSH2 0xA0B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT ISZERO ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA61 DUP5 DUP5 DUP4 PUSH2 0xB9D JUMP JUMPDEST ISZERO ISZERO PUSH2 0xA6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA79 DUP6 DUP6 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC7 DUP6 PUSH1 0x45 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 SUB PUSH2 0x527 JUMP JUMPDEST PUSH2 0xAD2 DUP6 DUP5 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP3 ADD LT ISZERO ISZERO ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB31 DUP6 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 ADD PUSH2 0x527 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 PUSH2 0xC65 DUP4 PUSH2 0xC57 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xC49 DUP10 DUP10 PUSH2 0xF27 JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO ISZERO PUSH2 0xC75 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xCAE JUMP JUMPDEST PUSH2 0xCA9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC98 DUP4 PUSH2 0xC8A DUP8 DUP8 PUSH2 0xF27 JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO ISZERO PUSH2 0xCA8 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xCAE JUMP JUMPDEST JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP EQ DUP1 PUSH2 0xD92 JUMPI POP DUP2 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xD54 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT JUMPDEST ISZERO PUSH2 0xDA0 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xDED JUMP JUMPDEST PUSH2 0xDEA DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH2 0x7E3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP6 PUSH1 0x46 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO ISZERO ISZERO PUSH2 0xE83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 PUSH1 0x46 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF1B DUP6 DUP6 DUP6 DUP6 PUSH2 0xA0B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP4 DUP4 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x46 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0xFD4 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x1006 JUMPI DUP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1005 SWAP2 SWAP1 PUSH2 0x100B JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x106D SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1069 JUMPI PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1011 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH1 0x23 0xdb PUSH3 0xAFE446 SELFDESTRUCT RETURN 0x2a PUSH10 0x89D84E9B1733B1F5AFE3 POP 0xae 0xdb 0xe7 0x49 0xeb CREATE PUSH19 0x6A2DB00290000000000000000000000000000 ",
              "sourceMap": "241:7039:10:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "73000000000000000000000000000000000000000030146080604052600436106100b5576000357c0100000000000000000000000000000000000000000000000000000000900480632dfd8908146100ba5780637e781a9e146100ff57806382c1fecb1461017c5780639a07de1f146101c8578063a93a4d0314610245578063b9290ca5146102ca578063c6f7efe01461033a578063ed1034e2146103a6578063f07528dd14610443578063fade3342146104a5575b600080fd5b8180156100c657600080fd5b506100fd600480360360408110156100dd57600080fd5b810190808035906020019092919080359060200190929190505050610527565b005b81801561010b57600080fd5b506101626004803603606081101561012257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061069c565b604051808215151515815260200191505060405180910390f35b6101b26004803603604081101561019257600080fd5b8101908080359060200190929190803590602001909291905050506107e3565b6040518082815260200191505060405180910390f35b8180156101d457600080fd5b5061022b600480360360608110156101eb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109f2565b604051808215151515815260200191505060405180910390f35b81801561025157600080fd5b506102c86004803603608081101561026857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a0b565b005b610320600480360360608110156102e057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b9d565b604051808215151515815260200191505060405180910390f35b6103906004803603606081101561035057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cb5565b6040518082815260200191505060405180910390f35b8180156103b257600080fd5b50610429600480360360808110156103c957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610df4565b604051808215151515815260200191505060405180910390f35b61048f6004803603604081101561045957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f27565b6040518082815260200191505060405180910390f35b610511600480360360608110156104bb57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3c565b6040518082815260200191505060405180910390f35b60008280549050148061058957504382600184805490500381548110151561054b57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16105b15610638576000828380548091906001016105a49190610fdf565b8154811015156105b057fe5b906000526020600020019050438160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050610698565b600082600184805490500381548110151561064f57fe5b906000526020600020019050818160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b5050565b60006106a9843384610b9d565b15156106b457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156106f057600080fd5b818460460160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190509392505050565b600080838054905014156107fa57600090506109ec565b82600184805490500381548110151561080f57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16821015156108ab5782600184805490500381548110151561086857fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1690506109ec565b8260008154811015156108ba57fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1682101561090657600090506109ec565b60008090506000600185805490500390505b8181111561099d576000600260018484010181151561093357fe5b04905084868281548110151561094557fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611151561099057809250610997565b6001810391505b50610918565b84828154811015156109ab57fe5b9060005260206000200160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16925050505b92915050565b6000610a0084338585610a0b565b600190509392505050565b600081111515610a1a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610a5657600080fd5b610a61848483610b9d565b1515610a6c57600080fd5b6000610a79858543610cb5565b9050610ac78560450160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838303610527565b610ad2858443610cb5565b90508082820110151515610ae557600080fd5b610b318560450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838301610527565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050505050565b6000808460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610c7a576000610c6583610c5787604001600060405180807f7374616b65416d6f756e74000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054610c498989610f27565b610fc690919063ffffffff16565b610fc690919063ffffffff16565b101515610c755760019050610cae565b610ca9565b6000610c9883610c8a8787610f27565b610fc690919063ffffffff16565b101515610ca85760019050610cae565b5b600090505b9392505050565b6000808460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490501480610d925750818460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815481101515610d5457fe5b9060005260206000200160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16115b15610da05760009050610ded565b610dea8460450160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020836107e3565b90505b9392505050565b6000818560460160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515610e8357600080fd5b818560460160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550610f1b85858585610a0b565b60019050949350505050565b6000610f34838343610cb5565b905092915050565b60008360460160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490509392505050565b6000828211151515610fd457fe5b818303905092915050565b81548183558181111561100657818360005260206000209182019101611005919061100b565b5b505050565b61106d91905b8082111561106957600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550600101611011565b5090565b9056fea165627a7a723058206023db62afe446fff32a6989d84e9b1733b1f5afe350aedbe749ebf07206a2db0029",
              "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x2DFD8908 EQ PUSH2 0xBA JUMPI DUP1 PUSH4 0x7E781A9E EQ PUSH2 0xFF JUMPI DUP1 PUSH4 0x82C1FECB EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x9A07DE1F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA93A4D03 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xB9290CA5 EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xC6F7EFE0 EQ PUSH2 0x33A JUMPI DUP1 PUSH4 0xED1034E2 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xF07528DD EQ PUSH2 0x443 JUMPI DUP1 PUSH4 0xFADE3342 EQ PUSH2 0x4A5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFD PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x527 JUMP JUMPDEST STOP JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x10B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x69C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x9F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2C8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xA0B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x390 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x350 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCB5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 DUP1 ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x429 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDF4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x48F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x459 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x511 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x4BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP3 DUP1 SLOAD SWAP1 POP EQ DUP1 PUSH2 0x589 JUMPI POP NUMBER DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x54B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND LT JUMPDEST ISZERO PUSH2 0x638 JUMPI PUSH1 0x0 DUP3 DUP4 DUP1 SLOAD DUP1 SWAP2 SWAP1 PUSH1 0x1 ADD PUSH2 0x5A4 SWAP2 SWAP1 PUSH2 0xFDF JUMP JUMPDEST DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x5B0 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP NUMBER DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x698 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x64F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 POP DUP2 DUP2 PUSH1 0x0 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6A9 DUP5 CALLER DUP5 PUSH2 0xB9D JUMP JUMPDEST ISZERO ISZERO PUSH2 0x6B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 PUSH1 0x46 ADD PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 SLOAD SWAP1 POP EQ ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x80F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO ISZERO PUSH2 0x8AB JUMPI DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP SUB DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x868 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST DUP3 PUSH1 0x0 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x8BA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 LT ISZERO PUSH2 0x906 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x9EC JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP6 DUP1 SLOAD SWAP1 POP SUB SWAP1 POP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x99D JUMPI PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 DUP5 DUP5 ADD ADD DUP2 ISZERO ISZERO PUSH2 0x933 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x945 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT ISZERO ISZERO PUSH2 0x990 JUMPI DUP1 SWAP3 POP PUSH2 0x997 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB SWAP2 POP JUMPDEST POP PUSH2 0x918 JUMP JUMPDEST DUP5 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0x9AB JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x10 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA00 DUP5 CALLER DUP6 DUP6 PUSH2 0xA0B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 GT ISZERO ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA61 DUP5 DUP5 DUP4 PUSH2 0xB9D JUMP JUMPDEST ISZERO ISZERO PUSH2 0xA6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA79 DUP6 DUP6 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP PUSH2 0xAC7 DUP6 PUSH1 0x45 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 SUB PUSH2 0x527 JUMP JUMPDEST PUSH2 0xAD2 DUP6 DUP5 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 DUP3 ADD LT ISZERO ISZERO ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB31 DUP6 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 DUP4 ADD PUSH2 0x527 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x47 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 PUSH2 0xC65 DUP4 PUSH2 0xC57 DUP8 PUSH1 0x40 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x7374616B65416D6F756E74000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0xB ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xC49 DUP10 DUP10 PUSH2 0xF27 JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO ISZERO PUSH2 0xC75 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xCAE JUMP JUMPDEST PUSH2 0xCA9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC98 DUP4 PUSH2 0xC8A DUP8 DUP8 PUSH2 0xF27 JUMP JUMPDEST PUSH2 0xFC6 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST LT ISZERO ISZERO PUSH2 0xCA8 JUMPI PUSH1 0x1 SWAP1 POP PUSH2 0xCAE JUMP JUMPDEST JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP EQ DUP1 PUSH2 0xD92 JUMPI POP DUP2 DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 0xD54 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT JUMPDEST ISZERO PUSH2 0xDA0 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xDED JUMP JUMPDEST PUSH2 0xDEA DUP5 PUSH1 0x45 ADD PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 PUSH2 0x7E3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP6 PUSH1 0x46 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD LT ISZERO ISZERO ISZERO PUSH2 0xE83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 PUSH1 0x46 ADD PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0xF1B DUP6 DUP6 DUP6 DUP6 PUSH2 0xA0B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF34 DUP4 DUP4 NUMBER PUSH2 0xCB5 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x46 ADD PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0xFD4 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 0x1006 JUMPI DUP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x1005 SWAP2 SWAP1 PUSH2 0x100B JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x106D SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1069 JUMPI PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x10 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1011 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH1 0x23 0xdb PUSH3 0xAFE446 SELFDESTRUCT RETURN 0x2a PUSH10 0x89D84E9B1733B1F5AFE3 POP 0xae 0xdb 0xe7 0x49 0xeb CREATE PUSH19 0x6A2DB00290000000000000000000000000000 ",
              "sourceMap": "241:7039:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6678:600;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6678:600:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6678:600:10;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1852:348;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1852:348:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1852:348:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4853:724;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4853:724:10;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;742:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;742:199:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;742:199:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2843:738;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2843:738:10;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2843:738:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5931:530;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5931:530:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4231:354;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4231:354:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1286:326;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1286:326:10;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1286:326:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3784:163;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3784:163:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2435:181;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2435:181:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6678:600;6808:1;6786:11;:18;;;;:23;6785:90;;;;6862:12;6815:11;6847:1;6827:11;:18;;;;:21;6815:34;;;;;;;;;;;;;;;;;:44;;;;;;;;;;;;:59;;;6785:90;6781:491;;;6894:43;6940:11;6953;:20;;;;;;;;;;;:::i;:::-;6940:35;;;;;;;;;;;;;;;;;6894:81;;7027:12;6992:13;:23;;;:48;;;;;;;;;;;;;;;;;;7087:6;7057:13;:19;;;:37;;;;;;;;;;;;;;;;;;6781:491;;;;7128:43;7174:11;7205:1;7186:11;:18;;;;:20;7174:33;;;;;;;;;;;;;;;;;7128:79;;7254:6;7224:13;:19;;;:37;;;;;;;;;;;;;;;;;;6781:491;;6678:600;;:::o;1852:348::-;1959:4;1983:39;1998:4;2003:10;2014:7;1983:14;:39::i;:::-;1975:48;;;;;;;;2061:1;2041:22;;:8;:22;;;;2033:31;;;;;;;;2111:7;2074:4;:12;;:24;2087:10;2074:24;;;;;;;;;;;;;;;:34;2099:8;2074:34;;;;;;;;;;;;;;;:44;;;;2154:8;2133:39;;2142:10;2133:39;;;2164:7;2133:39;;;;;;;;;;;;;;;;;;2189:4;2182:11;;1852:348;;;;;:::o;4853:724::-;4954:4;4996:1;4974:11;:18;;;;:23;4970:37;;;5006:1;4999:8;;;;4970:37;5031:11;5062:1;5043:11;:18;;;;:20;5031:33;;;;;;;;;;;;;;;;;:43;;;;;;;;;;;;5021:53;;:6;:53;;5017:117;;;5095:11;5126:1;5107:11;:18;;;;:20;5095:33;;;;;;;;;;;;;;;;;:39;;;;;;;;;;;;5088:46;;;;;;5017:117;5157:11;5169:1;5157:14;;;;;;;;;;;;;;;;;:24;;;;;;;;;;;;5148:33;;:6;:33;5144:47;;;5190:1;5183:8;;;;5144:47;5252:8;5263:1;5252:12;;5274:8;5304:1;5285:11;:18;;;;:20;5274:31;;5315:217;5328:3;5322;:9;5315:217;;;5347:8;5375:1;5371;5365:3;5359;:9;:13;5358:18;;;;;;;;5347:29;;5422:6;5394:11;5406:3;5394:16;;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;:34;;;;5390:132;;;5454:3;5448:9;;5390:132;;;5506:1;5502:3;:5;5496:11;;5390:132;5315:217;;;;5548:11;5560:3;5548:16;;;;;;;;;;;;;;;;;:22;;;;;;;;;;;;5541:29;;;;;;4853:724;;;;;:::o;742:199::-;848:12;872:41;883:4;888:10;900:3;905:7;872:10;:41::i;:::-;930:4;923:11;;742:199;;;;;:::o;2843:738::-;2982:1;2972:7;:11;2964:20;;;;;;;;3017:1;3002:17;;:3;:17;;;;2994:26;;;;;;;;3038:34;3053:4;3058:5;3064:7;3038:14;:34::i;:::-;3030:43;;;;;;;;3170:20;3193:37;3205:4;3210:5;3217:12;3193:11;:37::i;:::-;3170:60;;3240:67;3259:4;:13;;:20;3273:5;3259:20;;;;;;;;;;;;;;;3299:7;3281:15;:25;3240:18;:67::i;:::-;3335:35;3347:4;3352:3;3357:12;3335:11;:35::i;:::-;3317:53;;3417:15;3406:7;3388:15;:25;:44;;3380:53;;;;;;;;3465:65;3484:4;:13;;:18;3498:3;3484:18;;;;;;;;;;;;;;;3522:7;3504:15;:25;3465:18;:65::i;:::-;3561:3;3545:29;;3554:5;3545:29;;;3566:7;3545:29;;;;;;;;;;;;;;;;;;2843:738;;;;;:::o;5931:530::-;6044:4;6104:1;6063:4;:18;;:25;6082:5;6063:25;;;;;;;;;;;;;;;:39;;;:42;6060:373;;;6280:1;6197:79;6268:7;6197:66;6223:4;:13;;:39;6237:24;;;;;;;;;;;;;;;;;;;6223:39;;;;;;;;;;;;6197:21;6207:4;6212:5;6197:9;:21::i;:::-;:25;;:66;;;;:::i;:::-;:70;;:79;;;;:::i;:::-;:84;;6194:132;;;6307:4;6300:11;;;;6194:132;6060:373;;;6391:1;6353:34;6379:7;6353:21;6363:4;6368:5;6353:9;:21::i;:::-;:25;;:34;;;;:::i;:::-;:39;;6350:83;;;6418:4;6411:11;;;;6350:83;6060:373;6449:5;6442:12;;5931:530;;;;;;:::o;4231:354::-;4348:4;4400:1;4369:4;:13;;:20;4383:5;4369:20;;;;;;;;;;;;;;;:27;;;;:32;4368:88;;;;4443:12;4407:4;:13;;:20;4421:5;4407:20;;;;;;;;;;;;;;;4428:1;4407:23;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;:48;;;4368:88;4364:215;;;4483:1;4476:8;;;;4364:215;4523:48;4536:4;:13;;:20;4550:5;4536:20;;;;;;;;;;;;;;;4558:12;4523;:48::i;:::-;4516:55;;4231:354;;;;;;:::o;1286:326::-;1411:12;1478:7;1443:4;:12;;:19;1456:5;1443:19;;;;;;;;;;;;;;;:31;1463:10;1443:31;;;;;;;;;;;;;;;;:42;;1435:51;;;;;;;;1531:7;1496:4;:12;;:19;1509:5;1496:19;;;;;;;;;;;;;;;:31;1516:10;1496:31;;;;;;;;;;;;;;;;:42;;;;;;;;;;;1548:36;1559:4;1564:5;1571:3;1576:7;1548:10;:36::i;:::-;1601:4;1594:11;;1286:326;;;;;;:::o;3784:163::-;3880:4;3903:37;3915:4;3920:5;3927:12;3903:11;:37::i;:::-;3896:44;;3784:163;;;;:::o;2435:181::-;2549:4;2579;:12;;:19;2592:5;2579:19;;;;;;;;;;;;;;;:29;2599:8;2579:29;;;;;;;;;;;;;;;;2572:36;;2435:181;;;;;:::o;735:110:4:-;793:7;820:1;815;:6;;808:14;;;;;;839:1;835;:5;828:12;;735:110;;;;:::o;241:7039:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
            },
            "gasEstimates": {
              "creation": {
                "codeDepositCost": "850400",
                "executionCost": "934",
                "totalCost": "851334"
              },
              "external": {
                "allowance(ZapStorage.ZapStorageStruct storage,address,address)": "921",
                "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)": "infinite",
                "approve(ZapStorage.ZapStorageStruct storage,address,uint256)": "infinite",
                "balanceOf(ZapStorage.ZapStorageStruct storage,address)": "infinite",
                "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)": "infinite",
                "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)": "infinite",
                "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)": "infinite",
                "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)": "infinite",
                "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)": "infinite",
                "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)": "infinite"
              }
            },
            "methodIdentifiers": {
              "allowance(ZapStorage.ZapStorageStruct storage,address,address)": "fade3342",
              "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)": "b9290ca5",
              "approve(ZapStorage.ZapStorageStruct storage,address,uint256)": "7e781a9e",
              "balanceOf(ZapStorage.ZapStorageStruct storage,address)": "f07528dd",
              "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)": "c6f7efe0",
              "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)": "a93a4d03",
              "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)": "82c1fecb",
              "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)": "9a07de1f",
              "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)": "ed1034e2",
              "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)": "2dfd8908"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.1+commit.c8a2cb62\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"checkpoints\",\"type\":\"ZapStorage.Checkpoint[] storage\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateBalanceAtNow\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"checkpoints\",\"type\":\"ZapStorage.Checkpoint[] storage\"},{\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"getBalanceAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"doTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"self\",\"type\":\"ZapStorage.ZapStorageStruct storage\"},{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol reference this library for function's logic.\",\"methods\":{\"allowance(ZapStorage.ZapStorageStruct storage,address,address)\":{\"params\":{\"_spender\":\"address of spender of parties said balance\",\"_user\":\"address of party with the balance\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\"},\"allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  and removing the staked amount from their balance if they are staked\",\"params\":{\"_amount\":\"to check if the user can spend\",\"_user\":\"address of user\"},\"return\":\"true if they are allowed to spend the amount being checked\"},\"approve(ZapStorage.ZapStorageStruct storage,address,uint256)\":{\"details\":\"This function approves a _spender an _amount of tokens to use\",\"params\":{\"_amount\":\"amount the spender is being approved for\",\"_spender\":\"address\"},\"return\":\"true if spender appproved successfully\"},\"balanceOf(ZapStorage.ZapStorageStruct storage,address)\":{\"details\":\"Gets balance of owner specified\",\"params\":{\"_user\":\"is the owner address used to look up the balance\"},\"return\":\"Returns the balance associated with the passed in _user\"},\"balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\",\"_user\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance at _blockNumber specified\"},\"doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)\":{\"details\":\"Completes POWO transfers by updating the balances on the current block number\",\"params\":{\"_amount\":\"to transfer\",\"_from\":\"address to transfer from\",\"_to\":\"addres to transfer to\"}},\"getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)\":{\"details\":\"Getter for balance for owner on the specified _block number\",\"params\":{\"_block\":\"is the block number to search the balance on\",\"checkpoints\":\"gets the mapping for the balances[owner]\"},\"return\":\"the balance at the checkpoint\"},\"transfer(ZapStorage.ZapStorageStruct storage,address,uint256)\":{\"details\":\"Allows for a transfer of tokens to _to\",\"params\":{\"_amount\":\"The amount of tokens to send\",\"_to\":\"The address to send tokens to\"},\"return\":\"true if transfer is successful\"},\"transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to be transferred\",\"_from\":\"The address holding the tokens being transferred\",\"_to\":\"The address of the recipient\"},\"return\":\"True if the transfer was successful\"},\"updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)\":{\"details\":\"Updates balance for from and to on the current block number via doTransfer\",\"params\":{\"_value\":\"is the new balance\",\"checkpoints\":\"gets the mapping for the balances[owner]\"}}},\"title\":\"Zap Transfer\"},\"userdoc\":{\"methods\":{\"transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)\":{\"notice\":\"Send _amount tokens to _to from _from on the condition it is approved by _from\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ZapTransfer.sol\":\"ZapTransfer\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMathM.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\n//Slightly modified SafeMath library - includes a min and max function, removes useless div function\\nlibrary SafeMathM {\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    assert(c >= a);\\n    return c;\\n  }\\n\\n  function max(uint a, uint b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  function max(int256 a, int256 b) internal pure returns (uint256) {\\n    return a > b ? uint(a) : uint(b);\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n  \\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a * b;\\n    assert(a == 0 || c / a == b);\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b <= a);\\n    return a - b;\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee1fc95dd938a5594af5cf810df46264ed4ea8d594d7ef4cd77a3a48e2c96062\"},\"contracts/libraries/ZapStorage.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\n/**\\n * @title Zap Oracle Storage Library\\n * @dev Contains all the variables/structs used by Zap\\n */\\n\\n// Libraries contain reusable Solidity types\\nlibrary ZapStorage {\\n\\n\\n    //Internal struct for use in proof-of-work submission\\n    struct Details {\\n        uint256 value;\\n        address miner;\\n    }\\n\\n    struct Dispute {\\n        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\\n        int256 tally; //current tally of votes for - against measure\\n        bool executed; //is the dispute settled\\n        bool disputeVotePassed; //did the vote pass?\\n        bool isPropFork; //true for fork proposal NEW\\n        address reportedMiner; //miner who alledgedly submitted the 'bad value' will get disputeFee if dispute vote fails\\n        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\\n        address proposedForkAddress; //new fork address (if fork proposal)\\n        mapping(bytes32 => uint256) disputeUintVars;\\n        //Each of the variables below is saved in the mapping disputeUintVars for each disputeID\\n        //e.g. ZapStorageStruct.DisputeById[disputeID].disputeUintVars[keccak256(\\\"requestId\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"requestId\\\");//apiID of disputed value\\n        // uint keccak256(\\\"timestamp\\\");//timestamp of distputed value\\n        // uint keccak256(\\\"value\\\"); //the value being disputed\\n        // uint keccak256(\\\"minExecutionDate\\\");//7 days from when dispute initialized\\n        // uint keccak256(\\\"numberOfVotes\\\");//the number of parties who have voted on the measure\\n        // uint keccak256(\\\"blockNumber\\\");// the blocknumber for which votes will be calculated from\\n        // uint keccak256(\\\"minerSlot\\\"); //index in dispute array\\n        // uint keccak256(\\\"quorum\\\"); //quorum for dispute vote NEW\\n        // uint keccak256(\\\"fee\\\"); //fee paid corresponding to dispute\\n        mapping(address => bool) voted; //mapping of address to whether or not they voted\\n    }\\n\\n    struct StakeInfo {\\n        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute\\n        uint256 startDate; //stake start date\\n    }\\n\\n    //Internal struct to allow balances to be queried by blocknumber for voting purposes\\n    struct Checkpoint {\\n        uint128 fromBlock; // fromBlock is the block number that the value was generated from\\n        uint128 value; // value is the amount of tokens at a specific block number\\n    }\\n\\n    struct Request {\\n        string queryString; //id to string api\\n        string dataSymbol; //short name for api request\\n        bytes32 queryHash; //hash of api string and granularity e.g. keccak256(abi.encodePacked(_sapi,_granularity))\\n        uint256[] requestTimestamps; //array of all newValueTimestamps requested\\n        mapping(bytes32 => uint256) apiUintVars;\\n        //Each of the variables below is saved in the mapping apiUintVars for each api request\\n        //e.g. requestDetails[_requestId].apiUintVars[keccak256(\\\"totalTip\\\")]\\n        //These are the variables saved in this mapping:\\n        // uint keccak256(\\\"granularity\\\"); //multiplier for miners\\n        // uint keccak256(\\\"requestQPosition\\\"); //index in requestQ\\n        // uint keccak256(\\\"totalTip\\\");//bonus portion of payout\\n        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\\n        mapping(uint256 => uint256) finalValues; //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\\n        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\\n        mapping(uint256 => address[5]) minersByValue;\\n        mapping(uint256 => uint256[5]) valuesByTimestamp;\\n    }\\n\\n    struct ZapStorageStruct {\\n        bytes32 currentChallenge; //current challenge to be solved\\n        uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\\n        uint256[] newValueTimestamps; //array of all timestamps requested\\n        Details[5] currentMiners; //This struct is for organizing the five mined values to find the median\\n        mapping(bytes32 => address) addressVars;\\n        //Address fields in the Zap contract are saved the addressVars mapping\\n        //e.g. addressVars[keccak256(\\\"zapContract\\\")] = address\\n        //These are the variables saved in this mapping:\\n        // address keccak256(\\\"zapContract\\\");//Zap address\\n        // address  keccak256(\\\"_owner\\\");//Zap Owner address\\n        // address  keccak256(\\\"_deity\\\");//Zap Owner that can do things at will\\n        mapping(bytes32 => uint256) uintVars;\\n        //uint fields in the Zap contract are saved the uintVars mapping\\n        //e.g. uintVars[keccak256(\\\"decimals\\\")] = uint\\n        //These are the variables saved in this mapping:\\n        // keccak256(\\\"decimals\\\");    //18 decimal standard ERC20\\n        // keccak256(\\\"disputeFee\\\");//cost to dispute a mined value\\n        // keccak256(\\\"disputeCount\\\");//totalHistoricalDisputes\\n        // keccak256(\\\"total_supply\\\"); //total_supply of the token in circulation\\n        // keccak256(\\\"stakeAmount\\\");//stakeAmount for miners (we can cut gas if we just hardcode it in...or should it be variable?)\\n        // keccak256(\\\"stakerCount\\\"); //number of parties currently staked\\n        // keccak256(\\\"timeOfLastNewValue\\\"); // time of last challenge solved\\n        // keccak256(\\\"difficulty\\\"); // Difficulty of current block\\n        // keccak256(\\\"currentTotalTips\\\"); //value of highest api/timestamp PayoutPool\\n        // keccak256(\\\"currentRequestId\\\"); //API being mined--updates with the ApiOnQ Id\\n        // keccak256(\\\"requestCount\\\"); // total number of requests through the system\\n        // keccak256(\\\"slotProgress\\\");//Number of miners who have mined this value so far\\n        // keccak256(\\\"miningReward\\\");//Mining Reward in PoWo tokens given to all miners per value\\n        // keccak256(\\\"timeTarget\\\"); //The time between blocks (mined Oracle values)\\n        mapping(bytes32 => mapping(address => bool)) minersByChallenge; //This is a boolean that tells you if a given challenge has been completed by a given miner\\n        mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\\n        mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\\n        mapping(uint256 => Dispute) disputesById; //disputeId=> Dispute details\\n        mapping(address => Checkpoint[]) balances; //balances of a party given blocks\\n        mapping(address => mapping(address => uint256)) allowed; //allowance for a given party and approver\\n        mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\\n        mapping(uint256 => Request) requestDetails; //mapping of apiID to details\\n        mapping(bytes32 => uint256) requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\\n        mapping(bytes32 => uint256) disputeIdByDisputeHash; //maps a hash to an ID for each dispute\\n    }\\n}\\n\",\"keccak256\":\"0xbedca2767c2488a1205715da680ad20a4ac324fd96e5503070b2f9230e854061\"},\"contracts/libraries/ZapTransfer.sol\":{\"content\":\"pragma solidity ^0.5.1;\\n\\nimport \\\"./SafeMathM.sol\\\";\\nimport \\\"./ZapStorage.sol\\\";\\n\\n/**\\n* @title Zap Transfer\\n* @dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\\n* reference this library for function's logic.\\n*/\\nlibrary ZapTransfer {\\n    using SafeMathM for uint256;\\n\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);//ERC20 Approval event\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);//ERC20 Transfer Event\\n\\n    /*Functions*/\\n    \\n    /**\\n    * @dev Allows for a transfer of tokens to _to\\n    * @param _to The address to send tokens to\\n    * @param _amount The amount of tokens to send\\n    * @return true if transfer is successful\\n    */\\n    function transfer(ZapStorage.ZapStorageStruct storage self, address _to, uint256 _amount) public returns (bool success) {\\n        doTransfer(self,msg.sender, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @notice Send _amount tokens to _to from _from on the condition it\\n    * is approved by _from\\n    * @param _from The address holding the tokens being transferred\\n    * @param _to The address of the recipient\\n    * @param _amount The amount of tokens to be transferred\\n    * @return True if the transfer was successful\\n    */\\n    function transferFrom(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint256 _amount) public returns (bool success) {\\n        require(self.allowed[_from][msg.sender] >= _amount);\\n        self.allowed[_from][msg.sender] -= _amount;\\n        doTransfer(self,_from, _to, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @dev This function approves a _spender an _amount of tokens to use\\n    * @param _spender address\\n    * @param _amount amount the spender is being approved for\\n    * @return true if spender appproved successfully\\n    */\\n    function approve(ZapStorage.ZapStorageStruct storage self, address _spender, uint _amount) public returns (bool) {\\n        require(allowedToTrade(self,msg.sender,_amount));\\n        require(_spender != address(0));\\n        self.allowed[msg.sender][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n    * @param _user address of party with the balance\\n    * @param _spender address of spender of parties said balance\\n    * @return Returns the remaining allowance of tokens granted to the _spender from the _user\\n    */\\n    function allowance(ZapStorage.ZapStorageStruct storage self,address _user, address _spender) public view returns (uint) {\\n       \\n       return self.allowed[_user][_spender]; \\n    }\\n\\n\\n    /**\\n    * @dev Completes POWO transfers by updating the balances on the current block number\\n    * @param _from address to transfer from\\n    * @param _to addres to transfer to\\n    * @param _amount to transfer\\n    */\\n    function doTransfer(ZapStorage.ZapStorageStruct storage self, address _from, address _to, uint _amount) public {\\n        require(_amount > 0);\\n        require(_to != address(0));\\n        require(allowedToTrade(self,_from,_amount)); //allowedToTrade checks the stakeAmount is removed from balance if the _user is staked\\n        uint previousBalance = balanceOfAt(self,_from, block.number);\\n        updateBalanceAtNow(self.balances[_from], previousBalance - _amount);\\n        previousBalance = balanceOfAt(self,_to, block.number);\\n        require(previousBalance + _amount >= previousBalance); // Check for overflow\\n        updateBalanceAtNow(self.balances[_to], previousBalance + _amount);\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n\\n    /**\\n    * @dev Gets balance of owner specified\\n    * @param _user is the owner address used to look up the balance\\n    * @return Returns the balance associated with the passed in _user\\n    */\\n    function balanceOf(ZapStorage.ZapStorageStruct storage self,address _user) public view returns (uint) {\\n        return balanceOfAt(self,_user, block.number);\\n    }\\n\\n\\n    /**\\n    * @dev Queries the balance of _user at a specific _blockNumber\\n    * @param _user The address from which the balance will be retrieved\\n    * @param _blockNumber The block number when the balance is queried\\n    * @return The balance at _blockNumber specified\\n    */\\n    function balanceOfAt(ZapStorage.ZapStorageStruct storage self,address _user, uint _blockNumber) public view returns (uint) {\\n        if ((self.balances[_user].length == 0) || (self.balances[_user][0].fromBlock > _blockNumber)) {\\n                return 0;\\n        }\\n     else {\\n        return getBalanceAt(self.balances[_user], _blockNumber);\\n     }\\n    }\\n\\n\\n    /**\\n    * @dev Getter for balance for owner on the specified _block number\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _block is the block number to search the balance on\\n    * @return the balance at the checkpoint\\n    */\\n    function getBalanceAt(ZapStorage.Checkpoint[] storage checkpoints, uint _block) view public returns (uint) {\\n        if (checkpoints.length == 0) return 0;\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock) return 0;\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1)/ 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n\\n    /**\\n    * @dev This function returns whether or not a given user is allowed to trade a given amount \\n    * and removing the staked amount from their balance if they are staked\\n    * @param _user address of user\\n    * @param _amount to check if the user can spend\\n    * @return true if they are allowed to spend the amount being checked\\n    */\\n    function allowedToTrade(ZapStorage.ZapStorageStruct storage self,address _user,uint _amount) public view returns(bool) {\\n        if(self.stakerDetails[_user].currentStatus >0){\\n            //Removes the stakeAmount from balance if the _user is staked\\n            if(balanceOf(self,_user).sub(self.uintVars[keccak256(\\\"stakeAmount\\\")]).sub(_amount) >= 0){\\n                return true;\\n            }\\n        }\\n        else if(balanceOf(self,_user).sub(_amount) >= 0){\\n                return true;\\n        }\\n        return false;\\n    }\\n    \\n\\n    /**\\n    * @dev Updates balance for from and to on the current block number via doTransfer\\n    * @param checkpoints gets the mapping for the balances[owner]\\n    * @param _value is the new balance\\n    */\\n    function updateBalanceAtNow(ZapStorage.Checkpoint[] storage checkpoints, uint _value) public {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\\n               ZapStorage.Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\\n               newCheckPoint.fromBlock =  uint128(block.number);\\n               newCheckPoint.value = uint128(_value);\\n        } else {\\n               ZapStorage.Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\\n               oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87399d0a6627e7413463f1df4e20cd3b6a9cbe459d826b096abf253a6f649748\"}},\"version\":1}",
          "userdoc": {
            "methods": {
              "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)": {
                "notice": "Send _amount tokens to _to from _from on the condition it is approved by _from"
              }
            }
          }
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "formattedMessage": "contracts/libraries/ZapGettersLibrary.sol:190:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function getName(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\n                     ^--------------------------------------^\n",
        "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
        "severity": "warning",
        "sourceLocation": {
          "end": 8653,
          "file": "contracts/libraries/ZapGettersLibrary.sol",
          "start": 8613
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "formattedMessage": "contracts/libraries/ZapGettersLibrary.sol:302:24: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function getSymbol(ZapStorage.ZapStorageStruct storage self) internal pure returns(string memory){\n                       ^--------------------------------------^\n",
        "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
        "severity": "warning",
        "sourceLocation": {
          "end": 13453,
          "file": "contracts/libraries/ZapGettersLibrary.sol",
          "start": 13413
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/ZapGetters.sol": {
        "ast": {
          "absolutePath": "contracts/ZapGetters.sol",
          "exportedSymbols": {
            "ZapGetters": [
              509
            ]
          },
          "id": 510,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:0"
            },
            {
              "absolutePath": "contracts/libraries/ZapStorage.sol",
              "file": "./libraries/ZapStorage.sol",
              "id": 2,
              "nodeType": "ImportDirective",
              "scope": 510,
              "sourceUnit": 3741,
              "src": "64:36:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapTransfer.sol",
              "file": "./libraries/ZapTransfer.sol",
              "id": 3,
              "nodeType": "ImportDirective",
              "scope": 510,
              "sourceUnit": 4276,
              "src": "101:37:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapGettersLibrary.sol",
              "file": "./libraries/ZapGettersLibrary.sol",
              "id": 4,
              "nodeType": "ImportDirective",
              "scope": 510,
              "sourceUnit": 3197,
              "src": "139:43:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapStake.sol",
              "file": "./libraries/ZapStake.sol",
              "id": 5,
              "nodeType": "ImportDirective",
              "scope": 510,
              "sourceUnit": 3593,
              "src": "183:34:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/ZapToken.sol",
              "file": "./ZapToken.sol",
              "id": 6,
              "nodeType": "ImportDirective",
              "scope": 510,
              "sourceUnit": 1187,
              "src": "258:24:0",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 7,
                    "name": "ZapToken",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1186,
                    "src": "517:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapToken_$1186",
                      "typeString": "contract ZapToken"
                    }
                  },
                  "id": 8,
                  "nodeType": "InheritanceSpecifier",
                  "src": "517:8:0"
                }
              ],
              "contractDependencies": [
                732,
                772,
                845,
                1072,
                1161,
                1186,
                1242
              ],
              "contractKind": "contract",
              "documentation": "@title Zap Getters\n@dev Oracle contract with all zap getter functions. The logic for the functions on this contract \nis saved on the ZapGettersLibrary, ZapTransfer, ZapGettersLibrary, and ZapStake",
              "fullyImplemented": true,
              "id": 509,
              "linearizedBaseContracts": [
                509,
                1186,
                1161,
                1242,
                1072,
                845,
                772,
                732
              ],
              "name": "ZapGetters",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 11,
                  "libraryName": {
                    "contractScope": null,
                    "id": 9,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 705,
                    "src": "538:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$705",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "532:27:0",
                  "typeName": {
                    "id": 10,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "551:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "id": 14,
                  "libraryName": {
                    "contractScope": null,
                    "id": 12,
                    "name": "ZapTransfer",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 4275,
                    "src": "571:11:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapTransfer_$4275",
                      "typeString": "library ZapTransfer"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "565:50:0",
                  "typeName": {
                    "contractScope": null,
                    "id": 13,
                    "name": "ZapStorage.ZapStorageStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3739,
                    "src": "587:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                      "typeString": "struct ZapStorage.ZapStorageStruct"
                    }
                  }
                },
                {
                  "id": 17,
                  "libraryName": {
                    "contractScope": null,
                    "id": 15,
                    "name": "ZapGettersLibrary",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3196,
                    "src": "626:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapGettersLibrary_$3196",
                      "typeString": "library ZapGettersLibrary"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "620:56:0",
                  "typeName": {
                    "contractScope": null,
                    "id": 16,
                    "name": "ZapStorage.ZapStorageStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3739,
                    "src": "648:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                      "typeString": "struct ZapStorage.ZapStorageStruct"
                    }
                  }
                },
                {
                  "id": 20,
                  "libraryName": {
                    "contractScope": null,
                    "id": 18,
                    "name": "ZapStake",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3592,
                    "src": "687:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapStake_$3592",
                      "typeString": "library ZapStake"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "681:47:0",
                  "typeName": {
                    "contractScope": null,
                    "id": 19,
                    "name": "ZapStorage.ZapStorageStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3739,
                    "src": "700:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                      "typeString": "struct ZapStorage.ZapStorageStruct"
                    }
                  }
                },
                {
                  "constant": false,
                  "id": 22,
                  "name": "zap",
                  "nodeType": "VariableDeclaration",
                  "scope": 509,
                  "src": "734:31:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                    "typeString": "struct ZapStorage.ZapStorageStruct"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 21,
                    "name": "ZapStorage.ZapStorageStruct",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 3739,
                    "src": "734:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                      "typeString": "struct ZapStorage.ZapStorageStruct"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24,
                  "name": "token",
                  "nodeType": "VariableDeclaration",
                  "scope": 509,
                  "src": "771:14:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ZapToken_$1186",
                    "typeString": "contract ZapToken"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 23,
                    "name": "ZapToken",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1186,
                    "src": "771:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapToken_$1186",
                      "typeString": "contract ZapToken"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 35,
                    "nodeType": "Block",
                    "src": "830:43:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 33,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 29,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24,
                            "src": "840:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ZapToken_$1186",
                              "typeString": "contract ZapToken"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 31,
                                "name": "zapToken",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 26,
                                "src": "857:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 30,
                              "name": "ZapToken",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1186,
                              "src": "848:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapToken_$1186_$",
                                "typeString": "type(contract ZapToken)"
                              }
                            },
                            "id": 32,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "848:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ZapToken_$1186",
                              "typeString": "contract ZapToken"
                            }
                          },
                          "src": "840:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_ZapToken_$1186",
                            "typeString": "contract ZapToken"
                          }
                        },
                        "id": 34,
                        "nodeType": "ExpressionStatement",
                        "src": "840:26:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 36,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 27,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 26,
                        "name": "zapToken",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "805:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "805:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "804:18:0"
                  },
                  "returnParameters": {
                    "id": 28,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "830:0:0"
                  },
                  "scope": 509,
                  "src": "792:81:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 51,
                    "nodeType": "Block",
                    "src": "1424:104:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 47,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 38,
                              "src": "1505:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 48,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "1512:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 45,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24,
                              "src": "1489:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ZapToken_$1186",
                                "typeString": "contract ZapToken"
                              }
                            },
                            "id": 46,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "allowance",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 970,
                            "src": "1489:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address,address) view external returns (uint256)"
                            }
                          },
                          "id": 49,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1489:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 44,
                        "id": 50,
                        "nodeType": "Return",
                        "src": "1482:39:0"
                      }
                    ]
                  },
                  "documentation": "@param _user address\n@param _spender address\n@return Returns the remaining allowance of tokens granted to the _spender from the _user",
                  "id": 52,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 41,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "1364:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1364:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 40,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "1379:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 39,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1379:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1363:33:0"
                  },
                  "returnParameters": {
                    "id": 44,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 43,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "1418:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 42,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1418:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1417:6:0"
                  },
                  "scope": 509,
                  "src": "1345:183:0",
                  "stateMutability": "view",
                  "superFunction": 970,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 67,
                    "nodeType": "Block",
                    "src": "1860:57:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 63,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 54,
                              "src": "1896:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 64,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 56,
                              "src": "1902:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 61,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "1877:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 62,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "allowedToTrade",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4199,
                            "src": "1877:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (bool)"
                            }
                          },
                          "id": 65,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1877:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 60,
                        "id": 66,
                        "nodeType": "Return",
                        "src": "1870:40:0"
                      }
                    ]
                  },
                  "documentation": "@dev This function returns whether or not a given user is allowed to trade a given amount  \n@param _user address\n@param _amount uint of amount\n@return true if the user is alloed to trade the amount specified",
                  "id": 68,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowedToTrade",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 57,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 54,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 68,
                        "src": "1805:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 53,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1805:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 56,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 68,
                        "src": "1819:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 55,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1819:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1804:28:0"
                  },
                  "returnParameters": {
                    "id": 60,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 59,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 68,
                        "src": "1855:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 58,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1855:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1854:6:0"
                  },
                  "scope": 509,
                  "src": "1781:136:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 80,
                    "nodeType": "Block",
                    "src": "2180:87:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 77,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 70,
                              "src": "2254:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 75,
                              "name": "token",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 24,
                              "src": "2238:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ZapToken_$1186",
                                "typeString": "contract ZapToken"
                              }
                            },
                            "id": 76,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 844,
                            "src": "2238:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2238:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 74,
                        "id": 79,
                        "nodeType": "Return",
                        "src": "2231:29:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets balance of owner specified\n@param _user is the owner address used to look up the balance\n@return Returns the balance associated with the passed in _user",
                  "id": 81,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 71,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 70,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2138:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 69,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2138:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2137:15:0"
                  },
                  "returnParameters": {
                    "id": 74,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 73,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 81,
                        "src": "2174:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 72,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2174:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2173:6:0"
                  },
                  "scope": 509,
                  "src": "2119:148:0",
                  "stateMutability": "view",
                  "superFunction": 844,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 96,
                    "nodeType": "Block",
                    "src": "3078:54:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 92,
                              "name": "_challenge",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 83,
                              "src": "3107:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 93,
                              "name": "_miner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 85,
                              "src": "3118:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 90,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "3095:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 91,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "didMine",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2444,
                            "src": "3095:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,bytes32,address) view returns (bool)"
                            }
                          },
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3095:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 89,
                        "id": 95,
                        "nodeType": "Return",
                        "src": "3088:37:0"
                      }
                    ]
                  },
                  "documentation": "@dev This function tells you if a given challenge has been completed by a given miner\n@param _challenge the challenge to search for\n@param _miner address that you want to know if they solved the challenge\n@return true if the _miner address provided solved the ",
                  "id": 97,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "didMine",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 83,
                        "name": "_challenge",
                        "nodeType": "VariableDeclaration",
                        "scope": 97,
                        "src": "3015:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 82,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3015:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 85,
                        "name": "_miner",
                        "nodeType": "VariableDeclaration",
                        "scope": 97,
                        "src": "3035:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 84,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3035:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3014:36:0"
                  },
                  "returnParameters": {
                    "id": 89,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 88,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 97,
                        "src": "3073:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 87,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3073:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3072:6:0"
                  },
                  "scope": 509,
                  "src": "2998:134:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 112,
                    "nodeType": "Block",
                    "src": "3407:56:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 108,
                              "name": "_disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 99,
                              "src": "3436:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 109,
                              "name": "_address",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 101,
                              "src": "3447:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 106,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "3424:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 107,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "didVote",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2464,
                            "src": "3424:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,address) view returns (bool)"
                            }
                          },
                          "id": 110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3424:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 105,
                        "id": 111,
                        "nodeType": "Return",
                        "src": "3417:39:0"
                      }
                    ]
                  },
                  "documentation": "@dev Checks if an address voted in a given dispute\n@param _disputeId to look up\n@param _address to look up\n@return bool of whether or not party voted",
                  "id": 113,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "didVote",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 102,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 99,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3345:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 98,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3345:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 101,
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3362:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 100,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3362:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3344:35:0"
                  },
                  "returnParameters": {
                    "id": 105,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 113,
                        "src": "3402:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3402:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3401:6:0"
                  },
                  "scope": 509,
                  "src": "3328:135:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 125,
                    "nodeType": "Block",
                    "src": "3875:49:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 122,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 115,
                              "src": "3911:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 120,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "3892:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 121,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getAddressVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2479,
                            "src": "3892:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_bytes32_$returns$_t_address_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,bytes32) view returns (address)"
                            }
                          },
                          "id": 123,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3892:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 119,
                        "id": 124,
                        "nodeType": "Return",
                        "src": "3885:32:0"
                      }
                    ]
                  },
                  "documentation": "@dev allows Zap to read data from the addressVars mapping\n@param _data is the keccak256(\"variable_name\") of the variable that is being accessed. \nThese are examples of how the variables are saved within other functions:\naddressVars[keccak256(\"_owner\")]\naddressVars[keccak256(\"zapContract\")]",
                  "id": 126,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAddressVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 116,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 115,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 126,
                        "src": "3830:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3830:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3829:15:0"
                  },
                  "returnParameters": {
                    "id": 119,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 118,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 126,
                        "src": "3867:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 117,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3867:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3866:9:0"
                  },
                  "scope": 509,
                  "src": "3806:118:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 156,
                    "nodeType": "Block",
                    "src": "4821:57:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 153,
                              "name": "_disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 128,
                              "src": "4860:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 151,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "4838:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 152,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getAllDisputeVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2589,
                            "src": "4838:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_bytes32_$_t_bool_$_t_bool_$_t_bool_$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$9_memory_ptr_$_t_int256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (bytes32,bool,bool,bool,address,address,address,uint256[9] memory,int256)"
                            }
                          },
                          "id": 154,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4838:33:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes32_$_t_bool_$_t_bool_$_t_bool_$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$9_memory_ptr_$_t_int256_$",
                            "typeString": "tuple(bytes32,bool,bool,bool,address,address,address,uint256[9] memory,int256)"
                          }
                        },
                        "functionReturnParameters": 150,
                        "id": 155,
                        "nodeType": "Return",
                        "src": "4831:40:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets all dispute variables\n@param _disputeId to look up\n@return bytes32 hash of dispute \n@return bool executed where true if it has been voted on\n@return bool disputeVotePassed\n@return bool isPropFork true if the dispute is a proposed fork\n@return address of reportedMiner\n@return address of reportingParty\n@return address of proposedForkAddress\n@return uint of requestId\n@return uint of timestamp\n@return uint of value\n@return uint of minExecutionDate\n@return uint of numberOfVotes\n@return uint of blocknumber\n@return uint of minerSlot\n@return uint of quorum\n@return uint of fee\n@return int count of the current tally",
                  "id": 157,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAllDisputeVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 129,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 128,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4711:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 127,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4711:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4710:17:0"
                  },
                  "returnParameters": {
                    "id": 150,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 131,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4748:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 130,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4748:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 133,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4757:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 132,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4757:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 135,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4763:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 134,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4763:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 137,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4769:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 136,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4769:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 139,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4775:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 138,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4775:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 141,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4784:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 140,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4784:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 143,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4793:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 142,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4793:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 147,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4801:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
                          "typeString": "uint256[9]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 144,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "4801:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 146,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "39",
                            "id": 145,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4806:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "9"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "4801:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
                            "typeString": "uint256[9]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 149,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 157,
                        "src": "4817:3:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 148,
                          "name": "int",
                          "nodeType": "ElementaryTypeName",
                          "src": "4817:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4747:74:0"
                  },
                  "scope": 509,
                  "src": "4684:194:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 176,
                    "nodeType": "Block",
                    "src": "5264:53:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 172,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "5285:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 173,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getCurrentVariables",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2661,
                            "src": "5285:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_bytes32_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (bytes32,uint256,uint256,string memory,uint256,uint256)"
                            }
                          },
                          "id": 174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5285:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes32_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(bytes32,uint256,uint256,string memory,uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 171,
                        "id": 175,
                        "nodeType": "Return",
                        "src": "5278:32:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for variables for the requestId being currently mined(currentRequestId)\n@return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request ",
                  "id": 177,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCurrentVariables",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 158,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5195:2:0"
                  },
                  "returnParameters": {
                    "id": 171,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 160,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5220:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 159,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5220:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 162,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5229:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 161,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5229:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 164,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5235:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 163,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5235:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 166,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5240:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 165,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5240:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 168,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5254:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 167,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5254:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 170,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 177,
                        "src": "5259:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 169,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5259:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5219:45:0"
                  },
                  "scope": 509,
                  "src": "5167:150:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 189,
                    "nodeType": "Block",
                    "src": "5590:61:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 186,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "5638:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 184,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "5608:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 185,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getDisputeIdByDisputeHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2676,
                            "src": "5608:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_bytes32_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,bytes32) view returns (uint256)"
                            }
                          },
                          "id": 187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5608:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 183,
                        "id": 188,
                        "nodeType": "Return",
                        "src": "5600:44:0"
                      }
                    ]
                  },
                  "documentation": "@dev Checks if a given hash of miner,requestId has been disputed\n@param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\n@return uint disputeId",
                  "id": 190,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDisputeIdByDisputeHash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 180,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 179,
                        "name": "_hash",
                        "nodeType": "VariableDeclaration",
                        "scope": 190,
                        "src": "5548:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 178,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5548:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5547:15:0"
                  },
                  "returnParameters": {
                    "id": 183,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 182,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 190,
                        "src": "5585:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 181,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5585:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5584:6:0"
                  },
                  "scope": 509,
                  "src": "5513:138:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 205,
                    "nodeType": "Block",
                    "src": "6234:64:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 201,
                              "name": "_disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 192,
                              "src": "6274:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 202,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 194,
                              "src": "6285:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 199,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "6251:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 200,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getDisputeUintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2696,
                            "src": "6251:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,bytes32) view returns (uint256)"
                            }
                          },
                          "id": 203,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6251:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 198,
                        "id": 204,
                        "nodeType": "Return",
                        "src": "6244:47:0"
                      }
                    ]
                  },
                  "documentation": "@dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\n@param _disputeId is the dispute id;\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the disputeUintVars under the Dispute struct\n@return uint value for the bytes32 data submitted",
                  "id": 206,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDisputeUintVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 195,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 192,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "6176:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 191,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6176:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 194,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "6192:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 193,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6192:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6175:31:0"
                  },
                  "returnParameters": {
                    "id": 198,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 197,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 206,
                        "src": "6229:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 196,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6229:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6228:6:0"
                  },
                  "scope": 509,
                  "src": "6148:150:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 217,
                    "nodeType": "Block",
                    "src": "6569:45:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 213,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "6586:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 214,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getLastNewValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2727,
                            "src": "6586:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_uint256_$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (uint256,bool)"
                            }
                          },
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6586:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_bool_$",
                            "typeString": "tuple(uint256,bool)"
                          }
                        },
                        "functionReturnParameters": 212,
                        "id": 216,
                        "nodeType": "Return",
                        "src": "6579:28:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the a value for the latest timestamp available\n@return value for timestamp of last proof of work submited\n@return true if the is a timestamp for the lastNewValue",
                  "id": 218,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getLastNewValue",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 207,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6534:2:0"
                  },
                  "returnParameters": {
                    "id": 212,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 209,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 218,
                        "src": "6559:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 208,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6559:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 211,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 218,
                        "src": "6564:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 210,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6564:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6558:11:0"
                  },
                  "scope": 509,
                  "src": "6510:104:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 232,
                    "nodeType": "Block",
                    "src": "6935:59:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 229,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 220,
                              "src": "6976:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 227,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "6952:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 228,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getLastNewValueById",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2775,
                            "src": "6952:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_uint256_$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (uint256,bool)"
                            }
                          },
                          "id": 230,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6952:35:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_bool_$",
                            "typeString": "tuple(uint256,bool)"
                          }
                        },
                        "functionReturnParameters": 226,
                        "id": 231,
                        "nodeType": "Return",
                        "src": "6945:42:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the a value for the latest timestamp available\n@param _requestId being requested\n@return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't",
                  "id": 233,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getLastNewValueById",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 221,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 220,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 233,
                        "src": "6886:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 219,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6886:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6885:17:0"
                  },
                  "returnParameters": {
                    "id": 226,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 223,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 233,
                        "src": "6925:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 222,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6925:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 225,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 233,
                        "src": "6930:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 224,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6930:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6924:11:0"
                  },
                  "scope": 509,
                  "src": "6857:137:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 248,
                    "nodeType": "Block",
                    "src": "7325:67:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 244,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 235,
                              "src": "7363:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 245,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 237,
                              "src": "7374:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 242,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "7342:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 243,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getMinedBlockNum",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2795,
                            "src": "7342:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 246,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7342:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 241,
                        "id": 247,
                        "nodeType": "Return",
                        "src": "7335:50:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets blocknumber for mined timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up blocknumber\n@return uint of the blocknumber which the dispute was mined",
                  "id": 249,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMinedBlockNum",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 238,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 235,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 249,
                        "src": "7264:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 234,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7264:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 237,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 249,
                        "src": "7281:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 236,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7281:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7263:34:0"
                  },
                  "returnParameters": {
                    "id": 241,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 240,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 249,
                        "src": "7320:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 239,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7320:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7319:6:0"
                  },
                  "scope": 509,
                  "src": "7238:154:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 266,
                    "nodeType": "Block",
                    "src": "7755:83:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 262,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 251,
                              "src": "7809:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 263,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 253,
                              "src": "7820:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 260,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "7772:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 261,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getMinersByRequestIdAndTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2817,
                            "src": "7772:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_array$_t_address_$5_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (address[5] memory)"
                            }
                          },
                          "id": 264,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7772:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$5_memory_ptr",
                            "typeString": "address[5] memory"
                          }
                        },
                        "functionReturnParameters": 259,
                        "id": 265,
                        "nodeType": "Return",
                        "src": "7765:66:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up miners for\n@return the 5 miners' addresses",
                  "id": 267,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMinersByRequestIdAndTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 254,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 251,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 267,
                        "src": "7681:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 250,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7681:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 253,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 267,
                        "src": "7698:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 252,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7698:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7680:34:0"
                  },
                  "returnParameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 258,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 267,
                        "src": "7737:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$5_memory_ptr",
                          "typeString": "address[5]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 255,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7737:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 257,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 256,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7745:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "7737:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$5_storage_ptr",
                            "typeString": "address[5]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7736:19:0"
                  },
                  "scope": 509,
                  "src": "7639:199:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 276,
                    "nodeType": "Block",
                    "src": "7990:37:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 272,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "8007:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 273,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getName",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2827,
                            "src": "8007:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) pure returns (string memory)"
                            }
                          },
                          "id": 274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8007:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 271,
                        "id": 275,
                        "nodeType": "Return",
                        "src": "8000:20:0"
                      }
                    ]
                  },
                  "documentation": "@dev Get the name of the token\nreturn string of the token name",
                  "id": 277,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getName",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 268,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7951:2:0"
                  },
                  "returnParameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 270,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 277,
                        "src": "7976:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 269,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7976:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7975:15:0"
                  },
                  "scope": 509,
                  "src": "7935:92:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 289,
                    "nodeType": "Block",
                    "src": "8471:67:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 286,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 279,
                              "src": "8520:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 284,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "8488:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 285,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getNewValueCountbyRequestId",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2844,
                            "src": "8488:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (uint256)"
                            }
                          },
                          "id": 287,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8488:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 283,
                        "id": 288,
                        "nodeType": "Return",
                        "src": "8481:50:0"
                      }
                    ]
                  },
                  "documentation": "@dev Counts the number of values that have been submited for the request \nif called for the currentRequest being mined it can tell you how many miners have submitted a value for that\nrequest so far\n@param _requestId the requestId to look up\n@return uint count of the number of values received for the requestId",
                  "id": 290,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getNewValueCountbyRequestId",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 280,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 279,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 290,
                        "src": "8427:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 278,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8427:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8426:17:0"
                  },
                  "returnParameters": {
                    "id": 283,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 282,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 290,
                        "src": "8466:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 281,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8466:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8465:6:0"
                  },
                  "scope": 509,
                  "src": "8390:148:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 302,
                    "nodeType": "Block",
                    "src": "8783:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 299,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 292,
                              "src": "8832:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 297,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "8800:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 298,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestIdByRequestQIndex",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2865,
                            "src": "8800:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (uint256)"
                            }
                          },
                          "id": 300,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8800:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 296,
                        "id": 301,
                        "nodeType": "Return",
                        "src": "8793:46:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for the specified requestQ index\n@param _index to look up in the requestQ array\n@return uint of reqeuestId",
                  "id": 303,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByRequestQIndex",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 293,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 292,
                        "name": "_index",
                        "nodeType": "VariableDeclaration",
                        "scope": 303,
                        "src": "8743:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 291,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8743:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8742:13:0"
                  },
                  "returnParameters": {
                    "id": 296,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 295,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 303,
                        "src": "8778:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 294,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8778:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8777:6:0"
                  },
                  "scope": 509,
                  "src": "8706:140:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 315,
                    "nodeType": "Block",
                    "src": "9082:67:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 312,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 305,
                              "src": "9131:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 310,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "9103:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 311,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestIdByTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2880,
                            "src": "9103:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (uint256)"
                            }
                          },
                          "id": 313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9103:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 309,
                        "id": 314,
                        "nodeType": "Return",
                        "src": "9096:46:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for requestId based on timestamp \n@param _timestamp to check requestId\n@return uint of reqeuestId",
                  "id": 316,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 306,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 305,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 316,
                        "src": "9038:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 304,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9038:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9037:17:0"
                  },
                  "returnParameters": {
                    "id": 309,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 308,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 316,
                        "src": "9077:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 307,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9077:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9076:6:0"
                  },
                  "scope": 509,
                  "src": "9005:144:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 328,
                    "nodeType": "Block",
                    "src": "9443:65:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 325,
                              "name": "_request",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 318,
                              "src": "9492:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 323,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "9464:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 324,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestIdByQueryHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2895,
                            "src": "9464:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_bytes32_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,bytes32) view returns (uint256)"
                            }
                          },
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9464:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 322,
                        "id": 327,
                        "nodeType": "Return",
                        "src": "9457:44:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for requestId based on the queryHash\n@param _request is the hash(of string api and granularity) to check if a request already exists\n@return uint requestId",
                  "id": 329,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByQueryHash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 319,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 318,
                        "name": "_request",
                        "nodeType": "VariableDeclaration",
                        "scope": 329,
                        "src": "9398:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 317,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "9398:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9397:18:0"
                  },
                  "returnParameters": {
                    "id": 322,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 321,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 329,
                        "src": "9438:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 320,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9438:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9437:6:0"
                  },
                  "scope": 509,
                  "src": "9365:143:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 340,
                    "nodeType": "Block",
                    "src": "9673:41:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 336,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "9690:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 337,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestQ",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2908,
                            "src": "9690:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_array$_t_uint256_$51_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (uint256[51] memory)"
                            }
                          },
                          "id": 338,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9690:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_memory_ptr",
                            "typeString": "uint256[51] memory"
                          }
                        },
                        "functionReturnParameters": 335,
                        "id": 339,
                        "nodeType": "Return",
                        "src": "9683:24:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for the requestQ array\n@return the requestQ arrray",
                  "id": 341,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestQ",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 330,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9634:2:0"
                  },
                  "returnParameters": {
                    "id": 335,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 334,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 341,
                        "src": "9657:15:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$51_memory_ptr",
                          "typeString": "uint256[51]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 331,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "9657:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 333,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "3531",
                            "id": 332,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9662:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "51"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "9657:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                            "typeString": "uint256[51]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9656:17:0"
                  },
                  "scope": 509,
                  "src": "9614:100:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 356,
                    "nodeType": "Block",
                    "src": "10370:64:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 352,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 343,
                              "src": "10410:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 353,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 345,
                              "src": "10421:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 350,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "10387:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 351,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestUintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2928,
                            "src": "10387:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_bytes32_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,bytes32) view returns (uint256)"
                            }
                          },
                          "id": 354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10387:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 349,
                        "id": 355,
                        "nodeType": "Return",
                        "src": "10380:47:0"
                      }
                    ]
                  },
                  "documentation": "@dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\nfor the requestId specified\n@param _requestId to look up\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the apiUintVars under the requestDetails struct\n@return uint value of the apiUintVars specified in _data for the requestId specified",
                  "id": 357,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestUintVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 343,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "10312:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 342,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10312:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 345,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "10328:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 344,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "10328:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10311:31:0"
                  },
                  "returnParameters": {
                    "id": 349,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 348,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 357,
                        "src": "10365:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 347,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10365:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10364:6:0"
                  },
                  "scope": 509,
                  "src": "10284:150:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 379,
                    "nodeType": "Block",
                    "src": "10966:54:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 376,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 359,
                              "src": "11002:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 374,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "10983:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 375,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getRequestVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2983,
                            "src": "10983:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$returns$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256) view returns (string memory,string memory,bytes32,uint256,uint256,uint256)"
                            }
                          },
                          "id": 377,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10983:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(string memory,string memory,bytes32,uint256,uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 373,
                        "id": 378,
                        "nodeType": "Return",
                        "src": "10976:37:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the API struct variables that are not mappings\n@param _requestId to look up\n@return string of api to query\n@return string of symbol of api to query\n@return bytes32 hash of string\n@return bytes32 of the granularity(decimal places) requested\n@return uint of index in requestQ array\n@return uint of current payout/tip for this requestId",
                  "id": 380,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 360,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 359,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10872:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 358,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10872:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10871:17:0"
                  },
                  "returnParameters": {
                    "id": 373,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 362,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10911:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 361,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "10911:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 364,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10926:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 363,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "10926:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 366,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10940:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 365,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "10940:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 368,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10948:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 367,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10948:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 370,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10954:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 369,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10954:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 372,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 380,
                        "src": "10960:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 371,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10960:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10910:55:0"
                  },
                  "scope": 509,
                  "src": "10848:172:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 394,
                    "nodeType": "Block",
                    "src": "11333:50:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 391,
                              "name": "_staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 382,
                              "src": "11368:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 389,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "11350:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 390,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getStakerInfo",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3007,
                            "src": "11350:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$_t_uint256_$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address) view returns (uint256,uint256)"
                            }
                          },
                          "id": 392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11350:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 388,
                        "id": 393,
                        "nodeType": "Return",
                        "src": "11343:33:0"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows users to retireve all information about a staker\n@param _staker address of staker inquiring about\n@return uint current state of staker\n@return uint startDate of staking",
                  "id": 395,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakerInfo",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 383,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 382,
                        "name": "_staker",
                        "nodeType": "VariableDeclaration",
                        "scope": 395,
                        "src": "11284:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 381,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11284:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11283:17:0"
                  },
                  "returnParameters": {
                    "id": 388,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 385,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 395,
                        "src": "11323:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 384,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11323:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 387,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 395,
                        "src": "11328:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 386,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11328:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11322:11:0"
                  },
                  "scope": 509,
                  "src": "11261:122:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 412,
                    "nodeType": "Block",
                    "src": "11786:76:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 408,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 397,
                              "src": "11833:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 409,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 399,
                              "src": "11844:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 406,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "11803:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 407,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getSubmissionsByTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3029,
                            "src": "11803:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_array$_t_uint256_$5_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256[5] memory)"
                            }
                          },
                          "id": 410,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11803:52:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$5_memory_ptr",
                            "typeString": "uint256[5] memory"
                          }
                        },
                        "functionReturnParameters": 405,
                        "id": 411,
                        "nodeType": "Return",
                        "src": "11796:59:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestampt to look up miners for\n@return address[5] array of 5 addresses ofminers that mined the requestId",
                  "id": 413,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getSubmissionsByTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 400,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 397,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 413,
                        "src": "11715:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 396,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11715:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 399,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 413,
                        "src": "11732:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 398,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11732:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11714:34:0"
                  },
                  "returnParameters": {
                    "id": 405,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 404,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 413,
                        "src": "11771:14:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$5_memory_ptr",
                          "typeString": "uint256[5]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 401,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "11771:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 403,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 402,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11776:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "11771:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$5_storage_ptr",
                            "typeString": "uint256[5]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11770:16:0"
                  },
                  "scope": 509,
                  "src": "11680:182:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 422,
                    "nodeType": "Block",
                    "src": "12019:39:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 418,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "12036:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 419,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getSymbol",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3039,
                            "src": "12036:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_string_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) pure returns (string memory)"
                            }
                          },
                          "id": 420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12036:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 417,
                        "id": 421,
                        "nodeType": "Return",
                        "src": "12029:22:0"
                      }
                    ]
                  },
                  "documentation": "@dev Get the symbol of the token\nreturn string of the token symbol",
                  "id": 423,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getSymbol",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 414,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11980:2:0"
                  },
                  "returnParameters": {
                    "id": 417,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 416,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 423,
                        "src": "12005:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 415,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "12005:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12004:15:0"
                  },
                  "scope": 509,
                  "src": "11962:96:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 438,
                    "nodeType": "Block",
                    "src": "12374:78:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 434,
                              "name": "_requestID",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 425,
                              "src": "12427:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 435,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "12438:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 432,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "12391:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 433,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getTimestampbyRequestIDandIndex",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3059,
                            "src": "12391:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 436,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12391:54:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 431,
                        "id": 437,
                        "nodeType": "Return",
                        "src": "12384:61:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the timestamp for the value based on their index\n@param _requestID is the requestId to look up\n@param _index is the value index to look up\n@return uint timestamp",
                  "id": 439,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getTimestampbyRequestIDandIndex",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 428,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 425,
                        "name": "_requestID",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "12317:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 424,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12317:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 427,
                        "name": "_index",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "12334:11:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 426,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12334:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12316:30:0"
                  },
                  "returnParameters": {
                    "id": 431,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 430,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 439,
                        "src": "12369:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 429,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12369:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12368:6:0"
                  },
                  "scope": 509,
                  "src": "12276:176:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 451,
                    "nodeType": "Block",
                    "src": "13081:45:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 448,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 441,
                              "src": "13113:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 446,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "13098:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 447,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getUintVar",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3074,
                            "src": "13098:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_bytes32_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,bytes32) view returns (uint256)"
                            }
                          },
                          "id": 449,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13098:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 445,
                        "id": 450,
                        "nodeType": "Return",
                        "src": "13091:28:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter for the variables saved under the ZapStorageStruct uintVars variable\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the uintVars under the ZapStorageStruct struct\nThis is an example of how data is saved into the mapping within other functions: \nself.uintVars[keccak256(\"stakerCount\")]\n@return uint of specified variable  ",
                  "id": 452,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getUintVar",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 442,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 441,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 452,
                        "src": "13041:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 440,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "13041:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13040:15:0"
                  },
                  "returnParameters": {
                    "id": 445,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 444,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 452,
                        "src": "13076:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 443,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13076:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13075:6:0"
                  },
                  "scope": 509,
                  "src": "13021:105:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 465,
                    "nodeType": "Block",
                    "src": "13441:52:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 461,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "13462:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 462,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getVariablesOnDeck",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3109,
                            "src": "13462:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (uint256,uint256,string memory)"
                            }
                          },
                          "id": 463,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13462:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$",
                            "typeString": "tuple(uint256,uint256,string memory)"
                          }
                        },
                        "functionReturnParameters": 460,
                        "id": 464,
                        "nodeType": "Return",
                        "src": "13455:31:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for next requestId on queue/request with highest payout at time the function is called\n@return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string",
                  "id": 466,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getVariablesOnDeck",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 453,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "13391:2:0"
                  },
                  "returnParameters": {
                    "id": 460,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 455,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 466,
                        "src": "13416:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 454,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13416:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 457,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 466,
                        "src": "13422:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 456,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13422:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 459,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 466,
                        "src": "13427:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 458,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "13427:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13415:26:0"
                  },
                  "scope": 509,
                  "src": "13364:129:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 481,
                    "nodeType": "Block",
                    "src": "13852:62:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 477,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 468,
                              "src": "13885:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 478,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 470,
                              "src": "13896:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 475,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "13869:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 476,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "isInDispute",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3160,
                            "src": "13869:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_bool_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (bool)"
                            }
                          },
                          "id": 479,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "13869:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 474,
                        "id": 480,
                        "nodeType": "Return",
                        "src": "13862:45:0"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up miners for\n@return bool true if requestId/timestamp is under dispute",
                  "id": 482,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isInDispute",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 471,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 468,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 482,
                        "src": "13791:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 467,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13791:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 470,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 482,
                        "src": "13808:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 469,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13808:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13790:34:0"
                  },
                  "returnParameters": {
                    "id": 474,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 473,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 482,
                        "src": "13847:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 472,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "13847:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13846:6:0"
                  },
                  "scope": 509,
                  "src": "13770:144:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 497,
                    "nodeType": "Block",
                    "src": "14218:63:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 493,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 484,
                              "src": "14252:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 494,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 486,
                              "src": "14263:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 491,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "14235:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 492,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "retrieveData",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3180,
                            "src": "14235:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256)"
                            }
                          },
                          "id": 495,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14235:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 490,
                        "id": 496,
                        "nodeType": "Return",
                        "src": "14228:46:0"
                      }
                    ]
                  },
                  "documentation": "@dev Retreive value from oracle based on timestamp\n@param _requestId being requested\n@param _timestamp to retreive data/value from\n@return value for timestamp submitted",
                  "id": 498,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "retrieveData",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 487,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 484,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "14155:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 483,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14155:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 486,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "14172:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 485,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14172:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14154:34:0"
                  },
                  "returnParameters": {
                    "id": 490,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 489,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 498,
                        "src": "14212:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 488,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14212:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14211:6:0"
                  },
                  "scope": 509,
                  "src": "14133:148:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 507,
                    "nodeType": "Block",
                    "src": "14448:77:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 503,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "14464:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 504,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "totalSupply",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3195,
                            "src": "14464:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 505,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14464:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 502,
                        "id": 506,
                        "nodeType": "Return",
                        "src": "14457:24:0"
                      }
                    ]
                  },
                  "documentation": "@dev Getter for the total_supply of oracle tokens\n@return uint total supply",
                  "id": 508,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalTokenSupply",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 499,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "14416:2:0"
                  },
                  "returnParameters": {
                    "id": 502,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 501,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 508,
                        "src": "14442:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 500,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14442:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14441:6:0"
                  },
                  "scope": 509,
                  "src": "14391:134:0",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 510,
              "src": "494:14034:0"
            }
          ],
          "src": "0:14528:0"
        },
        "id": 0
      },
      "contracts/ZapMaster.sol": {
        "ast": {
          "absolutePath": "contracts/ZapMaster.sol",
          "exportedSymbols": {
            "ZapMaster": [
              609
            ]
          },
          "id": 610,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 511,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:1"
            },
            {
              "absolutePath": "contracts/ZapGetters.sol",
              "file": "./ZapGetters.sol",
              "id": 512,
              "nodeType": "ImportDirective",
              "scope": 610,
              "sourceUnit": 510,
              "src": "25:26:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 513,
                    "name": "ZapGetters",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 509,
                    "src": "324:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ZapGetters_$509",
                      "typeString": "contract ZapGetters"
                    }
                  },
                  "id": 514,
                  "nodeType": "InheritanceSpecifier",
                  "src": "324:10:1"
                }
              ],
              "contractDependencies": [
                509,
                732,
                772,
                845,
                1072,
                1161,
                1186,
                1242
              ],
              "contractKind": "contract",
              "documentation": "@title Zap Master\n@dev This is the Master contract with all zap getter functions and delegate call to Zap. \nThe logic for the functions on this contract is saved on the ZapGettersLibrary, ZapTransfer, \nZapGettersLibrary, and ZapStake",
              "fullyImplemented": false,
              "id": 609,
              "linearizedBaseContracts": [
                609,
                509,
                1186,
                1161,
                1242,
                1072,
                845,
                772,
                732
              ],
              "name": "ZapMaster",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 518,
                  "name": "NewZapAddress",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 517,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 516,
                        "indexed": false,
                        "name": "_newZap",
                        "nodeType": "VariableDeclaration",
                        "scope": 518,
                        "src": "365:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 515,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "365:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "364:17:1"
                  },
                  "src": "345:37:1"
                },
                {
                  "body": {
                    "id": 564,
                    "nodeType": "Block",
                    "src": "701:252:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 523,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "711:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 525,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "init",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3392,
                            "src": "711:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$__$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer)"
                            }
                          },
                          "id": 526,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "711:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 527,
                        "nodeType": "ExpressionStatement",
                        "src": "711:10:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 528,
                                "name": "zap",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "731:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                                }
                              },
                              "id": 533,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "addressVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3689,
                              "src": "731:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 534,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "5f6f776e6572",
                                  "id": 531,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "757:8:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                                    "typeString": "literal_string \"_owner\""
                                  },
                                  "value": "_owner"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                                    "typeString": "literal_string \"_owner\""
                                  }
                                ],
                                "id": 530,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "747:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 532,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "747:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "731:36:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 535,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "770:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "770:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "731:49:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 538,
                        "nodeType": "ExpressionStatement",
                        "src": "731:49:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 548,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 539,
                                "name": "zap",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "790:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                                }
                              },
                              "id": 544,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "addressVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3689,
                              "src": "790:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 545,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "5f6465697479",
                                  "id": 542,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "816:8:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                    "typeString": "literal_string \"_deity\""
                                  },
                                  "value": "_deity"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                    "typeString": "literal_string \"_deity\""
                                  }
                                ],
                                "id": 541,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "806:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 543,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "806:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "790:36:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 546,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "829:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "829:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "790:49:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 549,
                        "nodeType": "ExpressionStatement",
                        "src": "790:49:1"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 558,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 550,
                                "name": "zap",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "849:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                                }
                              },
                              "id": 555,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "addressVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3689,
                              "src": "849:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 556,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7a6170436f6e7472616374",
                                  "id": 553,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "875:13:1",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                    "typeString": "literal_string \"zapContract\""
                                  },
                                  "value": "zapContract"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                    "typeString": "literal_string \"zapContract\""
                                  }
                                ],
                                "id": 552,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "865:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 554,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "865:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "849:41:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 557,
                            "name": "_zapContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 520,
                            "src": "892:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "849:55:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 559,
                        "nodeType": "ExpressionStatement",
                        "src": "849:55:1"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 561,
                              "name": "_zapContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 520,
                              "src": "933:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 560,
                            "name": "NewZapAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 518,
                            "src": "919:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "919:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 563,
                        "nodeType": "EmitStatement",
                        "src": "914:32:1"
                      }
                    ]
                  },
                  "documentation": "@dev The constructor sets the original `zapStorageOwner` of the contract to the sender\naccount, the zap contract to the Zap master address and owner to the Zap master owner address \n@param _zapContract is the address for the zap contract",
                  "id": 565,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 521,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 520,
                        "name": "_zapContract",
                        "nodeType": "VariableDeclaration",
                        "scope": 565,
                        "src": "672:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 519,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "672:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "671:22:1"
                  },
                  "returnParameters": {
                    "id": 522,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "701:0:1"
                  },
                  "scope": 609,
                  "src": "659:294:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 576,
                    "nodeType": "Block",
                    "src": "1209:43:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 573,
                              "name": "_newDeity",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 567,
                              "src": "1235:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 570,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "1219:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 572,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "changeDeity",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2391,
                            "src": "1219:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address)"
                            }
                          },
                          "id": 574,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1219:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 575,
                        "nodeType": "ExpressionStatement",
                        "src": "1219:26:1"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@dev Only needs to be in library\n@param _newDeity the new Deity in the contract",
                  "id": 577,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "changeDeity",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 568,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 567,
                        "name": "_newDeity",
                        "nodeType": "VariableDeclaration",
                        "scope": 577,
                        "src": "1182:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 566,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1182:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1181:19:1"
                  },
                  "returnParameters": {
                    "id": 569,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1209:0:1"
                  },
                  "scope": 609,
                  "src": "1161:91:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 588,
                    "nodeType": "Block",
                    "src": "1493:52:1",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 585,
                              "name": "_zapContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 579,
                              "src": "1525:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 582,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "1503:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 584,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "changeZapContract",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2425,
                            "src": "1503:21:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address)"
                            }
                          },
                          "id": 586,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1503:35:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 587,
                        "nodeType": "ExpressionStatement",
                        "src": "1503:35:1"
                      }
                    ]
                  },
                  "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\n@param _zapContract the address of the new Zap Contract",
                  "id": 589,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "changeZapContract",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 580,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 579,
                        "name": "_zapContract",
                        "nodeType": "VariableDeclaration",
                        "scope": 589,
                        "src": "1463:20:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 578,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1463:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1462:22:1"
                  },
                  "returnParameters": {
                    "id": 581,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1493:0:1"
                  },
                  "scope": 609,
                  "src": "1436:109:1",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 607,
                    "nodeType": "Block",
                    "src": "1708:629:1",
                    "statements": [
                      {
                        "assignments": [
                          593
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 593,
                            "name": "addr",
                            "nodeType": "VariableDeclaration",
                            "scope": 607,
                            "src": "1718:12:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 592,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1718:7:1",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 600,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 594,
                              "name": "zap",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "1733:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage ref"
                              }
                            },
                            "id": 595,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "addressVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3689,
                            "src": "1733:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 599,
                          "indexExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "7a6170436f6e7472616374",
                                "id": 597,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1759:13:1",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                  "typeString": "literal_string \"zapContract\""
                                },
                                "value": "zapContract"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                  "typeString": "literal_string \"zapContract\""
                                }
                              ],
                              "id": 596,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4284,
                              "src": "1749:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 598,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1749:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1733:41:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1718:56:1"
                      },
                      {
                        "assignments": [
                          602
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 602,
                            "name": "_calldata",
                            "nodeType": "VariableDeclaration",
                            "scope": 607,
                            "src": "1784:22:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 601,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "1784:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 605,
                        "initialValue": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 603,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4290,
                            "src": "1809:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 604,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "data",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1809:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1784:33:1"
                      },
                      {
                        "externalReferences": [
                          {
                            "_calldata": {
                              "declaration": 602,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1895:9:1",
                              "valueSize": 1
                            }
                          },
                          {
                            "_calldata": {
                              "declaration": 602,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1919:9:1",
                              "valueSize": 1
                            }
                          },
                          {
                            "addr": {
                              "declaration": 593,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1885:4:1",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 606,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                        "src": "1827:510:1"
                      }
                    ]
                  },
                  "documentation": "@dev This is the fallback function that allows contracts to call the zap contract at the address stored",
                  "id": 608,
                  "implemented": true,
                  "kind": "fallback",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 590,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1688:2:1"
                  },
                  "returnParameters": {
                    "id": 591,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1708:0:1"
                  },
                  "scope": 609,
                  "src": "1679:658:1",
                  "stateMutability": "payable",
                  "superFunction": null,
                  "visibility": "external"
                }
              ],
              "scope": 610,
              "src": "302:2037:1"
            }
          ],
          "src": "0:2339:1"
        },
        "id": 1
      },
      "contracts/ZapToken.sol": {
        "ast": {
          "absolutePath": "contracts/ZapToken.sol",
          "exportedSymbols": {
            "BasicToken": [
              845
            ],
            "ERC20": [
              772
            ],
            "ERC20Basic": [
              732
            ],
            "MintableToken": [
              1161
            ],
            "SafeMath": [
              705
            ],
            "StandardToken": [
              1072
            ],
            "ZapToken": [
              1186
            ]
          },
          "id": 1187,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 611,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:2"
            },
            {
              "absolutePath": "contracts/libraries/Ownable.sol",
              "file": "./libraries/Ownable.sol",
              "id": 612,
              "nodeType": "ImportDirective",
              "scope": 1187,
              "sourceUnit": 1243,
              "src": "66:33:2",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": null,
              "fullyImplemented": true,
              "id": 705,
              "linearizedBaseContracts": [
                705
              ],
              "name": "SafeMath",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 641,
                    "nodeType": "Block",
                    "src": "194:94:2",
                    "statements": [
                      {
                        "assignments": [
                          622
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 622,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 641,
                            "src": "205:9:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 621,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "205:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 626,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 623,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 614,
                            "src": "217:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 624,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 616,
                            "src": "221:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "217:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "205:17:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 636,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 630,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 628,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 614,
                                  "src": "240:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 629,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "245:1:2",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "240:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 635,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 633,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 631,
                                    "name": "c",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 622,
                                    "src": "250:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 632,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 614,
                                    "src": "254:1:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "250:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 634,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 616,
                                  "src": "259:1:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "250:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "240:20:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 627,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "233:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "233:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 638,
                        "nodeType": "ExpressionStatement",
                        "src": "233:28:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 639,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 622,
                          "src": "279:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 620,
                        "id": 640,
                        "nodeType": "Return",
                        "src": "272:8:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 642,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mul",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 617,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 614,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "140:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 613,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "140:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 616,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "151:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 615,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "151:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "139:22:2"
                  },
                  "returnParameters": {
                    "id": 620,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 619,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 642,
                        "src": "185:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 618,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "185:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "184:9:2"
                  },
                  "scope": 705,
                  "src": "127:161:2",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 659,
                    "nodeType": "Block",
                    "src": "361:221:2",
                    "statements": [
                      {
                        "assignments": [
                          652
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 652,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 659,
                            "src": "451:9:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 651,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "451:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 656,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 655,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 653,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 644,
                            "src": "463:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 654,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 646,
                            "src": "467:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "463:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "451:17:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 657,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 652,
                          "src": "573:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 650,
                        "id": 658,
                        "nodeType": "Return",
                        "src": "566:8:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 660,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "div",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 647,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 644,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 660,
                        "src": "307:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 643,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "307:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 646,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 660,
                        "src": "318:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 645,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "318:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "306:22:2"
                  },
                  "returnParameters": {
                    "id": 650,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 649,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 660,
                        "src": "352:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 648,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "352:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "351:9:2"
                  },
                  "scope": 705,
                  "src": "294:288:2",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 679,
                    "nodeType": "Block",
                    "src": "655:56:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 672,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 670,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 664,
                                "src": "673:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 671,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 662,
                                "src": "678:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "673:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 669,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "666:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 673,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "666:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 674,
                        "nodeType": "ExpressionStatement",
                        "src": "666:14:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 675,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 662,
                            "src": "698:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 676,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 664,
                            "src": "702:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "698:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 668,
                        "id": 678,
                        "nodeType": "Return",
                        "src": "691:12:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 680,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 665,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 662,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 680,
                        "src": "601:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 661,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "601:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 664,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 680,
                        "src": "612:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 663,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "612:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "600:22:2"
                  },
                  "returnParameters": {
                    "id": 668,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 667,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 680,
                        "src": "646:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 666,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "646:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "645:9:2"
                  },
                  "scope": 705,
                  "src": "588:123:2",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 703,
                    "nodeType": "Block",
                    "src": "784:80:2",
                    "statements": [
                      {
                        "assignments": [
                          690
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 690,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 703,
                            "src": "795:9:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 689,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "795:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 694,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 693,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 691,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 682,
                            "src": "807:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 692,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 684,
                            "src": "811:1:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "807:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "795:17:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 698,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 696,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 690,
                                "src": "830:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 697,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 682,
                                "src": "835:1:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "830:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 695,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "823:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "823:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 700,
                        "nodeType": "ExpressionStatement",
                        "src": "823:14:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 701,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 690,
                          "src": "855:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 688,
                        "id": 702,
                        "nodeType": "Return",
                        "src": "848:8:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 704,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "add",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 685,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 682,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 704,
                        "src": "730:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 681,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "730:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 684,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 704,
                        "src": "741:9:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 683,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "741:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "729:22:2"
                  },
                  "returnParameters": {
                    "id": 688,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 687,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 704,
                        "src": "775:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 686,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "775:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "774:9:2"
                  },
                  "scope": 705,
                  "src": "717:147:2",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 1187,
              "src": "103:764:2"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": false,
              "id": 732,
              "linearizedBaseContracts": [
                732
              ],
              "name": "ERC20Basic",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 707,
                  "name": "totalSupply",
                  "nodeType": "VariableDeclaration",
                  "scope": 732,
                  "src": "898:26:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 706,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "898:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 714,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 710,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 709,
                        "name": "who",
                        "nodeType": "VariableDeclaration",
                        "scope": 714,
                        "src": "950:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 708,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "950:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "949:13:2"
                  },
                  "returnParameters": {
                    "id": 713,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 712,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 714,
                        "src": "984:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 711,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "984:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "983:9:2"
                  },
                  "scope": 732,
                  "src": "931:62:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 723,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 719,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 716,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 723,
                        "src": "1017:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 715,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1017:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 718,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 723,
                        "src": "1029:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 717,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1029:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1016:27:2"
                  },
                  "returnParameters": {
                    "id": 722,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 721,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 723,
                        "src": "1060:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 720,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1060:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1059:6:2"
                  },
                  "scope": 732,
                  "src": "999:67:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 731,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 730,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 725,
                        "indexed": true,
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 731,
                        "src": "1087:20:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 724,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1087:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 727,
                        "indexed": true,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 731,
                        "src": "1109:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 726,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1109:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 729,
                        "indexed": false,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 731,
                        "src": "1129:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 728,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1129:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1086:57:2"
                  },
                  "src": "1072:72:2"
                }
              ],
              "scope": 1187,
              "src": "871:276:2"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 733,
                    "name": "ERC20Basic",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 732,
                    "src": "1262:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Basic_$732",
                      "typeString": "contract ERC20Basic"
                    }
                  },
                  "id": 734,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1262:10:2"
                }
              ],
              "contractDependencies": [
                732
              ],
              "contractKind": "contract",
              "documentation": "@title ERC20 interface\r\n@dev see https://github.com/ethereum/EIPs/issues/20\r",
              "fullyImplemented": false,
              "id": 772,
              "linearizedBaseContracts": [
                772,
                732
              ],
              "name": "ERC20",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": null,
                  "documentation": null,
                  "id": 743,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 739,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 736,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 743,
                        "src": "1299:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 735,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1299:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 738,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 743,
                        "src": "1314:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 737,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1314:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1298:32:2"
                  },
                  "returnParameters": {
                    "id": 742,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 741,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 743,
                        "src": "1352:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 740,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1352:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1351:9:2"
                  },
                  "scope": 772,
                  "src": "1280:81:2",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 754,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 750,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 745,
                        "name": "from",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "1389:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 744,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1389:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 747,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "1403:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 746,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1403:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 749,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "1415:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 748,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1415:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1388:41:2"
                  },
                  "returnParameters": {
                    "id": 753,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 752,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 754,
                        "src": "1446:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 751,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1446:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1445:6:2"
                  },
                  "scope": 772,
                  "src": "1367:85:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": null,
                  "documentation": null,
                  "id": 763,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 756,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 763,
                        "src": "1475:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 755,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1475:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 758,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 763,
                        "src": "1492:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 757,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1492:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1474:32:2"
                  },
                  "returnParameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 761,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 763,
                        "src": "1523:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 760,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1523:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1522:6:2"
                  },
                  "scope": 772,
                  "src": "1458:71:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 771,
                  "name": "Approval",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 770,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 765,
                        "indexed": true,
                        "name": "owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "1550:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 764,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1550:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 767,
                        "indexed": true,
                        "name": "spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "1573:23:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 766,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1573:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 769,
                        "indexed": false,
                        "name": "value",
                        "nodeType": "VariableDeclaration",
                        "scope": 771,
                        "src": "1598:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 768,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1598:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1549:63:2"
                  },
                  "src": "1535:78:2"
                }
              ],
              "scope": 1187,
              "src": "1244:372:2"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 773,
                    "name": "ERC20Basic",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 732,
                    "src": "1643:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Basic_$732",
                      "typeString": "contract ERC20Basic"
                    }
                  },
                  "id": 774,
                  "nodeType": "InheritanceSpecifier",
                  "src": "1643:10:2"
                }
              ],
              "contractDependencies": [
                732
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 845,
              "linearizedBaseContracts": [
                845,
                732
              ],
              "name": "BasicToken",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 777,
                  "libraryName": {
                    "contractScope": null,
                    "id": 775,
                    "name": "SafeMath",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 705,
                    "src": "1667:8:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMath_$705",
                      "typeString": "library SafeMath"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "1661:27:2",
                  "typeName": {
                    "id": 776,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1680:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "constant": false,
                  "id": 781,
                  "name": "balances",
                  "nodeType": "VariableDeclaration",
                  "scope": 845,
                  "src": "1694:36:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 780,
                    "keyType": {
                      "id": 778,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1702:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1694:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 779,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1713:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 831,
                    "nodeType": "Block",
                    "src": "1971:302:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 795,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 791,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 783,
                                "src": "1990:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 793,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2005:1:2",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 792,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1997:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 794,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1997:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "1990:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 790,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1982:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 796,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1982:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 797,
                        "nodeType": "ExpressionStatement",
                        "src": "1982:26:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 809,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 798,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "2087:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 801,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 799,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "2096:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 800,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2096:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2087:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 807,
                                "name": "_value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 785,
                                "src": "2135:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 802,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 781,
                                  "src": "2110:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 805,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 803,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "2119:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 804,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "2119:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2110:20:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 806,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 680,
                              "src": "2110:24:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2110:32:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2087:55:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 810,
                        "nodeType": "ExpressionStatement",
                        "src": "2087:55:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 820,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 811,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "2153:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 813,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 812,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 783,
                              "src": "2162:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2153:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 818,
                                "name": "_value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 785,
                                "src": "2187:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 814,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 781,
                                  "src": "2169:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 816,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 815,
                                  "name": "_to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 783,
                                  "src": "2178:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2169:13:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 817,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 704,
                              "src": "2169:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 819,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2169:25:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2153:41:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 821,
                        "nodeType": "ExpressionStatement",
                        "src": "2153:41:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 823,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "2219:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 824,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2219:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 825,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 783,
                              "src": "2231:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 826,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 785,
                              "src": "2236:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 822,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 731,
                            "src": "2210:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 827,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2210:33:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 828,
                        "nodeType": "EmitStatement",
                        "src": "2205:38:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 829,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2261:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 789,
                        "id": 830,
                        "nodeType": "Return",
                        "src": "2254:11:2"
                      }
                    ]
                  },
                  "documentation": "@dev transfer token for a specified address\r\n@param _to The address to transfer to.\r\n@param _value The amount to be transferred.\r",
                  "id": 832,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 786,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 783,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "1920:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 782,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1920:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 785,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "1933:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 784,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1933:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1919:29:2"
                  },
                  "returnParameters": {
                    "id": 789,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 788,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 832,
                        "src": "1965:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 787,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1965:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1964:6:2"
                  },
                  "scope": 845,
                  "src": "1902:371:2",
                  "stateMutability": "nonpayable",
                  "superFunction": 723,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 843,
                    "nodeType": "Block",
                    "src": "2565:42:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 839,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 781,
                            "src": "2583:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 841,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 840,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 834,
                            "src": "2592:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2583:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 838,
                        "id": 842,
                        "nodeType": "Return",
                        "src": "2576:23:2"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the balance of the specified address.\r\n@param _owner The address to query the the balance of.\r\n@return An uint256 representing the amount owned by the passed address.\r",
                  "id": 844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 835,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 834,
                        "name": "_owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "2511:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 833,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2511:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2510:16:2"
                  },
                  "returnParameters": {
                    "id": 838,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 837,
                        "name": "balance",
                        "nodeType": "VariableDeclaration",
                        "scope": 844,
                        "src": "2548:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 836,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2548:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2547:17:2"
                  },
                  "scope": 845,
                  "src": "2492:115:2",
                  "stateMutability": "view",
                  "superFunction": 714,
                  "visibility": "public"
                }
              ],
              "scope": 1187,
              "src": "1620:990:2"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 846,
                    "name": "ERC20",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 772,
                    "src": "3593:5:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$772",
                      "typeString": "contract ERC20"
                    }
                  },
                  "id": 847,
                  "nodeType": "InheritanceSpecifier",
                  "src": "3593:5:2"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 848,
                    "name": "BasicToken",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 845,
                    "src": "3600:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_BasicToken_$845",
                      "typeString": "contract BasicToken"
                    }
                  },
                  "id": 849,
                  "nodeType": "InheritanceSpecifier",
                  "src": "3600:10:2"
                }
              ],
              "contractDependencies": [
                732,
                772,
                845
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1072,
              "linearizedBaseContracts": [
                1072,
                845,
                772,
                732
              ],
              "name": "StandardToken",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 855,
                  "name": "allowed",
                  "nodeType": "VariableDeclaration",
                  "scope": 1072,
                  "src": "3618:57:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 854,
                    "keyType": {
                      "id": 850,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3627:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "3618:49:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueType": {
                      "id": 853,
                      "keyType": {
                        "id": 851,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3647:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "3638:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueType": {
                        "id": 852,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3658:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 925,
                    "nodeType": "Block",
                    "src": "4059:495:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 871,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 867,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 859,
                                "src": "4078:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 869,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4093:1:2",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 868,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4085:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 870,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4085:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "4078:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 866,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "4070:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 872,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4070:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 873,
                        "nodeType": "ExpressionStatement",
                        "src": "4070:26:2"
                      },
                      {
                        "assignments": [
                          875
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 875,
                            "name": "_allowance",
                            "nodeType": "VariableDeclaration",
                            "scope": 925,
                            "src": "4107:18:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 874,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4107:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 882,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 876,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 855,
                              "src": "4128:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 878,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 877,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 857,
                              "src": "4136:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4128:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 881,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 879,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "4143:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4143:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4128:26:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4107:47:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 892,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 883,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "4321:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 885,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 884,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 857,
                              "src": "4330:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4321:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 890,
                                "name": "_value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 861,
                                "src": "4359:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 886,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 781,
                                  "src": "4339:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 888,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 887,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 857,
                                  "src": "4348:5:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4339:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 889,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 680,
                              "src": "4339:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 891,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4339:27:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4321:45:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 893,
                        "nodeType": "ExpressionStatement",
                        "src": "4321:45:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 903,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 894,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "4377:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 896,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 895,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 859,
                              "src": "4386:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4377:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 901,
                                "name": "_value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 861,
                                "src": "4411:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 897,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 781,
                                  "src": "4393:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 899,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 898,
                                  "name": "_to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 859,
                                  "src": "4402:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4393:13:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 900,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 704,
                              "src": "4393:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 902,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4393:25:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4377:41:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 904,
                        "nodeType": "ExpressionStatement",
                        "src": "4377:41:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 915,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 905,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 855,
                                "src": "4429:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 909,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 906,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 857,
                                "src": "4437:5:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4429:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 910,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 907,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "4444:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 908,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "4444:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "4429:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 913,
                                "name": "_value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 861,
                                "src": "4473:6:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 911,
                                "name": "_allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 875,
                                "src": "4458:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 912,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 680,
                              "src": "4458:14:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 914,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4458:22:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4429:51:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 916,
                        "nodeType": "ExpressionStatement",
                        "src": "4429:51:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 918,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 857,
                              "src": "4505:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 919,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 859,
                              "src": "4512:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 920,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 861,
                              "src": "4517:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 917,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 731,
                            "src": "4496:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4496:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 922,
                        "nodeType": "EmitStatement",
                        "src": "4491:33:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 923,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4542:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 865,
                        "id": 924,
                        "nodeType": "Return",
                        "src": "4535:11:2"
                      }
                    ]
                  },
                  "documentation": "@dev Transfer tokens from one address to another\r\n@param _from address The address which you want to send tokens from\r\n@param _to address The address which you want to transfer to\r\n@param _value uint256 the amount of tokens to be transferred\r",
                  "id": 926,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 862,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 857,
                        "name": "_from",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "3993:13:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 856,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3993:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 859,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "4008:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 858,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4008:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 861,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "4021:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 860,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4021:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3992:44:2"
                  },
                  "returnParameters": {
                    "id": 865,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 864,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 926,
                        "src": "4053:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 863,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4053:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4052:6:2"
                  },
                  "scope": 1072,
                  "src": "3971:583:2",
                  "stateMutability": "nonpayable",
                  "superFunction": 754,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 953,
                    "nodeType": "Block",
                    "src": "5282:133:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 935,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 855,
                                "src": "5293:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 939,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 936,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "5301:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 937,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "5301:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5293:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 940,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 938,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 928,
                              "src": "5313:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5293:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 941,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 930,
                            "src": "5325:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5293:38:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 943,
                        "nodeType": "ExpressionStatement",
                        "src": "5293:38:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 945,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "5356:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 946,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "5356:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 947,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 928,
                              "src": "5368:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 948,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 930,
                              "src": "5378:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 944,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "5347:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5347:38:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 950,
                        "nodeType": "EmitStatement",
                        "src": "5342:43:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 951,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5403:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 934,
                        "id": 952,
                        "nodeType": "Return",
                        "src": "5396:11:2"
                      }
                    ]
                  },
                  "documentation": "@dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\nand the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\nrace condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n@param _spender The address which will spend the funds.\r\n@param _value The amount of tokens to be spent.\r",
                  "id": 954,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 931,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 928,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 954,
                        "src": "5226:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 927,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5226:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 930,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 954,
                        "src": "5244:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 929,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5244:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5225:34:2"
                  },
                  "returnParameters": {
                    "id": 934,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 933,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 954,
                        "src": "5276:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 932,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "5276:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5275:6:2"
                  },
                  "scope": 1072,
                  "src": "5209:206:2",
                  "stateMutability": "nonpayable",
                  "superFunction": 763,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 969,
                    "nodeType": "Block",
                    "src": "5847:51:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 963,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 855,
                              "src": "5865:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 965,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 964,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 956,
                              "src": "5873:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5865:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 967,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 966,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 958,
                            "src": "5881:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5865:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 962,
                        "id": 968,
                        "nodeType": "Return",
                        "src": "5858:32:2"
                      }
                    ]
                  },
                  "documentation": "@dev Function to check the amount of tokens that an owner allowed to a spender.\r\n@param _owner address The address which owns the funds.\r\n@param _spender address The address which will spend the funds.\r\n@return A uint256 specifying the amount of tokens still available for the spender.\r",
                  "id": 970,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 959,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 956,
                        "name": "_owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 970,
                        "src": "5773:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 955,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5773:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 958,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 970,
                        "src": "5789:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 957,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5789:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5772:34:2"
                  },
                  "returnParameters": {
                    "id": 962,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 961,
                        "name": "remaining",
                        "nodeType": "VariableDeclaration",
                        "scope": 970,
                        "src": "5828:17:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 960,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5828:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5827:19:2"
                  },
                  "scope": 1072,
                  "src": "5754:144:2",
                  "stateMutability": "view",
                  "superFunction": 743,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1010,
                    "nodeType": "Block",
                    "src": "6260:196:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 994,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 979,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 855,
                                "src": "6271:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 983,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 980,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "6279:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 981,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6279:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6271:19:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 984,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 982,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "6291:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "6271:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 992,
                                "name": "_addedValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 974,
                                "src": "6337:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 985,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 855,
                                    "src": "6303:7:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 988,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 986,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4290,
                                      "src": "6311:3:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 987,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "6311:10:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6303:19:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 990,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 989,
                                  "name": "_spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 972,
                                  "src": "6323:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6303:29:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 991,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 704,
                              "src": "6303:33:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 993,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6303:46:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6271:78:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 995,
                        "nodeType": "ExpressionStatement",
                        "src": "6271:78:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 997,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "6374:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 998,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "6374:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 999,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 972,
                              "src": "6386:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1000,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 855,
                                  "src": "6396:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 1003,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1001,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "6404:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1002,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "6404:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6396:19:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1005,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1004,
                                "name": "_spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 972,
                                "src": "6416:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6396:29:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 996,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "6365:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 1006,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6365:61:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1007,
                        "nodeType": "EmitStatement",
                        "src": "6360:66:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1008,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6444:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 978,
                        "id": 1009,
                        "nodeType": "Return",
                        "src": "6437:11:2"
                      }
                    ]
                  },
                  "documentation": "approve should be called when allowed[_spender] == 0. To increment\r\nallowed value is better to use this function to avoid 2 calls (and wait until\r\nthe first transaction is mined)\r\nFrom MonolithDAO Token.sol\r",
                  "id": 1011,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "increaseApproval",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 975,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 972,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1011,
                        "src": "6185:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 971,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6185:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 974,
                        "name": "_addedValue",
                        "nodeType": "VariableDeclaration",
                        "scope": 1011,
                        "src": "6203:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 973,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6203:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6184:36:2"
                  },
                  "returnParameters": {
                    "id": 978,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 977,
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 1011,
                        "src": "6246:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 976,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6246:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6245:14:2"
                  },
                  "scope": 1072,
                  "src": "6158:298:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1070,
                    "nodeType": "Block",
                    "src": "6569:361:2",
                    "statements": [
                      {
                        "assignments": [
                          1021
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1021,
                            "name": "oldValue",
                            "nodeType": "VariableDeclaration",
                            "scope": 1070,
                            "src": "6580:13:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1020,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "6580:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1028,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1022,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 855,
                              "src": "6596:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 1025,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1023,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "6604:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1024,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "6604:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6596:19:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1027,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1026,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1013,
                            "src": "6616:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6596:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6580:45:2"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1031,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1029,
                            "name": "_subtractedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1015,
                            "src": "6640:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1030,
                            "name": "oldValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1021,
                            "src": "6659:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6640:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1054,
                          "nodeType": "Block",
                          "src": "6735:89:2",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1052,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 1042,
                                      "name": "allowed",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 855,
                                      "src": "6750:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                        "typeString": "mapping(address => mapping(address => uint256))"
                                      }
                                    },
                                    "id": 1046,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1043,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4290,
                                        "src": "6758:3:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1044,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "6758:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6750:19:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 1047,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1045,
                                    "name": "_spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1013,
                                    "src": "6770:8:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6750:29:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 1050,
                                      "name": "_subtractedValue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1015,
                                      "src": "6795:16:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1048,
                                      "name": "oldValue",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1021,
                                      "src": "6782:8:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1049,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 680,
                                    "src": "6782:12:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1051,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6782:30:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6750:62:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1053,
                              "nodeType": "ExpressionStatement",
                              "src": "6750:62:2"
                            }
                          ]
                        },
                        "id": 1055,
                        "nodeType": "IfStatement",
                        "src": "6636:188:2",
                        "trueBody": {
                          "id": 1041,
                          "nodeType": "Block",
                          "src": "6669:60:2",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 1032,
                                      "name": "allowed",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 855,
                                      "src": "6684:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                        "typeString": "mapping(address => mapping(address => uint256))"
                                      }
                                    },
                                    "id": 1036,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1033,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4290,
                                        "src": "6692:3:2",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1034,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "6692:10:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6684:19:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 1037,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1035,
                                    "name": "_spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1013,
                                    "src": "6704:8:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "6684:29:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1038,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6716:1:2",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "6684:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1040,
                              "nodeType": "ExpressionStatement",
                              "src": "6684:33:2"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1057,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "6848:3:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1058,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "6848:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1059,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1013,
                              "src": "6860:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1060,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 855,
                                  "src": "6870:7:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 1063,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1061,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "6878:3:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1062,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "6878:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6870:19:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1065,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1064,
                                "name": "_spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1013,
                                "src": "6890:8:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6870:29:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1056,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 771,
                            "src": "6839:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 1066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6839:61:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1067,
                        "nodeType": "EmitStatement",
                        "src": "6834:66:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1068,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6918:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 1019,
                        "id": 1069,
                        "nodeType": "Return",
                        "src": "6911:11:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1071,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decreaseApproval",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1016,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1013,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "6489:16:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1012,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6489:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1015,
                        "name": "_subtractedValue",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "6507:21:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1014,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6507:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6488:41:2"
                  },
                  "returnParameters": {
                    "id": 1019,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1018,
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 1071,
                        "src": "6555:12:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1017,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6555:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6554:14:2"
                  },
                  "scope": 1072,
                  "src": "6462:468:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 1187,
              "src": "3567:3366:2"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 1073,
                    "name": "StandardToken",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1072,
                    "src": "6963:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_StandardToken_$1072",
                      "typeString": "contract StandardToken"
                    }
                  },
                  "id": 1074,
                  "nodeType": "InheritanceSpecifier",
                  "src": "6963:13:2"
                },
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 1075,
                    "name": "Ownable",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1242,
                    "src": "6978:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Ownable_$1242",
                      "typeString": "contract Ownable"
                    }
                  },
                  "id": 1076,
                  "nodeType": "InheritanceSpecifier",
                  "src": "6978:7:2"
                }
              ],
              "contractDependencies": [
                732,
                772,
                845,
                1072,
                1242
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1161,
              "linearizedBaseContracts": [
                1161,
                1242,
                1072,
                845,
                772,
                732
              ],
              "name": "MintableToken",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1082,
                  "name": "Mint",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1081,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1078,
                        "indexed": true,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1082,
                        "src": "7004:18:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1077,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7004:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1080,
                        "indexed": false,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1082,
                        "src": "7024:14:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1079,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7024:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7003:36:2"
                  },
                  "src": "6993:47:2"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1084,
                  "name": "MintFinished",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1083,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7064:2:2"
                  },
                  "src": "7046:21:2"
                },
                {
                  "constant": false,
                  "id": 1087,
                  "name": "mintingFinished",
                  "nodeType": "VariableDeclaration",
                  "scope": 1161,
                  "src": "7073:35:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1085,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "7073:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "66616c7365",
                    "id": 1086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "7103:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1095,
                    "nodeType": "Block",
                    "src": "7134:56:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1091,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "7153:16:2",
                              "subExpression": {
                                "argumentTypes": null,
                                "id": 1090,
                                "name": "mintingFinished",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1087,
                                "src": "7154:15:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1089,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "7145:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7145:25:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1093,
                        "nodeType": "ExpressionStatement",
                        "src": "7145:25:2"
                      },
                      {
                        "id": 1094,
                        "nodeType": "PlaceholderStatement",
                        "src": "7181:1:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1096,
                  "name": "canMint",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1088,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7131:2:2"
                  },
                  "src": "7115:75:2",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1142,
                    "nodeType": "Block",
                    "src": "7532:216:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1109,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 707,
                            "src": "7543:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1112,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1100,
                                "src": "7573:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 1110,
                                "name": "totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 707,
                                "src": "7557:11:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 704,
                              "src": "7557:15:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7557:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7543:38:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1115,
                        "nodeType": "ExpressionStatement",
                        "src": "7543:38:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1125,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1116,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 781,
                              "src": "7592:8:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 1118,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1117,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "7601:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "7592:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1123,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1100,
                                "src": "7626:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 1119,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 781,
                                  "src": "7608:8:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 1121,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1120,
                                  "name": "_to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1098,
                                  "src": "7617:3:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7608:13:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1122,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "add",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 704,
                              "src": "7608:17:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1124,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7608:26:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7592:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1126,
                        "nodeType": "ExpressionStatement",
                        "src": "7592:42:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1128,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "7655:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1129,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1100,
                              "src": "7660:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1127,
                            "name": "Mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1082,
                            "src": "7650:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7650:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1131,
                        "nodeType": "EmitStatement",
                        "src": "7645:23:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1134,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7701:1:2",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1133,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7693:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1135,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7693:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1136,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1098,
                              "src": "7705:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1137,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1100,
                              "src": "7710:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1132,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 731,
                            "src": "7684:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 1138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7684:34:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1139,
                        "nodeType": "EmitStatement",
                        "src": "7679:39:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7736:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 1108,
                        "id": 1141,
                        "nodeType": "Return",
                        "src": "7729:11:2"
                      }
                    ]
                  },
                  "documentation": "@dev Function to mint tokens\r\n@param _to The address that will receive the minted tokens.\r\n@param _amount The amount of tokens to mint.\r\n@return A boolean that indicates if the operation was successful.\r",
                  "id": 1143,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 1103,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 1102,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1216,
                        "src": "7492:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7492:9:2"
                    },
                    {
                      "arguments": null,
                      "id": 1105,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 1104,
                        "name": "canMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1096,
                        "src": "7502:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7502:7:2"
                    }
                  ],
                  "name": "mint",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1101,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1098,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1143,
                        "src": "7462:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1097,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7462:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1100,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1143,
                        "src": "7475:15:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1099,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7475:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7461:30:2"
                  },
                  "returnParameters": {
                    "id": 1108,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1107,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1143,
                        "src": "7526:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1106,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7526:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7525:6:2"
                  },
                  "scope": 1161,
                  "src": "7448:300:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1159,
                    "nodeType": "Block",
                    "src": "7935:93:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1152,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1150,
                            "name": "mintingFinished",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1087,
                            "src": "7946:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 1151,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7964:4:2",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "7946:22:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1153,
                        "nodeType": "ExpressionStatement",
                        "src": "7946:22:2"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1154,
                            "name": "MintFinished",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "7984:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 1155,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7984:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1156,
                        "nodeType": "EmitStatement",
                        "src": "7979:19:2"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1157,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8016:4:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 1149,
                        "id": 1158,
                        "nodeType": "Return",
                        "src": "8009:11:2"
                      }
                    ]
                  },
                  "documentation": "@dev Function to stop minting new tokens.\r\n@return True if the operation was successful.\r",
                  "id": 1160,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 1146,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 1145,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1216,
                        "src": "7903:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7903:9:2"
                    }
                  ],
                  "name": "finishMinting",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1144,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "7900:2:2"
                  },
                  "returnParameters": {
                    "id": 1149,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1148,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1160,
                        "src": "7929:4:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1147,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7929:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7928:6:2"
                  },
                  "scope": 1161,
                  "src": "7878:150:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 1187,
              "src": "6937:1094:2"
            },
            {
              "baseContracts": [
                {
                  "arguments": null,
                  "baseName": {
                    "contractScope": null,
                    "id": 1162,
                    "name": "MintableToken",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1161,
                    "src": "8056:13:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MintableToken_$1161",
                      "typeString": "contract MintableToken"
                    }
                  },
                  "id": 1163,
                  "nodeType": "InheritanceSpecifier",
                  "src": "8056:13:2"
                }
              ],
              "contractDependencies": [
                732,
                772,
                845,
                1072,
                1161,
                1242
              ],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1186,
              "linearizedBaseContracts": [
                1186,
                1161,
                1242,
                1072,
                845,
                772,
                732
              ],
              "name": "ZapToken",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 1166,
                  "name": "name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1186,
                  "src": "8077:26:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1164,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8077:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "5a6170",
                    "id": 1165,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8098:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_53bcfc4be5ac9bd7b6d26a5dea686ec466227df104b85a4c1f3ee46c93fb2d03",
                      "typeString": "literal_string \"Zap\""
                    },
                    "value": "Zap"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 1169,
                  "name": "symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1186,
                  "src": "8110:28:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1167,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "8110:6:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "5a4150",
                    "id": 1168,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8133:5:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_a295de54dfff7eb534665d86c07831e5a065b06722d46c813896dec564e99070",
                      "typeString": "literal_string \"ZAP\""
                    },
                    "value": "ZAP"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 1172,
                  "name": "decimals",
                  "nodeType": "VariableDeclaration",
                  "scope": 1186,
                  "src": "8145:28:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1170,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "8145:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "argumentTypes": null,
                    "hexValue": "3138",
                    "id": 1171,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8171:2:2",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1184,
                    "nodeType": "Block",
                    "src": "8231:34:2",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1180,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1174,
                              "src": "8247:2:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1181,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1176,
                              "src": "8250:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1179,
                            "name": "mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1143,
                            "src": "8242:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (address,uint256) returns (bool)"
                            }
                          },
                          "id": 1182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8242:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1183,
                        "nodeType": "ExpressionStatement",
                        "src": "8242:15:2"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1185,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allocate",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1177,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1174,
                        "name": "to",
                        "nodeType": "VariableDeclaration",
                        "scope": 1185,
                        "src": "8200:10:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1173,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "8200:7:2",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1176,
                        "name": "amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 1185,
                        "src": "8212:11:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1175,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8212:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8199:25:2"
                  },
                  "returnParameters": {
                    "id": 1178,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "8231:0:2"
                  },
                  "scope": 1186,
                  "src": "8182:83:2",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 1187,
              "src": "8035:233:2"
            }
          ],
          "src": "0:8270:2"
        },
        "id": 2
      },
      "contracts/libraries/Ownable.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/Ownable.sol",
          "exportedSymbols": {
            "Ownable": [
              1242
            ]
          },
          "id": 1243,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1188,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:3"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1242,
              "linearizedBaseContracts": [
                1242
              ],
              "name": "Ownable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 1190,
                  "name": "owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 1242,
                  "src": "51:28:3",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 1189,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "51:15:3",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "value": null,
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1196,
                  "name": "OwnershipTransferred",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1195,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1192,
                        "indexed": true,
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "113:29:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1191,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "113:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1194,
                        "indexed": true,
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1196,
                        "src": "143:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1193,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "143:7:3",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "112:56:3"
                  },
                  "src": "86:83:3"
                },
                {
                  "body": {
                    "id": 1204,
                    "nodeType": "Block",
                    "src": "301:23:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1199,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1190,
                            "src": "303:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1200,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "311:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1201,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "311:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "303:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 1203,
                        "nodeType": "ExpressionStatement",
                        "src": "303:18:3"
                      }
                    ]
                  },
                  "documentation": "@dev The Ownable constructor sets the original `owner` of the contract to the sender account.",
                  "id": 1205,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1197,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "291:2:3"
                  },
                  "returnParameters": {
                    "id": 1198,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "301:0:3"
                  },
                  "scope": 1242,
                  "src": "280:44:3",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1215,
                    "nodeType": "Block",
                    "src": "436:59:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              "id": 1211,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1208,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "455:3:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1209,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "455:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1210,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1190,
                                "src": "469:5:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "455:19:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1207,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "447:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "447:28:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1213,
                        "nodeType": "ExpressionStatement",
                        "src": "447:28:3"
                      },
                      {
                        "id": 1214,
                        "nodeType": "PlaceholderStatement",
                        "src": "486:1:3"
                      }
                    ]
                  },
                  "documentation": "@dev Throws if called by any contract other than latest designated caller",
                  "id": 1216,
                  "name": "onlyOwner",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 1206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "433:2:3"
                  },
                  "src": "415:80:3",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1240,
                    "nodeType": "Block",
                    "src": "726:130:3",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              "id": 1228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1224,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1218,
                                "src": "745:8:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 1226,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "765:1:3",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 1225,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "757:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 1227,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "757:10:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "745:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1223,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "737:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1229,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "737:31:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1230,
                        "nodeType": "ExpressionStatement",
                        "src": "737:31:3"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1232,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1190,
                              "src": "805:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1233,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1218,
                              "src": "812:8:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 1231,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1196,
                            "src": "784:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 1234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "784:37:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1235,
                        "nodeType": "EmitStatement",
                        "src": "779:42:3"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1238,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 1236,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1190,
                            "src": "832:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1237,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1218,
                            "src": "840:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "832:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 1239,
                        "nodeType": "ExpressionStatement",
                        "src": "832:16:3"
                      }
                    ]
                  },
                  "documentation": "@param newOwner The address to transfer ownership to.",
                  "id": 1241,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": null,
                      "id": 1221,
                      "modifierName": {
                        "argumentTypes": null,
                        "id": 1220,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1216,
                        "src": "716:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "716:9:3"
                    }
                  ],
                  "name": "transferOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1219,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1218,
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1241,
                        "src": "683:24:3",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        "typeName": {
                          "id": 1217,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "683:15:3",
                          "stateMutability": "payable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "682:26:3"
                  },
                  "returnParameters": {
                    "id": 1222,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "726:0:3"
                  },
                  "scope": 1242,
                  "src": "656:200:3",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 1243,
              "src": "27:832:3"
            }
          ],
          "src": "0:861:3"
        },
        "id": 3
      },
      "contracts/libraries/SafeMathM.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/SafeMathM.sol",
          "exportedSymbols": {
            "SafeMathM": [
              1374
            ]
          },
          "id": 1375,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1244,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:4"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1374,
              "linearizedBaseContracts": [
                1374
              ],
              "name": "SafeMathM",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1267,
                    "nodeType": "Block",
                    "src": "216:62:4",
                    "statements": [
                      {
                        "assignments": [
                          1254
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1254,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 1267,
                            "src": "222:9:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1253,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "222:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1258,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1257,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1255,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1246,
                            "src": "234:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1256,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1248,
                            "src": "238:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "234:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "222:17:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1262,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1260,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1254,
                                "src": "252:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1261,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1246,
                                "src": "257:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "252:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1259,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "245:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1263,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "245:14:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1264,
                        "nodeType": "ExpressionStatement",
                        "src": "245:14:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1265,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1254,
                          "src": "272:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1252,
                        "id": 1266,
                        "nodeType": "Return",
                        "src": "265:8:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1268,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "add",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1249,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1246,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1268,
                        "src": "162:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1245,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "162:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1248,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1268,
                        "src": "173:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1247,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "173:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "161:22:4"
                  },
                  "returnParameters": {
                    "id": 1252,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1251,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1268,
                        "src": "207:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1250,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "207:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "206:9:4"
                  },
                  "scope": 1374,
                  "src": "149:129:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1284,
                    "nodeType": "Block",
                    "src": "343:31:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1279,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1277,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1270,
                              "src": "356:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1278,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1272,
                              "src": "360:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "356:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "argumentTypes": null,
                            "id": 1281,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1272,
                            "src": "368:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1282,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "356:13:4",
                          "trueExpression": {
                            "argumentTypes": null,
                            "id": 1280,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1270,
                            "src": "364:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1276,
                        "id": 1283,
                        "nodeType": "Return",
                        "src": "349:20:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1285,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1273,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1270,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1285,
                        "src": "295:6:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1269,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "295:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1272,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1285,
                        "src": "303:6:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1271,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "303:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "294:16:4"
                  },
                  "returnParameters": {
                    "id": 1276,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1275,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1285,
                        "src": "334:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1274,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "334:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "333:9:4"
                  },
                  "scope": 1374,
                  "src": "282:92:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1305,
                    "nodeType": "Block",
                    "src": "443:43:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_int256",
                              "typeString": "int256"
                            },
                            "id": 1296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1294,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1287,
                              "src": "456:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1295,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1289,
                              "src": "460:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            },
                            "src": "456:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1301,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1289,
                                "src": "479:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              ],
                              "id": 1300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "474:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": "uint"
                            },
                            "id": 1302,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "474:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1303,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "456:25:4",
                          "trueExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1298,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1287,
                                "src": "469:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              ],
                              "id": 1297,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "464:4:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint256_$",
                                "typeString": "type(uint256)"
                              },
                              "typeName": "uint"
                            },
                            "id": 1299,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "464:7:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1293,
                        "id": 1304,
                        "nodeType": "Return",
                        "src": "449:32:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1306,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "max",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1290,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1287,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1306,
                        "src": "391:8:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 1286,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "391:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1289,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1306,
                        "src": "401:8:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 1288,
                          "name": "int256",
                          "nodeType": "ElementaryTypeName",
                          "src": "401:6:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "390:20:4"
                  },
                  "returnParameters": {
                    "id": 1293,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1292,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1306,
                        "src": "434:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1291,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "434:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "433:9:4"
                  },
                  "scope": 1374,
                  "src": "378:108:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1322,
                    "nodeType": "Block",
                    "src": "551:31:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1317,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1315,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1308,
                              "src": "564:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1316,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1310,
                              "src": "568:1:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "564:5:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "argumentTypes": null,
                            "id": 1319,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1310,
                            "src": "576:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "564:13:4",
                          "trueExpression": {
                            "argumentTypes": null,
                            "id": 1318,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1308,
                            "src": "572:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1314,
                        "id": 1321,
                        "nodeType": "Return",
                        "src": "557:20:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1323,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "min",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1311,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1308,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1323,
                        "src": "503:6:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1307,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "503:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1310,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1323,
                        "src": "511:6:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1309,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "511:4:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "502:16:4"
                  },
                  "returnParameters": {
                    "id": 1314,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1313,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1323,
                        "src": "542:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1312,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "542:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "541:9:4"
                  },
                  "scope": 1374,
                  "src": "490:92:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1352,
                    "nodeType": "Block",
                    "src": "655:76:4",
                    "statements": [
                      {
                        "assignments": [
                          1333
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1333,
                            "name": "c",
                            "nodeType": "VariableDeclaration",
                            "scope": 1352,
                            "src": "661:9:4",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1332,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "661:7:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1337,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1336,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1334,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1325,
                            "src": "673:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1335,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1327,
                            "src": "677:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "673:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "661:17:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1347,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1341,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1339,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1325,
                                  "src": "691:1:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1340,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "696:1:4",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "691:6:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1346,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1344,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 1342,
                                    "name": "c",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1333,
                                    "src": "701:1:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 1343,
                                    "name": "a",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1325,
                                    "src": "705:1:4",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "701:5:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 1345,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1327,
                                  "src": "710:1:4",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "701:10:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "691:20:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1338,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "684:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1348,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "684:28:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1349,
                        "nodeType": "ExpressionStatement",
                        "src": "684:28:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1350,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1333,
                          "src": "725:1:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1331,
                        "id": 1351,
                        "nodeType": "Return",
                        "src": "718:8:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1353,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mul",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1328,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1325,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1353,
                        "src": "601:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1324,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "601:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1327,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1353,
                        "src": "612:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1326,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "612:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "600:22:4"
                  },
                  "returnParameters": {
                    "id": 1331,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1330,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1353,
                        "src": "646:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1329,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "646:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "645:9:4"
                  },
                  "scope": 1374,
                  "src": "588:143:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1372,
                    "nodeType": "Block",
                    "src": "802:43:4",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1365,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1363,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1357,
                                "src": "815:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1364,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1355,
                                "src": "820:1:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "815:6:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1362,
                            "name": "assert",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4279,
                            "src": "808:6:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "808:14:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1367,
                        "nodeType": "ExpressionStatement",
                        "src": "808:14:4"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1368,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1355,
                            "src": "835:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 1369,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1357,
                            "src": "839:1:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "835:5:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1361,
                        "id": 1371,
                        "nodeType": "Return",
                        "src": "828:12:4"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1373,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "sub",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1358,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1355,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 1373,
                        "src": "748:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1354,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "748:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1357,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 1373,
                        "src": "759:9:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1356,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "759:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "747:22:4"
                  },
                  "returnParameters": {
                    "id": 1361,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1360,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 1373,
                        "src": "793:7:4",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1359,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "793:7:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "792:9:4"
                  },
                  "scope": 1374,
                  "src": "735:110:4",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 1375,
              "src": "126:722:4"
            }
          ],
          "src": "0:849:4"
        },
        "id": 4
      },
      "contracts/libraries/Utilities.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/Utilities.sol",
          "exportedSymbols": {
            "Utilities": [
              1403
            ]
          },
          "id": 1404,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1376,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:5"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": null,
              "fullyImplemented": true,
              "id": 1403,
              "linearizedBaseContracts": [
                1403
              ],
              "name": "Utilities",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 1388,
                    "nodeType": "Block",
                    "src": "431:347:5",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "minIndex": {
                              "declaration": 1385,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "460:8:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "min": {
                              "declaration": 1383,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "485:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "arr": {
                              "declaration": 1380,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "502:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "minIndex": {
                              "declaration": 1385,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "511:8:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "min": {
                              "declaration": 1383,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "669:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "min": {
                              "declaration": 1383,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "693:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "arr": {
                              "declaration": 1380,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "624:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "minIndex": {
                              "declaration": 1385,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "723:8:5",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1387,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    minIndex := 50\n    min := mload(add(arr, mul(minIndex, 0x20)))\n    for {\n        let i := 49\n    }\n    gt(i, 0)\n    {\n        i := sub(i, 1)\n    }\n    {\n        let item := mload(add(arr, mul(i, 0x20)))\n        if lt(item, min)\n        {\n            min := item\n            minIndex := i\n        }\n    }\n}",
                        "src": "439:339:5"
                      }
                    ]
                  },
                  "documentation": "@dev Returns the minimum value and position in an array.",
                  "id": 1389,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMin",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1381,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1380,
                        "name": "arr",
                        "nodeType": "VariableDeclaration",
                        "scope": 1389,
                        "src": "356:19:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$51_memory_ptr",
                          "typeString": "uint256[51]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1377,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "356:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1379,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "3531",
                            "id": 1378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "361:2:5",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "51"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "356:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                            "typeString": "uint256[51]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "355:21:5"
                  },
                  "returnParameters": {
                    "id": 1386,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1383,
                        "name": "min",
                        "nodeType": "VariableDeclaration",
                        "scope": 1389,
                        "src": "400:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1382,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "400:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1385,
                        "name": "minIndex",
                        "nodeType": "VariableDeclaration",
                        "scope": 1389,
                        "src": "413:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1384,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "413:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "399:31:5"
                  },
                  "scope": 1403,
                  "src": "340:438:5",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1401,
                    "nodeType": "Block",
                    "src": "1251:270:5",
                    "statements": [
                      {
                        "externalReferences": [
                          {
                            "arr": {
                              "declaration": 1393,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1365:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "max": {
                              "declaration": 1396,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1405:3:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "maxIndex": {
                              "declaration": 1398,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1466:8:5",
                              "valueSize": 1
                            }
                          },
                          {
                            "max": {
                              "declaration": 1396,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "1436:3:5",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 1400,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    for {\n        let i := 0\n    }\n    lt(i, 51)\n    {\n        i := add(i, 1)\n    }\n    {\n        let item := mload(add(arr, mul(i, 0x20)))\n        if lt(max, item)\n        {\n            max := item\n            maxIndex := i\n        }\n    }\n}",
                        "src": "1259:262:5"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 1402,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMax",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1394,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1393,
                        "name": "arr",
                        "nodeType": "VariableDeclaration",
                        "scope": 1402,
                        "src": "1173:22:5",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$51_memory_ptr",
                          "typeString": "uint256[51]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1390,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1173:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1392,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "3531",
                            "id": 1391,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1181:2:5",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "51"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "1173:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                            "typeString": "uint256[51]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1172:24:5"
                  },
                  "returnParameters": {
                    "id": 1399,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1396,
                        "name": "max",
                        "nodeType": "VariableDeclaration",
                        "scope": 1402,
                        "src": "1220:11:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1395,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1220:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1398,
                        "name": "maxIndex",
                        "nodeType": "VariableDeclaration",
                        "scope": 1402,
                        "src": "1233:16:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1397,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1233:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1219:31:5"
                  },
                  "scope": 1403,
                  "src": "1157:364:5",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 1404,
              "src": "220:1306:5"
            }
          ],
          "src": "0:1527:5"
        },
        "id": 5
      },
      "contracts/libraries/ZapDispute.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/ZapDispute.sol",
          "exportedSymbols": {
            "ZapDispute": [
              2349
            ]
          },
          "id": 2350,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1405,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:6"
            },
            {
              "absolutePath": "contracts/libraries/ZapStorage.sol",
              "file": "./ZapStorage.sol",
              "id": 1406,
              "nodeType": "ImportDirective",
              "scope": 2350,
              "sourceUnit": 3741,
              "src": "25:26:6",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapTransfer.sol",
              "file": "./ZapTransfer.sol",
              "id": 1407,
              "nodeType": "ImportDirective",
              "scope": 2350,
              "sourceUnit": 4276,
              "src": "52:27:6",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title Zap Dispute\n@dev Contais the methods related to disputes. Zap.sol references this library for function's logic.",
              "fullyImplemented": true,
              "id": 2349,
              "linearizedBaseContracts": [
                2349
              ],
              "name": "ZapDispute",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 1410,
                  "libraryName": {
                    "contractScope": null,
                    "id": 1408,
                    "name": "SafeMathM",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1374,
                    "src": "244:9:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMathM_$1374",
                      "typeString": "library SafeMathM"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "238:28:6",
                  "typeName": {
                    "id": 1409,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "258:7:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1420,
                  "name": "NewDispute",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1419,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1412,
                        "indexed": true,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "289:23:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1411,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "289:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1414,
                        "indexed": true,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "314:23:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1413,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "314:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1416,
                        "indexed": false,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "339:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1415,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "339:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1418,
                        "indexed": false,
                        "name": "_miner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1420,
                        "src": "356:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1417,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "356:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "288:83:6"
                  },
                  "src": "272:100:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1428,
                  "name": "Voted",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1427,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1422,
                        "indexed": true,
                        "name": "_disputeID",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "432:23:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1421,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "432:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1424,
                        "indexed": false,
                        "name": "_position",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "457:14:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1423,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "457:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1426,
                        "indexed": true,
                        "name": "_voter",
                        "nodeType": "VariableDeclaration",
                        "scope": 1428,
                        "src": "473:22:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1425,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "473:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "431:65:6"
                  },
                  "src": "420:77:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1440,
                  "name": "DisputeVoteTallied",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1439,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1430,
                        "indexed": true,
                        "name": "_disputeID",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "560:23:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1429,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "560:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1432,
                        "indexed": false,
                        "name": "_result",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "585:11:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 1431,
                          "name": "int",
                          "nodeType": "ElementaryTypeName",
                          "src": "585:3:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1434,
                        "indexed": true,
                        "name": "_reportedMiner",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "597:30:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1433,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "597:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1436,
                        "indexed": false,
                        "name": "_reportingParty",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "628:23:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1435,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "628:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1438,
                        "indexed": false,
                        "name": "_active",
                        "nodeType": "VariableDeclaration",
                        "scope": 1440,
                        "src": "653:12:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1437,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "653:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "559:107:6"
                  },
                  "src": "535:132:6"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 1444,
                  "name": "NewZapAddress",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1443,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1442,
                        "indexed": false,
                        "name": "_newZap",
                        "nodeType": "VariableDeclaration",
                        "scope": 1444,
                        "src": "720:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1441,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "720:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "719:17:6"
                  },
                  "src": "700:37:6"
                },
                {
                  "body": {
                    "id": 1728,
                    "nodeType": "Block",
                    "src": "1389:3104:6",
                    "statements": [
                      {
                        "assignments": [
                          1458
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1458,
                            "name": "_request",
                            "nodeType": "VariableDeclaration",
                            "scope": 1728,
                            "src": "1399:35:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                              "typeString": "struct ZapStorage.Request"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1457,
                              "name": "ZapStorage.Request",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3672,
                              "src": "1399:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                "typeString": "struct ZapStorage.Request"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1463,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1459,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1446,
                              "src": "1437:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 1460,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3730,
                            "src": "1437:19:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                            }
                          },
                          "id": 1462,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1461,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1448,
                            "src": "1457:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1437:31:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$3672_storage",
                            "typeString": "struct ZapStorage.Request storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1399:69:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1473,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1471,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1465,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4280,
                                    "src": "1615:5:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 1466,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "number",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1615:12:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1467,
                                      "name": "_request",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1458,
                                      "src": "1629:8:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                        "typeString": "struct ZapStorage.Request storage pointer"
                                      }
                                    },
                                    "id": 1468,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "minedBlockNum",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3651,
                                    "src": "1629:22:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 1470,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1469,
                                    "name": "_timestamp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1450,
                                    "src": "1652:10:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1629:34:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1615:48:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "313434",
                                "id": 1472,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1666:3:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_144_by_1",
                                  "typeString": "int_const 144"
                                },
                                "value": "144"
                              },
                              "src": "1615:54:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1464,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1607:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1607:63:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1475,
                        "nodeType": "ExpressionStatement",
                        "src": "1607:63:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1482,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1477,
                                    "name": "_request",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1458,
                                    "src": "1688:8:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                      "typeString": "struct ZapStorage.Request storage pointer"
                                    }
                                  },
                                  "id": 1478,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minedBlockNum",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3651,
                                  "src": "1688:22:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                    "typeString": "mapping(uint256 => uint256)"
                                  }
                                },
                                "id": 1480,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1479,
                                  "name": "_timestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1450,
                                  "src": "1711:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1688:34:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1481,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1725:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "1688:38:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1476,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1680:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1483,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1680:47:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1484,
                        "nodeType": "ExpressionStatement",
                        "src": "1680:47:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1488,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1486,
                                "name": "_minerIndex",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1452,
                                "src": "1745:11:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "35",
                                "id": 1487,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1759:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_5_by_1",
                                  "typeString": "int_const 5"
                                },
                                "value": "5"
                              },
                              "src": "1745:15:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1485,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1737:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1737:24:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1490,
                        "nodeType": "ExpressionStatement",
                        "src": "1737:24:6"
                      },
                      {
                        "assignments": [
                          1492
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1492,
                            "name": "_miner",
                            "nodeType": "VariableDeclaration",
                            "scope": 1728,
                            "src": "1954:14:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 1491,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1954:7:6",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1499,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1493,
                                "name": "_request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "1971:8:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                  "typeString": "struct ZapStorage.Request storage pointer"
                                }
                              },
                              "id": 1494,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "minersByValue",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3665,
                              "src": "1971:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_address_$5_storage_$",
                                "typeString": "mapping(uint256 => address[5] storage ref)"
                              }
                            },
                            "id": 1496,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1495,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1450,
                              "src": "1994:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1971:34:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$5_storage",
                              "typeString": "address[5] storage ref"
                            }
                          },
                          "id": 1498,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1497,
                            "name": "_minerIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "2006:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1971:47:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1954:64:6"
                      },
                      {
                        "assignments": [
                          1501
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1501,
                            "name": "_hash",
                            "nodeType": "VariableDeclaration",
                            "scope": 1728,
                            "src": "2028:13:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 1500,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "2028:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1510,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1505,
                                  "name": "_miner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1492,
                                  "src": "2071:6:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1506,
                                  "name": "_requestId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1448,
                                  "src": "2078:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1507,
                                  "name": "_timestamp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1450,
                                  "src": "2089:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1503,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4277,
                                  "src": "2054:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1504,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2054:16:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 1508,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2054:46:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1502,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4284,
                            "src": "2044:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 1509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2044:57:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2028:73:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1517,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1512,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "2225:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1513,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputeIdByDisputeHash",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3738,
                                  "src": "2225:27:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 1515,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1514,
                                  "name": "_hash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1501,
                                  "src": "2253:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2225:34:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1516,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2263:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2225:39:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1511,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "2217:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1518,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2217:48:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1519,
                        "nodeType": "ExpressionStatement",
                        "src": "2217:48:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1523,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1446,
                              "src": "2298:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1524,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "2304:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1525,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2304:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1527,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4313,
                                  "src": "2323:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                    "typeString": "library ZapDispute"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                    "typeString": "library ZapDispute"
                                  }
                                ],
                                "id": 1526,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2315:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2315:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1529,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1446,
                                  "src": "2330:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 1530,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "2330:13:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 1534,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "64697370757465466565",
                                    "id": 1532,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2354:12:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                      "typeString": "literal_string \"disputeFee\""
                                    },
                                    "value": "disputeFee"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                      "typeString": "literal_string \"disputeFee\""
                                    }
                                  ],
                                  "id": 1531,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "2344:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 1533,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2344:23:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2330:38:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1520,
                              "name": "ZapTransfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4275,
                              "src": "2275:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                "typeString": "type(library ZapTransfer)"
                              }
                            },
                            "id": 1522,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "doTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3985,
                            "src": "2275:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                            }
                          },
                          "id": 1535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2275:94:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1536,
                        "nodeType": "ExpressionStatement",
                        "src": "2275:94:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1552,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1537,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "2430:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 1542,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2430:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1543,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "64697370757465436f756e74",
                                  "id": 1540,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2454:14:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                    "typeString": "literal_string \"disputeCount\""
                                  },
                                  "value": "disputeCount"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                    "typeString": "literal_string \"disputeCount\""
                                  }
                                ],
                                "id": 1539,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2444:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1541,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2444:25:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2430:40:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1544,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1446,
                                  "src": "2474:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 1545,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "2474:13:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 1549,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "64697370757465436f756e74",
                                    "id": 1547,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2498:14:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                      "typeString": "literal_string \"disputeCount\""
                                    },
                                    "value": "disputeCount"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                      "typeString": "literal_string \"disputeCount\""
                                    }
                                  ],
                                  "id": 1546,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "2488:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 1548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2488:25:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2474:40:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 1550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2517:1:6",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "2474:44:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2430:88:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1553,
                        "nodeType": "ExpressionStatement",
                        "src": "2430:88:6"
                      },
                      {
                        "assignments": [
                          1555
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1555,
                            "name": "disputeId",
                            "nodeType": "VariableDeclaration",
                            "scope": 1728,
                            "src": "2590:14:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1554,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "2590:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1562,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1556,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1446,
                              "src": "2607:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 1557,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "uintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3693,
                            "src": "2607:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 1561,
                          "indexExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "64697370757465436f756e74",
                                "id": 1559,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2631:14:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                  "typeString": "literal_string \"disputeCount\""
                                },
                                "value": "disputeCount"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                  "typeString": "literal_string \"disputeCount\""
                                }
                              ],
                              "id": 1558,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4284,
                              "src": "2621:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 1560,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2621:25:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2607:40:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2590:57:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1569,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1563,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "2715:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 1566,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeIdByDisputeHash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3738,
                              "src": "2715:27:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1567,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1565,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1501,
                              "src": "2743:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2715:34:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1568,
                            "name": "disputeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1555,
                            "src": "2752:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2715:46:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1570,
                        "nodeType": "ExpressionStatement",
                        "src": "2715:46:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1590,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1571,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "2820:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 1574,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputesById",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3711,
                              "src": "2820:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                              }
                            },
                            "id": 1575,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1573,
                              "name": "disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1555,
                              "src": "2838:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2820:28:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                              "typeString": "struct ZapStorage.Dispute storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1578,
                                "name": "_hash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1501,
                                "src": "2889:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 1579,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2920:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "id": 1580,
                                "name": "_miner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1492,
                                "src": "2954:6:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1581,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "2990:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2990:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 1584,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3042:1:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 1583,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3034:7:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 1585,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3034:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 1586,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3068:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 1587,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3106:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1588,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3132:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1576,
                                "name": "ZapStorage",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3740,
                                "src": "2851:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ZapStorage_$3740_$",
                                  "typeString": "type(library ZapStorage)"
                                }
                              },
                              "id": 1577,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "Dispute",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3624,
                              "src": "2851:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Dispute_$3624_storage_ptr_$",
                                "typeString": "type(struct ZapStorage.Dispute storage pointer)"
                              }
                            },
                            "id": 1589,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "hash",
                              "isPropFork",
                              "reportedMiner",
                              "reportingParty",
                              "proposedForkAddress",
                              "executed",
                              "disputeVotePassed",
                              "tally"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "2851:297:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_memory",
                              "typeString": "struct ZapStorage.Dispute memory"
                            }
                          },
                          "src": "2820:328:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                            "typeString": "struct ZapStorage.Dispute storage ref"
                          }
                        },
                        "id": 1591,
                        "nodeType": "ExpressionStatement",
                        "src": "2820:328:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1603,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1592,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3227:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1595,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3227:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1596,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1594,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3245:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3227:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1597,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3227:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1601,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "726571756573744964",
                                  "id": 1599,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3282:11:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                    "typeString": "literal_string \"requestId\""
                                  },
                                  "value": "requestId"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                    "typeString": "literal_string \"requestId\""
                                  }
                                ],
                                "id": 1598,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3272:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1600,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3272:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3227:68:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1602,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1448,
                            "src": "3298:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3227:81:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1604,
                        "nodeType": "ExpressionStatement",
                        "src": "3227:81:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1616,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1605,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3318:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1608,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3318:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1609,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1607,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3336:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3318:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1610,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3318:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1614,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "74696d657374616d70",
                                  "id": 1612,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3373:11:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                    "typeString": "literal_string \"timestamp\""
                                  },
                                  "value": "timestamp"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                    "typeString": "literal_string \"timestamp\""
                                  }
                                ],
                                "id": 1611,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3363:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1613,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3363:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3318:68:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1615,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1450,
                            "src": "3389:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3318:81:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1617,
                        "nodeType": "ExpressionStatement",
                        "src": "3318:81:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1634,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1618,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3409:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1621,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3409:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1622,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1620,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3427:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3409:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1623,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3409:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1627,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "76616c7565",
                                  "id": 1625,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3464:7:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_81afeeaff0ed5cee7d05a21078399c2f56226b0cd5657062500cef4c4e736f85",
                                    "typeString": "literal_string \"value\""
                                  },
                                  "value": "value"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_81afeeaff0ed5cee7d05a21078399c2f56226b0cd5657062500cef4c4e736f85",
                                    "typeString": "literal_string \"value\""
                                  }
                                ],
                                "id": 1624,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3454:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3454:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3409:64:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1628,
                                  "name": "_request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1458,
                                  "src": "3476:8:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                    "typeString": "struct ZapStorage.Request storage pointer"
                                  }
                                },
                                "id": 1629,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "valuesByTimestamp",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3671,
                                "src": "3476:26:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint256_$5_storage_$",
                                  "typeString": "mapping(uint256 => uint256[5] storage ref)"
                                }
                              },
                              "id": 1631,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1630,
                                "name": "_timestamp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1450,
                                "src": "3503:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3476:38:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$5_storage",
                                "typeString": "uint256[5] storage ref"
                              }
                            },
                            "id": 1633,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1632,
                              "name": "_minerIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1452,
                              "src": "3515:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3476:51:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3409:118:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1635,
                        "nodeType": "ExpressionStatement",
                        "src": "3409:118:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1636,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3537:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1639,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3537:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1640,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1638,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3555:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3537:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1641,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3537:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1645,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "6d696e457865637574696f6e44617465",
                                  "id": 1643,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3592:18:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                    "typeString": "literal_string \"minExecutionDate\""
                                  },
                                  "value": "minExecutionDate"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                    "typeString": "literal_string \"minExecutionDate\""
                                  }
                                ],
                                "id": 1642,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3582:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1644,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3582:29:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3537:75:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1648,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1646,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4292,
                              "src": "3615:3:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "37",
                              "id": 1647,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3621:6:6",
                              "subdenomination": "days",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_604800_by_1",
                                "typeString": "int_const 604800"
                              },
                              "value": "7"
                            },
                            "src": "3615:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3537:90:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1650,
                        "nodeType": "ExpressionStatement",
                        "src": "3537:90:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1651,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3637:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1654,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3637:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1655,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1653,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3655:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3637:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1656,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3637:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1660,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "626c6f636b4e756d626572",
                                  "id": 1658,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3692:13:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                    "typeString": "literal_string \"blockNumber\""
                                  },
                                  "value": "blockNumber"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                    "typeString": "literal_string \"blockNumber\""
                                  }
                                ],
                                "id": 1657,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3682:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1659,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3682:24:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3637:70:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1661,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4280,
                              "src": "3710:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1662,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3710:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3637:85:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1664,
                        "nodeType": "ExpressionStatement",
                        "src": "3637:85:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1665,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3732:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1668,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3732:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1669,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1667,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3750:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3732:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1670,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3732:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1674,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "6d696e6572536c6f74",
                                  "id": 1672,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3787:11:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8ef61a1efbc527d6428ff88c95fdff5c6e644b979bfe67e03cbf88c8162c5fac",
                                    "typeString": "literal_string \"minerSlot\""
                                  },
                                  "value": "minerSlot"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8ef61a1efbc527d6428ff88c95fdff5c6e644b979bfe67e03cbf88c8162c5fac",
                                    "typeString": "literal_string \"minerSlot\""
                                  }
                                ],
                                "id": 1671,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3777:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1673,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3777:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3732:68:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1675,
                            "name": "_minerIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "3803:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3732:82:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1677,
                        "nodeType": "ExpressionStatement",
                        "src": "3732:82:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1694,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1678,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1446,
                                    "src": "3824:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1681,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "3824:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 1682,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 1680,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "3842:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3824:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 1683,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "3824:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1687,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "666565",
                                  "id": 1685,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3879:5:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                    "typeString": "literal_string \"fee\""
                                  },
                                  "value": "fee"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                    "typeString": "literal_string \"fee\""
                                  }
                                ],
                                "id": 1684,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3869:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1686,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3869:16:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3824:62:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1688,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1446,
                                "src": "3890:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 1689,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "3890:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1693,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "64697370757465466565",
                                  "id": 1691,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3914:12:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  },
                                  "value": "disputeFee"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  }
                                ],
                                "id": 1690,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3904:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1692,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3904:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "3890:38:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3824:104:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1695,
                        "nodeType": "ExpressionStatement",
                        "src": "3824:104:6"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1698,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 1696,
                            "name": "_minerIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "4266:11:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 1697,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4281:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "4266:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 1711,
                        "nodeType": "IfStatement",
                        "src": "4263:105:6",
                        "trueBody": {
                          "id": 1710,
                          "nodeType": "Block",
                          "src": "4283:85:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1708,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1699,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1446,
                                          "src": "4297:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        },
                                        "id": 1702,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "requestDetails",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3730,
                                        "src": "4297:19:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                          "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                        }
                                      },
                                      "id": 1703,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 1701,
                                        "name": "_requestId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1448,
                                        "src": "4317:10:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4297:31:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Request_$3672_storage",
                                        "typeString": "struct ZapStorage.Request storage ref"
                                      }
                                    },
                                    "id": 1704,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "inDispute",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3659,
                                    "src": "4297:41:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                      "typeString": "mapping(uint256 => bool)"
                                    }
                                  },
                                  "id": 1706,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1705,
                                    "name": "_timestamp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1450,
                                    "src": "4339:10:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "4297:53:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 1707,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4353:4:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "4297:60:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1709,
                              "nodeType": "ExpressionStatement",
                              "src": "4297:60:6"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1719,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1712,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1446,
                                  "src": "4377:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 1715,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "stakerDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3726,
                                "src": "4377:18:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                  "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                }
                              },
                              "id": 1716,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1714,
                                "name": "_miner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1492,
                                "src": "4396:6:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4377:26:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                "typeString": "struct ZapStorage.StakeInfo storage ref"
                              }
                            },
                            "id": 1717,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "currentStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3626,
                            "src": "4377:40:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "33",
                            "id": 1718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4420:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "4377:44:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1720,
                        "nodeType": "ExpressionStatement",
                        "src": "4377:44:6"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1722,
                              "name": "disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1555,
                              "src": "4447:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1723,
                              "name": "_requestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1448,
                              "src": "4457:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1724,
                              "name": "_timestamp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1450,
                              "src": "4468:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1725,
                              "name": "_miner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1492,
                              "src": "4479:6:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1721,
                            "name": "NewDispute",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1420,
                            "src": "4436:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,address)"
                            }
                          },
                          "id": 1726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4436:50:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1727,
                        "nodeType": "EmitStatement",
                        "src": "4431:55:6"
                      }
                    ]
                  },
                  "documentation": "@dev Helps initialize a dispute by assigning it a disputeId\nwhen a miner returns a false on the validate array(in Zap.ProofOfWork) it sends the\ninvalidated value information to POS voting\n@param _requestId being disputed\n@param _timestamp being disputed\n@param _minerIndex the index of the miner that submitted the value being disputed. Since each official value\nrequires 5 miners to submit a value.",
                  "id": 1729,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "beginDispute",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1453,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1446,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1729,
                        "src": "1290:40:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1445,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "1290:27:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1448,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1729,
                        "src": "1331:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1447,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1331:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1450,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 1729,
                        "src": "1348:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1449,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1348:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1452,
                        "name": "_minerIndex",
                        "nodeType": "VariableDeclaration",
                        "scope": 1729,
                        "src": "1364:16:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1451,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1364:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1289:92:6"
                  },
                  "returnParameters": {
                    "id": 1454,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1389:0:6"
                  },
                  "scope": 2349,
                  "src": "1268:3225:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1851,
                    "nodeType": "Block",
                    "src": "4800:1484:6",
                    "statements": [
                      {
                        "assignments": [
                          1741
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1741,
                            "name": "disp",
                            "nodeType": "VariableDeclaration",
                            "scope": 1851,
                            "src": "4810:31:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                              "typeString": "struct ZapStorage.Dispute"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1740,
                              "name": "ZapStorage.Dispute",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3624,
                              "src": "4810:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                "typeString": "struct ZapStorage.Dispute"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1746,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1742,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1731,
                              "src": "4844:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 1743,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "disputesById",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3711,
                            "src": "4844:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                            }
                          },
                          "id": 1745,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1744,
                            "name": "_disputeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1733,
                            "src": "4862:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4844:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                            "typeString": "struct ZapStorage.Dispute storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4810:63:6"
                      },
                      {
                        "assignments": [
                          1748
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1748,
                            "name": "voteWeight",
                            "nodeType": "VariableDeclaration",
                            "scope": 1851,
                            "src": "4990:15:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1747,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "4990:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1761,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1751,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1731,
                              "src": "5032:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1752,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "5037:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1753,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "5037:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1754,
                                  "name": "disp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1741,
                                  "src": "5048:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                    "typeString": "struct ZapStorage.Dispute storage pointer"
                                  }
                                },
                                "id": 1755,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "disputeUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3619,
                                "src": "5048:20:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 1759,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "626c6f636b4e756d626572",
                                    "id": 1757,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5079:13:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                      "typeString": "literal_string \"blockNumber\""
                                    },
                                    "value": "blockNumber"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                      "typeString": "literal_string \"blockNumber\""
                                    }
                                  ],
                                  "id": 1756,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "5069:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 1758,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5069:24:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5048:46:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1749,
                              "name": "ZapTransfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4275,
                              "src": "5008:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                "typeString": "type(library ZapTransfer)"
                              }
                            },
                            "id": 1750,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOfAt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4046,
                            "src": "5008:23:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 1760,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5008:87:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4990:105:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1769,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1763,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1741,
                                    "src": "5174:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1764,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voted",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3623,
                                  "src": "5174:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                    "typeString": "mapping(address => bool)"
                                  }
                                },
                                "id": 1767,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1765,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "5185:3:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1766,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "5185:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5174:22:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "74727565",
                                "id": 1768,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5200:4:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "src": "5174:30:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1762,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "5166:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1770,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5166:39:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1771,
                        "nodeType": "ExpressionStatement",
                        "src": "5166:39:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1773,
                                "name": "voteWeight",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1748,
                                "src": "5318:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1774,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5331:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "5318:14:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1772,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "5310:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1776,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5310:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1777,
                        "nodeType": "ExpressionStatement",
                        "src": "5310:23:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1786,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1779,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1731,
                                      "src": "5420:4:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 1780,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "stakerDetails",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3726,
                                    "src": "5420:18:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                      "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                    }
                                  },
                                  "id": 1783,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1781,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4290,
                                      "src": "5439:3:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1782,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "5439:10:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5420:30:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                    "typeString": "struct ZapStorage.StakeInfo storage ref"
                                  }
                                },
                                "id": 1784,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "currentStatus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3626,
                                "src": "5420:44:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "33",
                                "id": 1785,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5468:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_3_by_1",
                                  "typeString": "int_const 3"
                                },
                                "value": "3"
                              },
                              "src": "5420:49:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1778,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "5412:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1787,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5412:58:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1788,
                        "nodeType": "ExpressionStatement",
                        "src": "5412:58:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1796,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1789,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1741,
                                "src": "5533:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 1793,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "voted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3623,
                              "src": "5533:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 1794,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1791,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "5544:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1792,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "5544:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5533:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 1795,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5558:4:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "5533:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1797,
                        "nodeType": "ExpressionStatement",
                        "src": "5533:29:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1806,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1798,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1741,
                                "src": "5634:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 1803,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "5634:20:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1804,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "6e756d6265724f66566f746573",
                                  "id": 1801,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5665:15:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_a0bc13ce85a2091e950a370bced0825e58ab3a3ffeb709ed50d5562cbd82faab",
                                    "typeString": "literal_string \"numberOfVotes\""
                                  },
                                  "value": "numberOfVotes"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_a0bc13ce85a2091e950a370bced0825e58ab3a3ffeb709ed50d5562cbd82faab",
                                    "typeString": "literal_string \"numberOfVotes\""
                                  }
                                ],
                                "id": 1800,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "5655:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1802,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5655:26:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5634:48:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 1805,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5686:1:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5634:53:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1807,
                        "nodeType": "ExpressionStatement",
                        "src": "5634:53:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1816,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1808,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1741,
                                "src": "5759:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 1813,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "5759:20:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1814,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "71756f72756d",
                                  "id": 1811,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5790:8:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                    "typeString": "literal_string \"quorum\""
                                  },
                                  "value": "quorum"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                    "typeString": "literal_string \"quorum\""
                                  }
                                ],
                                "id": 1810,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "5780:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1812,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5780:19:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5759:41:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 1815,
                            "name": "voteWeight",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1748,
                            "src": "5804:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5759:55:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1817,
                        "nodeType": "ExpressionStatement",
                        "src": "5759:55:6"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "id": 1818,
                          "name": "_supportsDispute",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1735,
                          "src": "5966:16:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 1842,
                          "nodeType": "Block",
                          "src": "6056:66:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1840,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1831,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1741,
                                    "src": "6070:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1833,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "tally",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3603,
                                  "src": "6070:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  },
                                  "id": 1839,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1834,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1741,
                                      "src": "6083:4:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 1835,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "tally",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3603,
                                    "src": "6083:10:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_int256",
                                      "typeString": "int256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 1837,
                                        "name": "voteWeight",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1748,
                                        "src": "6100:10:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 1836,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "6096:3:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_int256_$",
                                        "typeString": "type(int256)"
                                      },
                                      "typeName": "int"
                                    },
                                    "id": 1838,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6096:15:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_int256",
                                      "typeString": "int256"
                                    }
                                  },
                                  "src": "6083:28:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "src": "6070:41:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              },
                              "id": 1841,
                              "nodeType": "ExpressionStatement",
                              "src": "6070:41:6"
                            }
                          ]
                        },
                        "id": 1843,
                        "nodeType": "IfStatement",
                        "src": "5962:160:6",
                        "trueBody": {
                          "id": 1830,
                          "nodeType": "Block",
                          "src": "5984:66:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1828,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1819,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1741,
                                    "src": "5998:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1821,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "tally",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3603,
                                  "src": "5998:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  },
                                  "id": 1827,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1822,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1741,
                                      "src": "6011:4:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 1823,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "tally",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3603,
                                    "src": "6011:10:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_int256",
                                      "typeString": "int256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "+",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 1825,
                                        "name": "voteWeight",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1748,
                                        "src": "6028:10:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 1824,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "6024:3:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_int256_$",
                                        "typeString": "type(int256)"
                                      },
                                      "typeName": "int"
                                    },
                                    "id": 1826,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6024:15:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_int256",
                                      "typeString": "int256"
                                    }
                                  },
                                  "src": "6011:28:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "src": "5998:41:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                }
                              },
                              "id": 1829,
                              "nodeType": "ExpressionStatement",
                              "src": "5998:41:6"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1845,
                              "name": "_disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1733,
                              "src": "6238:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1846,
                              "name": "_supportsDispute",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1735,
                              "src": "6249:16:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1847,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "6266:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1848,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "6266:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 1844,
                            "name": "Voted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1428,
                            "src": "6232:5:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_bool_$_t_address_$returns$__$",
                              "typeString": "function (uint256,bool,address)"
                            }
                          },
                          "id": 1849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6232:45:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1850,
                        "nodeType": "EmitStatement",
                        "src": "6227:50:6"
                      }
                    ]
                  },
                  "documentation": "@dev Allows token holders to vote\n@param _disputeId is the dispute id\n@param _supportsDispute is the vote (true=the dispute has basis false = vote against dispute)",
                  "id": 1852,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "vote",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1736,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1731,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 1852,
                        "src": "4711:40:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1730,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "4711:27:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1733,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 1852,
                        "src": "4753:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1732,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4753:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1735,
                        "name": "_supportsDispute",
                        "nodeType": "VariableDeclaration",
                        "scope": 1852,
                        "src": "4770:21:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1734,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "4770:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4710:82:6"
                  },
                  "returnParameters": {
                    "id": 1737,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4800:0:6"
                  },
                  "scope": 2349,
                  "src": "4697:1587:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2135,
                    "nodeType": "Block",
                    "src": "6464:3661:6",
                    "statements": [
                      {
                        "assignments": [
                          1862
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1862,
                            "name": "disp",
                            "nodeType": "VariableDeclaration",
                            "scope": 2135,
                            "src": "6474:31:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                              "typeString": "struct ZapStorage.Dispute"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1861,
                              "name": "ZapStorage.Dispute",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3624,
                              "src": "6474:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                "typeString": "struct ZapStorage.Dispute"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1867,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1863,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1854,
                              "src": "6508:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 1864,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "disputesById",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3711,
                            "src": "6508:17:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                            }
                          },
                          "id": 1866,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1865,
                            "name": "_disputeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1856,
                            "src": "6526:10:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6508:29:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                            "typeString": "struct ZapStorage.Dispute storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6474:63:6"
                      },
                      {
                        "assignments": [
                          1871
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1871,
                            "name": "_request",
                            "nodeType": "VariableDeclaration",
                            "scope": 2135,
                            "src": "6547:35:6",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                              "typeString": "struct ZapStorage.Request"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 1870,
                              "name": "ZapStorage.Request",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3672,
                              "src": "6547:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                "typeString": "struct ZapStorage.Request"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 1881,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1872,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1854,
                              "src": "6585:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 1873,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3730,
                            "src": "6585:19:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                            }
                          },
                          "id": 1880,
                          "indexExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1874,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1862,
                                "src": "6605:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 1875,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "6605:20:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 1879,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "726571756573744964",
                                  "id": 1877,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6636:11:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                    "typeString": "literal_string \"requestId\""
                                  },
                                  "value": "requestId"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                    "typeString": "literal_string \"requestId\""
                                  }
                                ],
                                "id": 1876,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "6626:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 1878,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6626:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6605:44:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6585:65:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$3672_storage",
                            "typeString": "struct ZapStorage.Request storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6547:103:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1886,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1883,
                                  "name": "disp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1862,
                                  "src": "6729:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                    "typeString": "struct ZapStorage.Dispute storage pointer"
                                  }
                                },
                                "id": 1884,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "executed",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3605,
                                "src": "6729:13:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 1885,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "6746:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              "src": "6729:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1882,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "6721:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1887,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6721:31:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1888,
                        "nodeType": "ExpressionStatement",
                        "src": "6721:31:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1897,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1890,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4292,
                                "src": "6820:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1891,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1862,
                                    "src": "6826:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1892,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputeUintVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3619,
                                  "src": "6826:20:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 1896,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "6d696e457865637574696f6e44617465",
                                      "id": 1894,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6857:18:6",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                        "typeString": "literal_string \"minExecutionDate\""
                                      },
                                      "value": "minExecutionDate"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                        "typeString": "literal_string \"minExecutionDate\""
                                      }
                                    ],
                                    "id": 1893,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "6847:9:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 1895,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6847:29:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6826:51:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6820:57:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 1889,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "6812:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 1898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6812:66:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1899,
                        "nodeType": "ExpressionStatement",
                        "src": "6812:66:6"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 1903,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1900,
                              "name": "disp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1862,
                              "src": "6941:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                "typeString": "struct ZapStorage.Dispute storage pointer"
                              }
                            },
                            "id": 1901,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "isPropFork",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3609,
                            "src": "6941:15:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "66616c7365",
                            "id": 1902,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6959:5:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "6941:23:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2115,
                          "nodeType": "Block",
                          "src": "9535:379:6",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                },
                                "id": 2069,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2066,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1862,
                                    "src": "9552:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 2067,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "tally",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3603,
                                  "src": "9552:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 2068,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9565:1:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "9552:14:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 2114,
                              "nodeType": "IfStatement",
                              "src": "9549:355:6",
                              "trueBody": {
                                "id": 2113,
                                "nodeType": "Block",
                                "src": "9568:336:6",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2088,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2071,
                                                "name": "disp",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1862,
                                                "src": "9594:4:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                                }
                                              },
                                              "id": 2072,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "disputeUintVars",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 3619,
                                              "src": "9594:20:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                "typeString": "mapping(bytes32 => uint256)"
                                              }
                                            },
                                            "id": 2076,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "hexValue": "71756f72756d",
                                                  "id": 2074,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "string",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "9625:8:6",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                                    "typeString": "literal_string \"quorum\""
                                                  },
                                                  "value": "quorum"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                                    "typeString": "literal_string \"quorum\""
                                                  }
                                                ],
                                                "id": 2073,
                                                "name": "keccak256",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 4284,
                                                "src": "9615:9:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                                }
                                              },
                                              "id": 2075,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "9615:19:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "9594:41:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "components": [
                                              {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2086,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  },
                                                  "id": 2084,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "argumentTypes": null,
                                                    "baseExpression": {
                                                      "argumentTypes": null,
                                                      "expression": {
                                                        "argumentTypes": null,
                                                        "id": 2077,
                                                        "name": "self",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 1854,
                                                        "src": "9640:4:6",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                                        }
                                                      },
                                                      "id": 2078,
                                                      "isConstant": false,
                                                      "isLValue": true,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "memberName": "uintVars",
                                                      "nodeType": "MemberAccess",
                                                      "referencedDeclaration": 3693,
                                                      "src": "9640:13:6",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                        "typeString": "mapping(bytes32 => uint256)"
                                                      }
                                                    },
                                                    "id": 2082,
                                                    "indexExpression": {
                                                      "argumentTypes": null,
                                                      "arguments": [
                                                        {
                                                          "argumentTypes": null,
                                                          "hexValue": "746f74616c5f737570706c79",
                                                          "id": 2080,
                                                          "isConstant": false,
                                                          "isLValue": false,
                                                          "isPure": true,
                                                          "kind": "string",
                                                          "lValueRequested": false,
                                                          "nodeType": "Literal",
                                                          "src": "9664:14:6",
                                                          "subdenomination": null,
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                                            "typeString": "literal_string \"total_supply\""
                                                          },
                                                          "value": "total_supply"
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                                            "typeString": "literal_string \"total_supply\""
                                                          }
                                                        ],
                                                        "id": 2079,
                                                        "name": "keccak256",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 4284,
                                                        "src": "9654:9:6",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                                        }
                                                      },
                                                      "id": 2081,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "functionCall",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "9654:25:6",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_bytes32",
                                                        "typeString": "bytes32"
                                                      }
                                                    },
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "IndexAccess",
                                                    "src": "9640:40:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "*",
                                                  "rightExpression": {
                                                    "argumentTypes": null,
                                                    "hexValue": "3230",
                                                    "id": 2083,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "9683:2:6",
                                                    "subdenomination": null,
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_rational_20_by_1",
                                                      "typeString": "int_const 20"
                                                    },
                                                    "value": "20"
                                                  },
                                                  "src": "9640:45:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "/",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "313030",
                                                  "id": 2085,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "9688:3:6",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_100_by_1",
                                                    "typeString": "int_const 100"
                                                  },
                                                  "value": "100"
                                                },
                                                "src": "9640:51:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "id": 2087,
                                            "isConstant": false,
                                            "isInlineArray": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "TupleExpression",
                                            "src": "9639:53:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "9594:98:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        ],
                                        "id": 2070,
                                        "name": "require",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [
                                          4293,
                                          4294
                                        ],
                                        "referencedDeclaration": 4293,
                                        "src": "9586:7:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                          "typeString": "function (bool) pure"
                                        }
                                      },
                                      "id": 2089,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "9586:107:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2090,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9586:107:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2100,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2091,
                                            "name": "self",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1854,
                                            "src": "9711:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                              "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                            }
                                          },
                                          "id": 2096,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "addressVars",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3689,
                                          "src": "9711:16:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                            "typeString": "mapping(bytes32 => address)"
                                          }
                                        },
                                        "id": 2097,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "hexValue": "7a6170436f6e7472616374",
                                              "id": 2094,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "9738:13:6",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                                "typeString": "literal_string \"zapContract\""
                                              },
                                              "value": "zapContract"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                                "typeString": "literal_string \"zapContract\""
                                              }
                                            ],
                                            "id": 2093,
                                            "name": "keccak256",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4284,
                                            "src": "9728:9:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                              "typeString": "function (bytes memory) pure returns (bytes32)"
                                            }
                                          },
                                          "id": 2095,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "9728:24:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "9711:42:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2098,
                                          "name": "disp",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1862,
                                          "src": "9756:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                            "typeString": "struct ZapStorage.Dispute storage pointer"
                                          }
                                        },
                                        "id": 2099,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "proposedForkAddress",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3615,
                                        "src": "9756:24:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "src": "9711:69:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "id": 2101,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9711:69:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2106,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2102,
                                          "name": "disp",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1862,
                                          "src": "9798:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                            "typeString": "struct ZapStorage.Dispute storage pointer"
                                          }
                                        },
                                        "id": 2104,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "disputeVotePassed",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3607,
                                        "src": "9798:22:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 2105,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9823:4:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "9798:29:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 2107,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9798:29:6"
                                  },
                                  {
                                    "eventCall": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2109,
                                            "name": "disp",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1862,
                                            "src": "9864:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                              "typeString": "struct ZapStorage.Dispute storage pointer"
                                            }
                                          },
                                          "id": 2110,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "proposedForkAddress",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3615,
                                          "src": "9864:24:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        ],
                                        "id": 2108,
                                        "name": "NewZapAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1444,
                                        "src": "9850:13:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                                          "typeString": "function (address)"
                                        }
                                      },
                                      "id": 2111,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "9850:39:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2112,
                                    "nodeType": "EmitStatement",
                                    "src": "9845:44:6"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 2116,
                        "nodeType": "IfStatement",
                        "src": "6937:2977:6",
                        "trueBody": {
                          "id": 2065,
                          "nodeType": "Block",
                          "src": "6965:2564:6",
                          "statements": [
                            {
                              "assignments": [
                                1907
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1907,
                                  "name": "stakes",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 2065,
                                  "src": "6975:35:6",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                    "typeString": "struct ZapStorage.StakeInfo"
                                  },
                                  "typeName": {
                                    "contractScope": null,
                                    "id": 1906,
                                    "name": "ZapStorage.StakeInfo",
                                    "nodeType": "UserDefinedTypeName",
                                    "referencedDeclaration": 3629,
                                    "src": "6975:20:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                      "typeString": "struct ZapStorage.StakeInfo"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1913,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1908,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1854,
                                    "src": "7013:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 1909,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "stakerDetails",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3726,
                                  "src": "7013:18:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                    "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                  }
                                },
                                "id": 1912,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1910,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1862,
                                    "src": "7032:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1911,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "reportedMiner",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3611,
                                  "src": "7032:18:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7013:38:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                  "typeString": "struct ZapStorage.StakeInfo storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6975:76:6"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_int256",
                                  "typeString": "int256"
                                },
                                "id": 1917,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1914,
                                    "name": "disp",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1862,
                                    "src": "7264:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                    }
                                  },
                                  "id": 1915,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "tally",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3603,
                                  "src": "7264:10:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_int256",
                                    "typeString": "int256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1916,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7277:1:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "7264:14:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 2063,
                                "nodeType": "Block",
                                "src": "8861:531:6",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2018,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2014,
                                          "name": "stakes",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1907,
                                          "src": "8960:6:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                            "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                          }
                                        },
                                        "id": 2016,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "currentStatus",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3626,
                                        "src": "8960:20:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 2017,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8983:1:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "8960:24:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 2019,
                                    "nodeType": "ExpressionStatement",
                                    "src": "8960:24:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 2023,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1854,
                                          "src": "9094:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "id": 2025,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4313,
                                              "src": "9107:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                                "typeString": "library ZapDispute"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                                "typeString": "library ZapDispute"
                                              }
                                            ],
                                            "id": 2024,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "9099:7:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": "address"
                                          },
                                          "id": 2026,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "9099:13:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2027,
                                            "name": "disp",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1862,
                                            "src": "9113:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                              "typeString": "struct ZapStorage.Dispute storage pointer"
                                            }
                                          },
                                          "id": 2028,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "reportedMiner",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3611,
                                          "src": "9113:18:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 2029,
                                              "name": "disp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1862,
                                              "src": "9132:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                "typeString": "struct ZapStorage.Dispute storage pointer"
                                              }
                                            },
                                            "id": 2030,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "disputeUintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3619,
                                            "src": "9132:20:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 2034,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "666565",
                                                "id": 2032,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "9163:5:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                                  "typeString": "literal_string \"fee\""
                                                },
                                                "value": "fee"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                                  "typeString": "literal_string \"fee\""
                                                }
                                              ],
                                              "id": 2031,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "9153:9:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 2033,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "9153:16:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "9132:38:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2020,
                                          "name": "ZapTransfer",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4275,
                                          "src": "9071:11:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                            "typeString": "type(library ZapTransfer)"
                                          }
                                        },
                                        "id": 2022,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "doTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3985,
                                        "src": "9071:22:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                                        }
                                      },
                                      "id": 2035,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "9071:100:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 2036,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9071:100:6"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 2047,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2037,
                                            "name": "_request",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1871,
                                            "src": "9192:8:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                              "typeString": "struct ZapStorage.Request storage pointer"
                                            }
                                          },
                                          "id": 2038,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "inDispute",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3659,
                                          "src": "9192:18:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                            "typeString": "mapping(uint256 => bool)"
                                          }
                                        },
                                        "id": 2045,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 2039,
                                              "name": "disp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1862,
                                              "src": "9211:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                "typeString": "struct ZapStorage.Dispute storage pointer"
                                              }
                                            },
                                            "id": 2040,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "disputeUintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3619,
                                            "src": "9211:20:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 2044,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "74696d657374616d70",
                                                "id": 2042,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "9242:11:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                  "typeString": "literal_string \"timestamp\""
                                                },
                                                "value": "timestamp"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                  "typeString": "literal_string \"timestamp\""
                                                }
                                              ],
                                              "id": 2041,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "9232:9:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 2043,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "9232:22:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "9211:44:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "9192:64:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 2046,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "9260:4:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "9192:72:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 2062,
                                    "nodeType": "IfStatement",
                                    "src": "9189:189:6",
                                    "trueBody": {
                                      "id": 2061,
                                      "nodeType": "Block",
                                      "src": "9265:113:6",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2059,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "expression": {
                                                  "argumentTypes": null,
                                                  "id": 2048,
                                                  "name": "_request",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1871,
                                                  "src": "9287:8:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                                    "typeString": "struct ZapStorage.Request storage pointer"
                                                  }
                                                },
                                                "id": 2056,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "inDispute",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3659,
                                                "src": "9287:18:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                                  "typeString": "mapping(uint256 => bool)"
                                                }
                                              },
                                              "id": 2057,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2050,
                                                    "name": "disp",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1862,
                                                    "src": "9306:4:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                                    }
                                                  },
                                                  "id": 2051,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "disputeUintVars",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 3619,
                                                  "src": "9306:20:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                    "typeString": "mapping(bytes32 => uint256)"
                                                  }
                                                },
                                                "id": 2055,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "arguments": [
                                                    {
                                                      "argumentTypes": null,
                                                      "hexValue": "74696d657374616d70",
                                                      "id": 2053,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "9337:11:6",
                                                      "subdenomination": null,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                        "typeString": "literal_string \"timestamp\""
                                                      },
                                                      "value": "timestamp"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                        "typeString": "literal_string \"timestamp\""
                                                      }
                                                    ],
                                                    "id": 2052,
                                                    "name": "keccak256",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4284,
                                                    "src": "9327:9:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                                    }
                                                  },
                                                  "id": 2054,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "9327:22:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes32",
                                                    "typeString": "bytes32"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "9306:44:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "9287:64:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "hexValue": "66616c7365",
                                              "id": 2058,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "bool",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "9354:5:6",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "value": "false"
                                            },
                                            "src": "9287:72:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 2060,
                                          "nodeType": "ExpressionStatement",
                                          "src": "9287:72:6"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "id": 2064,
                              "nodeType": "IfStatement",
                              "src": "7260:2132:6",
                              "trueBody": {
                                "id": 2013,
                                "nodeType": "Block",
                                "src": "7281:1574:6",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1922,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1918,
                                          "name": "stakes",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1907,
                                          "src": "7453:6:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                            "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                          }
                                        },
                                        "id": 1920,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "currentStatus",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3626,
                                        "src": "7453:20:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "30",
                                        "id": 1921,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "7476:1:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "7453:24:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1923,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7453:24:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1933,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1924,
                                          "name": "stakes",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1907,
                                          "src": "7495:6:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                            "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                          }
                                        },
                                        "id": 1926,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "startDate",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3628,
                                        "src": "7495:16:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 1932,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 1927,
                                          "name": "now",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4292,
                                          "src": "7514:3:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "components": [
                                            {
                                              "argumentTypes": null,
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 1930,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "argumentTypes": null,
                                                "id": 1928,
                                                "name": "now",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 4292,
                                                "src": "7520:3:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "%",
                                              "rightExpression": {
                                                "argumentTypes": null,
                                                "hexValue": "3836343030",
                                                "id": 1929,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "7526:5:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_86400_by_1",
                                                  "typeString": "int_const 86400"
                                                },
                                                "value": "86400"
                                              },
                                              "src": "7520:11:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            }
                                          ],
                                          "id": 1931,
                                          "isConstant": false,
                                          "isInlineArray": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "TupleExpression",
                                          "src": "7519:13:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "7514:18:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "7495:37:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1934,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7495:37:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1942,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "--",
                                      "prefix": false,
                                      "src": "7636:41:6",
                                      "subExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1935,
                                            "name": "self",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1854,
                                            "src": "7636:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                              "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                            }
                                          },
                                          "id": 1940,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "uintVars",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3693,
                                          "src": "7636:13:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                            "typeString": "mapping(bytes32 => uint256)"
                                          }
                                        },
                                        "id": 1941,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "hexValue": "7374616b6572436f756e74",
                                              "id": 1938,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "string",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "7660:13:6",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                                "typeString": "literal_string \"stakerCount\""
                                              },
                                              "value": "stakerCount"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                                "typeString": "literal_string \"stakerCount\""
                                              }
                                            ],
                                            "id": 1937,
                                            "name": "keccak256",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4284,
                                            "src": "7650:9:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                              "typeString": "function (bytes memory) pure returns (bytes32)"
                                            }
                                          },
                                          "id": 1939,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "7650:24:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bytes32",
                                            "typeString": "bytes32"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "7636:39:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1943,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7636:41:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 1945,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1854,
                                          "src": "7712:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        ],
                                        "id": 1944,
                                        "name": "updateDisputeFee",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2348,
                                        "src": "7695:16:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$__$",
                                          "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer)"
                                        }
                                      },
                                      "id": 1946,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7695:22:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1947,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7695:22:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 1951,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1854,
                                          "src": "7850:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1952,
                                            "name": "disp",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1862,
                                            "src": "7856:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                              "typeString": "struct ZapStorage.Dispute storage pointer"
                                            }
                                          },
                                          "id": 1953,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "reportedMiner",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3611,
                                          "src": "7856:18:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1954,
                                            "name": "disp",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1862,
                                            "src": "7875:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                              "typeString": "struct ZapStorage.Dispute storage pointer"
                                            }
                                          },
                                          "id": 1955,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "reportingParty",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3613,
                                          "src": "7875:19:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 1956,
                                              "name": "self",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1854,
                                              "src": "7896:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                              }
                                            },
                                            "id": 1957,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "uintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3693,
                                            "src": "7896:13:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 1961,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "7374616b65416d6f756e74",
                                                "id": 1959,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "7920:13:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                  "typeString": "literal_string \"stakeAmount\""
                                                },
                                                "value": "stakeAmount"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                  "typeString": "literal_string \"stakeAmount\""
                                                }
                                              ],
                                              "id": 1958,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "7910:9:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 1960,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "7910:24:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "7896:39:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1948,
                                          "name": "ZapTransfer",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4275,
                                          "src": "7827:11:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                            "typeString": "type(library ZapTransfer)"
                                          }
                                        },
                                        "id": 1950,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "doTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3985,
                                        "src": "7827:22:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                                        }
                                      },
                                      "id": 1962,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "7827:109:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1963,
                                    "nodeType": "ExpressionStatement",
                                    "src": "7827:109:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 1967,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1854,
                                          "src": "8058:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "id": 1969,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4313,
                                              "src": "8072:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                                "typeString": "library ZapDispute"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                                "typeString": "library ZapDispute"
                                              }
                                            ],
                                            "id": 1968,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "8064:7:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": "address"
                                          },
                                          "id": 1970,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "8064:13:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1971,
                                            "name": "disp",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1862,
                                            "src": "8078:4:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                              "typeString": "struct ZapStorage.Dispute storage pointer"
                                            }
                                          },
                                          "id": 1972,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "reportingParty",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3613,
                                          "src": "8078:19:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 1973,
                                              "name": "disp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1862,
                                              "src": "8098:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                "typeString": "struct ZapStorage.Dispute storage pointer"
                                              }
                                            },
                                            "id": 1974,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "disputeUintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3619,
                                            "src": "8098:20:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 1978,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "666565",
                                                "id": 1976,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "8129:5:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                                  "typeString": "literal_string \"fee\""
                                                },
                                                "value": "fee"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                                  "typeString": "literal_string \"fee\""
                                                }
                                              ],
                                              "id": 1975,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "8119:9:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 1977,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "8119:16:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "8098:38:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          },
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1964,
                                          "name": "ZapTransfer",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4275,
                                          "src": "8035:11:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                            "typeString": "type(library ZapTransfer)"
                                          }
                                        },
                                        "id": 1966,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "doTransfer",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3985,
                                        "src": "8035:22:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                          "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                                        }
                                      },
                                      "id": 1979,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "8035:102:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 1980,
                                    "nodeType": "ExpressionStatement",
                                    "src": "8035:102:6"
                                  },
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1985,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1981,
                                          "name": "disp",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1862,
                                          "src": "8227:4:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                            "typeString": "struct ZapStorage.Dispute storage pointer"
                                          }
                                        },
                                        "id": 1983,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "memberName": "disputeVotePassed",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3607,
                                        "src": "8227:22:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 1984,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8252:4:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "8227:29:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1986,
                                    "nodeType": "ExpressionStatement",
                                    "src": "8227:29:6"
                                  },
                                  {
                                    "condition": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "id": 1997,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 1987,
                                            "name": "_request",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1871,
                                            "src": "8441:8:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                              "typeString": "struct ZapStorage.Request storage pointer"
                                            }
                                          },
                                          "id": 1988,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "inDispute",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3659,
                                          "src": "8441:18:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                                            "typeString": "mapping(uint256 => bool)"
                                          }
                                        },
                                        "id": 1995,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 1989,
                                              "name": "disp",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1862,
                                              "src": "8460:4:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                "typeString": "struct ZapStorage.Dispute storage pointer"
                                              }
                                            },
                                            "id": 1990,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "disputeUintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3619,
                                            "src": "8460:20:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 1994,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "74696d657374616d70",
                                                "id": 1992,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "8491:11:6",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                  "typeString": "literal_string \"timestamp\""
                                                },
                                                "value": "timestamp"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                  "typeString": "literal_string \"timestamp\""
                                                }
                                              ],
                                              "id": 1991,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "8481:9:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 1993,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "8481:22:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "8460:44:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "8441:64:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "74727565",
                                        "id": 1996,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "8509:4:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "true"
                                      },
                                      "src": "8441:72:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "falseBody": null,
                                    "id": 2012,
                                    "nodeType": "IfStatement",
                                    "src": "8438:187:6",
                                    "trueBody": {
                                      "id": 2011,
                                      "nodeType": "Block",
                                      "src": "8514:111:6",
                                      "statements": [
                                        {
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2009,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "expression": {
                                                  "argumentTypes": null,
                                                  "id": 1998,
                                                  "name": "_request",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1871,
                                                  "src": "8536:8:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                                    "typeString": "struct ZapStorage.Request storage pointer"
                                                  }
                                                },
                                                "id": 2006,
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "finalValues",
                                                "nodeType": "MemberAccess",
                                                "referencedDeclaration": 3655,
                                                "src": "8536:20:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                                  "typeString": "mapping(uint256 => uint256)"
                                                }
                                              },
                                              "id": 2007,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2000,
                                                    "name": "disp",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 1862,
                                                    "src": "8557:4:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                                      "typeString": "struct ZapStorage.Dispute storage pointer"
                                                    }
                                                  },
                                                  "id": 2001,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "disputeUintVars",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 3619,
                                                  "src": "8557:20:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                    "typeString": "mapping(bytes32 => uint256)"
                                                  }
                                                },
                                                "id": 2005,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "arguments": [
                                                    {
                                                      "argumentTypes": null,
                                                      "hexValue": "74696d657374616d70",
                                                      "id": 2003,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "8588:11:6",
                                                      "subdenomination": null,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                        "typeString": "literal_string \"timestamp\""
                                                      },
                                                      "value": "timestamp"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                                        "typeString": "literal_string \"timestamp\""
                                                      }
                                                    ],
                                                    "id": 2002,
                                                    "name": "keccak256",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4284,
                                                    "src": "8578:9:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                                    }
                                                  },
                                                  "id": 2004,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "8578:22:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes32",
                                                    "typeString": "bytes32"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "8557:44:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": true,
                                              "nodeType": "IndexAccess",
                                              "src": "8536:66:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "argumentTypes": null,
                                              "hexValue": "30",
                                              "id": 2008,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "8605:1:6",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_0_by_1",
                                                "typeString": "int_const 0"
                                              },
                                              "value": "0"
                                            },
                                            "src": "8536:70:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2010,
                                          "nodeType": "ExpressionStatement",
                                          "src": "8536:70:6"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2117,
                              "name": "disp",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1862,
                              "src": "9980:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                "typeString": "struct ZapStorage.Dispute storage pointer"
                              }
                            },
                            "id": 2119,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "executed",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3605,
                            "src": "9980:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 2120,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9996:4:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "9980:20:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 2122,
                        "nodeType": "ExpressionStatement",
                        "src": "9980:20:6"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2124,
                              "name": "_disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1856,
                              "src": "10034:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2125,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1862,
                                "src": "10045:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2126,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tally",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3603,
                              "src": "10045:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2127,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1862,
                                "src": "10056:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2128,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "reportedMiner",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3611,
                              "src": "10056:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2129,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1862,
                                "src": "10075:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2130,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "reportingParty",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3613,
                              "src": "10075:19:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2131,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1862,
                                "src": "10095:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2132,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeVotePassed",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3607,
                              "src": "10095:22:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2123,
                            "name": "DisputeVoteTallied",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1440,
                            "src": "10015:18:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_int256_$_t_address_$_t_address_$_t_bool_$returns$__$",
                              "typeString": "function (uint256,int256,address,address,bool)"
                            }
                          },
                          "id": 2133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10015:103:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2134,
                        "nodeType": "EmitStatement",
                        "src": "10010:108:6"
                      }
                    ]
                  },
                  "documentation": "@dev tallies the votes.\n@param _disputeId is the dispute id",
                  "id": 2136,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "tallyVotes",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1857,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1854,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2136,
                        "src": "6398:40:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 1853,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "6398:27:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1856,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2136,
                        "src": "6440:15:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1855,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6440:4:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6397:59:6"
                  },
                  "returnParameters": {
                    "id": 1858,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6464:0:6"
                  },
                  "scope": 2349,
                  "src": "6378:3747:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2271,
                    "nodeType": "Block",
                    "src": "10350:1102:6",
                    "statements": [
                      {
                        "assignments": [
                          2144
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2144,
                            "name": "_hash",
                            "nodeType": "VariableDeclaration",
                            "scope": 2271,
                            "src": "10360:13:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 2143,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "10360:7:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2151,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2148,
                                  "name": "_propNewZapAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2140,
                                  "src": "10403:18:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2146,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4277,
                                  "src": "10386:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 2147,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "10386:16:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 2149,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10386:36:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 2145,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4284,
                            "src": "10376:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 2150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10376:47:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10360:63:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2158,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2153,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2138,
                                    "src": "10441:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2154,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputeIdByDisputeHash",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3738,
                                  "src": "10441:27:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 2156,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2155,
                                  "name": "_hash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2144,
                                  "src": "10469:5:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10441:34:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2157,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10479:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "10441:39:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2152,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "10433:7:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 2159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10433:48:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2160,
                        "nodeType": "ExpressionStatement",
                        "src": "10433:48:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2164,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2138,
                              "src": "10514:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2165,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "10520:3:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2166,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "10520:10:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2168,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4313,
                                  "src": "10539:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                    "typeString": "library ZapDispute"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ZapDispute_$2349",
                                    "typeString": "library ZapDispute"
                                  }
                                ],
                                "id": 2167,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10531:7:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 2169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10531:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2170,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2138,
                                  "src": "10546:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2171,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "10546:13:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2175,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "64697370757465466565",
                                    "id": 2173,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "10570:12:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                      "typeString": "literal_string \"disputeFee\""
                                    },
                                    "value": "disputeFee"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                      "typeString": "literal_string \"disputeFee\""
                                    }
                                  ],
                                  "id": 2172,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "10560:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2174,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10560:23:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10546:38:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2161,
                              "name": "ZapTransfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4275,
                              "src": "10491:11:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                "typeString": "type(library ZapTransfer)"
                              }
                            },
                            "id": 2163,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "doTransfer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3985,
                            "src": "10491:22:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                            }
                          },
                          "id": 2176,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10491:94:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2177,
                        "nodeType": "ExpressionStatement",
                        "src": "10491:94:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2185,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "10617:42:6",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2178,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2138,
                                "src": "10617:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2183,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "10617:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2184,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "64697370757465436f756e74",
                                  "id": 2181,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10641:14:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                    "typeString": "literal_string \"disputeCount\""
                                  },
                                  "value": "disputeCount"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                    "typeString": "literal_string \"disputeCount\""
                                  }
                                ],
                                "id": 2180,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "10631:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10631:25:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10617:40:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2186,
                        "nodeType": "ExpressionStatement",
                        "src": "10617:42:6"
                      },
                      {
                        "assignments": [
                          2188
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2188,
                            "name": "disputeId",
                            "nodeType": "VariableDeclaration",
                            "scope": 2271,
                            "src": "10669:14:6",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2187,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "10669:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2195,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2189,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2138,
                              "src": "10686:4:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2190,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "uintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3693,
                            "src": "10686:13:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2194,
                          "indexExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "64697370757465436f756e74",
                                "id": 2192,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10710:14:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                  "typeString": "literal_string \"disputeCount\""
                                },
                                "value": "disputeCount"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_475da5340e76792184fb177cb85d21980c2530616313aef501564d484eb5ca1e",
                                  "typeString": "literal_string \"disputeCount\""
                                }
                              ],
                              "id": 2191,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4284,
                              "src": "10700:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 2193,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10700:25:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10686:40:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10669:57:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2196,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2138,
                                "src": "10736:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2199,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeIdByDisputeHash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3738,
                              "src": "10736:27:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2200,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2198,
                              "name": "_hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2144,
                              "src": "10764:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10736:34:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 2201,
                            "name": "disputeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2188,
                            "src": "10773:9:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10736:46:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2203,
                        "nodeType": "ExpressionStatement",
                        "src": "10736:46:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2204,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2138,
                                "src": "10792:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2207,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputesById",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3711,
                              "src": "10792:17:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                              }
                            },
                            "id": 2208,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2206,
                              "name": "disputeId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2188,
                              "src": "10810:9:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10792:28:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                              "typeString": "struct ZapStorage.Dispute storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2211,
                                "name": "_hash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2144,
                                "src": "10862:5:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "74727565",
                                "id": 2212,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10893:4:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2213,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "10926:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2214,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "10926:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2215,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "10967:3:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2216,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "10967:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 2217,
                                "name": "_propNewZapAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2140,
                                "src": "11013:18:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 2218,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11055:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 2219,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11093:5:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2220,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11119:1:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2209,
                                "name": "ZapStorage",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3740,
                                "src": "10823:10:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ZapStorage_$3740_$",
                                  "typeString": "type(library ZapStorage)"
                                }
                              },
                              "id": 2210,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "Dispute",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3624,
                              "src": "10823:18:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Dispute_$3624_storage_ptr_$",
                                "typeString": "type(struct ZapStorage.Dispute storage pointer)"
                              }
                            },
                            "id": 2221,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "hash",
                              "isPropFork",
                              "reportedMiner",
                              "reportingParty",
                              "proposedForkAddress",
                              "executed",
                              "disputeVotePassed",
                              "tally"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "10823:312:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_memory",
                              "typeString": "struct ZapStorage.Dispute memory"
                            }
                          },
                          "src": "10792:343:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                            "typeString": "struct ZapStorage.Dispute storage ref"
                          }
                        },
                        "id": 2223,
                        "nodeType": "ExpressionStatement",
                        "src": "10792:343:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2236,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2224,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2138,
                                    "src": "11146:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2227,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "11146:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 2228,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2226,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2188,
                                  "src": "11164:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11146:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 2229,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "11146:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2233,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "626c6f636b4e756d626572",
                                  "id": 2231,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11201:13:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                    "typeString": "literal_string \"blockNumber\""
                                  },
                                  "value": "blockNumber"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                    "typeString": "literal_string \"blockNumber\""
                                  }
                                ],
                                "id": 2230,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "11191:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2232,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11191:24:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11146:70:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2234,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4280,
                              "src": "11219:5:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 2235,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "number",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "11219:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11146:85:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2237,
                        "nodeType": "ExpressionStatement",
                        "src": "11146:85:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2254,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2238,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2138,
                                    "src": "11241:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2241,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "11241:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 2242,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2240,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2188,
                                  "src": "11259:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11241:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 2243,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "11241:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2247,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "666565",
                                  "id": 2245,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11296:5:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                    "typeString": "literal_string \"fee\""
                                  },
                                  "value": "fee"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                    "typeString": "literal_string \"fee\""
                                  }
                                ],
                                "id": 2244,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "11286:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11286:16:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11241:62:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2248,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2138,
                                "src": "11307:4:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2249,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "11307:13:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2253,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "64697370757465466565",
                                  "id": 2251,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11331:12:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  },
                                  "value": "disputeFee"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  }
                                ],
                                "id": 2250,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "11321:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2252,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11321:23:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11307:38:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11241:104:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2255,
                        "nodeType": "ExpressionStatement",
                        "src": "11241:104:6"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2256,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2138,
                                    "src": "11355:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2259,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "disputesById",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3711,
                                  "src": "11355:17:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                  }
                                },
                                "id": 2260,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2258,
                                  "name": "disputeId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2188,
                                  "src": "11373:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11355:28:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                  "typeString": "struct ZapStorage.Dispute storage ref"
                                }
                              },
                              "id": 2261,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeUintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3619,
                              "src": "11355:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 2265,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "6d696e457865637574696f6e44617465",
                                  "id": 2263,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11410:18:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                    "typeString": "literal_string \"minExecutionDate\""
                                  },
                                  "value": "minExecutionDate"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                    "typeString": "literal_string \"minExecutionDate\""
                                  }
                                ],
                                "id": 2262,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "11400:9:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2264,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11400:29:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "11355:75:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2268,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2266,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4292,
                              "src": "11433:3:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "37",
                              "id": 2267,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11439:6:6",
                              "subdenomination": "days",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_604800_by_1",
                                "typeString": "int_const 604800"
                              },
                              "value": "7"
                            },
                            "src": "11433:12:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11355:90:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2270,
                        "nodeType": "ExpressionStatement",
                        "src": "11355:90:6"
                      }
                    ]
                  },
                  "documentation": "@dev Allows for a fork to be proposed\n@param _propNewZapAddress address for new proposed Zap",
                  "id": 2272,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "proposeFork",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2141,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2138,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2272,
                        "src": "10273:40:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2137,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "10273:27:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2140,
                        "name": "_propNewZapAddress",
                        "nodeType": "VariableDeclaration",
                        "scope": 2272,
                        "src": "10315:26:6",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2139,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10315:7:6",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10272:70:6"
                  },
                  "returnParameters": {
                    "id": 2142,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "10350:0:6"
                  },
                  "scope": 2349,
                  "src": "10252:1200:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 2347,
                    "nodeType": "Block",
                    "src": "11697:775:6",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2293,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2284,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2277,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2274,
                                    "src": "11819:4:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2278,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "uintVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3693,
                                  "src": "11819:13:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 2282,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "7374616b6572436f756e74",
                                      "id": 2280,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "11843:13:6",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                        "typeString": "literal_string \"stakerCount\""
                                      },
                                      "value": "stakerCount"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                        "typeString": "literal_string \"stakerCount\""
                                      }
                                    ],
                                    "id": 2279,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "11833:9:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 2281,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "11833:24:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11819:39:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "*",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31303030",
                                "id": 2283,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11859:4:6",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "11819:44:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "/",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2285,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2274,
                                  "src": "11864:4:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2286,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "11864:13:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2290,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "7461726765744d696e657273",
                                    "id": 2288,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "11888:14:6",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                      "typeString": "literal_string \"targetMiners\""
                                    },
                                    "value": "targetMiners"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                      "typeString": "literal_string \"targetMiners\""
                                    }
                                  ],
                                  "id": 2287,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "11878:9:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2289,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "11878:25:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11864:40:6",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "11819:85:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31303030",
                            "id": 2292,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "11907:4:6",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          },
                          "src": "11819:92:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2345,
                          "nodeType": "Block",
                          "src": "12298:168:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2343,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2335,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2274,
                                      "src": "12405:4:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2340,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "uintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3693,
                                    "src": "12405:13:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2341,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "64697370757465466565",
                                        "id": 2338,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "12429:12:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                          "typeString": "literal_string \"disputeFee\""
                                        },
                                        "value": "disputeFee"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                          "typeString": "literal_string \"disputeFee\""
                                        }
                                      ],
                                      "id": 2337,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "12419:9:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2339,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "12419:23:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "12405:38:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "hexValue": "3135653138",
                                  "id": 2342,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "12446:5:6",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_15000000000000000000_by_1",
                                    "typeString": "int_const 15000000000000000000"
                                  },
                                  "value": "15e18"
                                },
                                "src": "12405:46:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2344,
                              "nodeType": "ExpressionStatement",
                              "src": "12405:46:6"
                            }
                          ]
                        },
                        "id": 2346,
                        "nodeType": "IfStatement",
                        "src": "11816:650:6",
                        "trueBody": {
                          "id": 2334,
                          "nodeType": "Block",
                          "src": "11912:369:6",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 2332,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2294,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2274,
                                      "src": "12062:4:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2299,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "uintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3693,
                                    "src": "12062:13:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2300,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "64697370757465466565",
                                        "id": 2297,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "12086:12:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                          "typeString": "literal_string \"disputeFee\""
                                        },
                                        "value": "disputeFee"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                          "typeString": "literal_string \"disputeFee\""
                                        }
                                      ],
                                      "id": 2296,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "12076:9:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2298,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "12076:23:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "12062:38:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "3135653138",
                                      "id": 2303,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "12117:5:6",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_15000000000000000000_by_1",
                                        "typeString": "int_const 15000000000000000000"
                                      },
                                      "value": "15e18"
                                    },
                                    {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2330,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 2327,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "hexValue": "31303030",
                                              "id": 2311,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "number",
                                              "lValueRequested": false,
                                              "nodeType": "Literal",
                                              "src": "12167:4:6",
                                              "subdenomination": null,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_rational_1000_by_1",
                                                "typeString": "int_const 1000"
                                              },
                                              "value": "1000"
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 2326,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "argumentTypes": null,
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 2319,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "argumentTypes": null,
                                                  "baseExpression": {
                                                    "argumentTypes": null,
                                                    "expression": {
                                                      "argumentTypes": null,
                                                      "id": 2312,
                                                      "name": "self",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 2274,
                                                      "src": "12174:4:6",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                                      }
                                                    },
                                                    "id": 2313,
                                                    "isConstant": false,
                                                    "isLValue": true,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "uintVars",
                                                    "nodeType": "MemberAccess",
                                                    "referencedDeclaration": 3693,
                                                    "src": "12174:13:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                      "typeString": "mapping(bytes32 => uint256)"
                                                    }
                                                  },
                                                  "id": 2317,
                                                  "indexExpression": {
                                                    "argumentTypes": null,
                                                    "arguments": [
                                                      {
                                                        "argumentTypes": null,
                                                        "hexValue": "7374616b6572436f756e74",
                                                        "id": 2315,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "kind": "string",
                                                        "lValueRequested": false,
                                                        "nodeType": "Literal",
                                                        "src": "12198:13:6",
                                                        "subdenomination": null,
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                                          "typeString": "literal_string \"stakerCount\""
                                                        },
                                                        "value": "stakerCount"
                                                      }
                                                    ],
                                                    "expression": {
                                                      "argumentTypes": [
                                                        {
                                                          "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                                          "typeString": "literal_string \"stakerCount\""
                                                        }
                                                      ],
                                                      "id": 2314,
                                                      "name": "keccak256",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 4284,
                                                      "src": "12188:9:6",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                                      }
                                                    },
                                                    "id": 2316,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "functionCall",
                                                    "lValueRequested": false,
                                                    "names": [],
                                                    "nodeType": "FunctionCall",
                                                    "src": "12188:24:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_bytes32",
                                                      "typeString": "bytes32"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "12174:39:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                  "argumentTypes": null,
                                                  "hexValue": "31303030",
                                                  "id": 2318,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "12214:4:6",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_1000_by_1",
                                                    "typeString": "int_const 1000"
                                                  },
                                                  "value": "1000"
                                                },
                                                "src": "12174:44:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "/",
                                              "rightExpression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "expression": {
                                                    "argumentTypes": null,
                                                    "id": 2320,
                                                    "name": "self",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 2274,
                                                    "src": "12219:4:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                                    }
                                                  },
                                                  "id": 2321,
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "memberName": "uintVars",
                                                  "nodeType": "MemberAccess",
                                                  "referencedDeclaration": 3693,
                                                  "src": "12219:13:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                    "typeString": "mapping(bytes32 => uint256)"
                                                  }
                                                },
                                                "id": 2325,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "arguments": [
                                                    {
                                                      "argumentTypes": null,
                                                      "hexValue": "7461726765744d696e657273",
                                                      "id": 2323,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": true,
                                                      "kind": "string",
                                                      "lValueRequested": false,
                                                      "nodeType": "Literal",
                                                      "src": "12243:14:6",
                                                      "subdenomination": null,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                                        "typeString": "literal_string \"targetMiners\""
                                                      },
                                                      "value": "targetMiners"
                                                    }
                                                  ],
                                                  "expression": {
                                                    "argumentTypes": [
                                                      {
                                                        "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                                        "typeString": "literal_string \"targetMiners\""
                                                      }
                                                    ],
                                                    "id": 2322,
                                                    "name": "keccak256",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 4284,
                                                    "src": "12233:9:6",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                                    }
                                                  },
                                                  "id": 2324,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "12233:25:6",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_bytes32",
                                                    "typeString": "bytes32"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "12219:40:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "src": "12174:85:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "12167:92:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2304,
                                                "name": "self",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2274,
                                                "src": "12123:4:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                                }
                                              },
                                              "id": 2305,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "uintVars",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 3693,
                                              "src": "12123:13:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                                "typeString": "mapping(bytes32 => uint256)"
                                              }
                                            },
                                            "id": 2309,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "arguments": [
                                                {
                                                  "argumentTypes": null,
                                                  "hexValue": "7374616b65416d6f756e74",
                                                  "id": 2307,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "string",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "12147:13:6",
                                                  "subdenomination": null,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                    "typeString": "literal_string \"stakeAmount\""
                                                  },
                                                  "value": "stakeAmount"
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                    "typeString": "literal_string \"stakeAmount\""
                                                  }
                                                ],
                                                "id": 2306,
                                                "name": "keccak256",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 4284,
                                                "src": "12137:9:6",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                                }
                                              },
                                              "id": 2308,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "kind": "functionCall",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "12137:24:6",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bytes32",
                                                "typeString": "bytes32"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "12123:39:6",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 2310,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "mul",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 1353,
                                          "src": "12123:43:6",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                                          }
                                        },
                                        "id": 2328,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "12123:137:6",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "/",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "31303030",
                                        "id": 2329,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "12261:4:6",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000_by_1",
                                          "typeString": "int_const 1000"
                                        },
                                        "value": "1000"
                                      },
                                      "src": "12123:142:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_15000000000000000000_by_1",
                                        "typeString": "int_const 15000000000000000000"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2301,
                                      "name": "SafeMathM",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1374,
                                      "src": "12103:9:6",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_SafeMathM_$1374_$",
                                        "typeString": "type(library SafeMathM)"
                                      }
                                    },
                                    "id": 2302,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "max",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1285,
                                    "src": "12103:13:6",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 2331,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "12103:163:6",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "12062:204:6",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2333,
                              "nodeType": "ExpressionStatement",
                              "src": "12062:204:6"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev this function allows the dispute fee to fluctuate based on the number of miners on the system.\nThe floor for the fee is 15e18.",
                  "id": 2348,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateDisputeFee",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2275,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2274,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2348,
                        "src": "11648:40:6",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2273,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "11648:27:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11647:42:6"
                  },
                  "returnParameters": {
                    "id": 2276,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11697:0:6"
                  },
                  "scope": 2349,
                  "src": "11622:850:6",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 2350,
              "src": "213:12261:6"
            }
          ],
          "src": "0:12475:6"
        },
        "id": 6
      },
      "contracts/libraries/ZapGettersLibrary.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/ZapGettersLibrary.sol",
          "exportedSymbols": {
            "ZapGettersLibrary": [
              3196
            ]
          },
          "id": 3197,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 2351,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:7"
            },
            {
              "absolutePath": "contracts/libraries/SafeMathM.sol",
              "file": "./SafeMathM.sol",
              "id": 2352,
              "nodeType": "ImportDirective",
              "scope": 3197,
              "sourceUnit": 1375,
              "src": "25:25:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapStorage.sol",
              "file": "./ZapStorage.sol",
              "id": 2353,
              "nodeType": "ImportDirective",
              "scope": 3197,
              "sourceUnit": 3741,
              "src": "51:26:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/Utilities.sol",
              "file": "./Utilities.sol",
              "id": 2354,
              "nodeType": "ImportDirective",
              "scope": 3197,
              "sourceUnit": 1404,
              "src": "78:25:7",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title Zap Getters Library\n@dev This is the getter library for all variables in the Zap Token system. ZapGetters references this \nlibary for the getters logic",
              "fullyImplemented": true,
              "id": 3196,
              "linearizedBaseContracts": [
                3196
              ],
              "name": "ZapGettersLibrary",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 2357,
                  "libraryName": {
                    "contractScope": null,
                    "id": 2355,
                    "name": "SafeMathM",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1374,
                    "src": "314:9:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMathM_$1374",
                      "typeString": "library SafeMathM"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "308:28:7",
                  "typeName": {
                    "id": 2356,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "328:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 2361,
                  "name": "NewZapAddress",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 2360,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2359,
                        "indexed": false,
                        "name": "_newZap",
                        "nodeType": "VariableDeclaration",
                        "scope": 2361,
                        "src": "362:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2358,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "362:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "361:17:7"
                  },
                  "src": "342:37:7"
                },
                {
                  "body": {
                    "id": 2390,
                    "nodeType": "Block",
                    "src": "868:135:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2377,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2369,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2363,
                                    "src": "886:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2370,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "addressVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3689,
                                  "src": "886:16:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                    "typeString": "mapping(bytes32 => address)"
                                  }
                                },
                                "id": 2374,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "5f6465697479",
                                      "id": 2372,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "913:8:7",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                        "typeString": "literal_string \"_deity\""
                                      },
                                      "value": "_deity"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                        "typeString": "literal_string \"_deity\""
                                      }
                                    ],
                                    "id": 2371,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "903:9:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 2373,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "903:19:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "886:37:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2375,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "927:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2376,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "927:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "886:51:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2368,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "878:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 2378,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "878:60:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2379,
                        "nodeType": "ExpressionStatement",
                        "src": "878:60:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2388,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2380,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2363,
                                "src": "948:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2385,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "addressVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3689,
                              "src": "948:16:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 2386,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "5f6465697479",
                                  "id": 2383,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "975:8:7",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                    "typeString": "literal_string \"_deity\""
                                  },
                                  "value": "_deity"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                    "typeString": "literal_string \"_deity\""
                                  }
                                ],
                                "id": 2382,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "965:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2384,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "965:19:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "948:37:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 2387,
                            "name": "_newDeity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2365,
                            "src": "987:9:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "948:48:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2389,
                        "nodeType": "ExpressionStatement",
                        "src": "948:48:7"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows us to set a new Deity (or remove it) \n@param _newDeity address of the new Deity of the zap system ",
                  "id": 2391,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "changeDeity",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2366,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2363,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2391,
                        "src": "799:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2362,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "799:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2365,
                        "name": "_newDeity",
                        "nodeType": "VariableDeclaration",
                        "scope": 2391,
                        "src": "841:17:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2364,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "841:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "798:61:7"
                  },
                  "returnParameters": {
                    "id": 2367,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "868:0:7"
                  },
                  "scope": 3196,
                  "src": "778:225:7",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2424,
                    "nodeType": "Block",
                    "src": "1291:185:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 2407,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2399,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2393,
                                    "src": "1309:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2400,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "addressVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3689,
                                  "src": "1309:16:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                    "typeString": "mapping(bytes32 => address)"
                                  }
                                },
                                "id": 2404,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "5f6465697479",
                                      "id": 2402,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "1336:8:7",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                        "typeString": "literal_string \"_deity\""
                                      },
                                      "value": "_deity"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                                        "typeString": "literal_string \"_deity\""
                                      }
                                    ],
                                    "id": 2401,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "1326:9:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 2403,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1326:19:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1309:37:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2405,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "1350:3:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2406,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1350:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "1309:51:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2398,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1301:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 2408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1301:60:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2409,
                        "nodeType": "ExpressionStatement",
                        "src": "1301:60:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2418,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2410,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2393,
                                "src": "1371:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2415,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "addressVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3689,
                              "src": "1371:16:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                                "typeString": "mapping(bytes32 => address)"
                              }
                            },
                            "id": 2416,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7a6170436f6e7472616374",
                                  "id": 2413,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1398:13:7",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                    "typeString": "literal_string \"zapContract\""
                                  },
                                  "value": "zapContract"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_710052ea0d12b2397f41c761f87b3558ef80d996883cf1def28dfbcfc4778023",
                                    "typeString": "literal_string \"zapContract\""
                                  }
                                ],
                                "id": 2412,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "1388:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 2414,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1388:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1371:42:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 2417,
                            "name": "_zapContract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2395,
                            "src": "1415:12:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1371:56:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 2419,
                        "nodeType": "ExpressionStatement",
                        "src": "1371:56:7"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2421,
                              "name": "_zapContract",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2395,
                              "src": "1456:12:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2420,
                            "name": "NewZapAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2361,
                            "src": "1442:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 2422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1442:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2423,
                        "nodeType": "EmitStatement",
                        "src": "1437:32:7"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows the deity to upgrade the Zap System\n@param _zapContract address of new updated ZapCore contract",
                  "id": 2425,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "changeZapContract",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2396,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2393,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2425,
                        "src": "1220:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2392,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "1220:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2395,
                        "name": "_zapContract",
                        "nodeType": "VariableDeclaration",
                        "scope": 2425,
                        "src": "1261:20:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2394,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1261:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1219:63:7"
                  },
                  "returnParameters": {
                    "id": 2397,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1291:0:7"
                  },
                  "scope": 3196,
                  "src": "1193:283:7",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2443,
                    "nodeType": "Block",
                    "src": "1925:66:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2436,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2427,
                                "src": "1942:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2437,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "minersByChallenge",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3699,
                              "src": "1942:22:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                                "typeString": "mapping(bytes32 => mapping(address => bool))"
                              }
                            },
                            "id": 2439,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 2438,
                              "name": "_challenge",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2429,
                              "src": "1965:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1942:34:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 2441,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2440,
                            "name": "_miner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2431,
                            "src": "1977:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "1942:42:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2435,
                        "id": 2442,
                        "nodeType": "Return",
                        "src": "1935:49:7"
                      }
                    ]
                  },
                  "documentation": "@dev This function tells you if a given challenge has been completed by a given miner\n@param _challenge the challenge to search for\n@param _miner address that you want to know if they solved the challenge\n@return true if the _miner address provided solved the ",
                  "id": 2444,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "didMine",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2432,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2427,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2444,
                        "src": "1821:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2426,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "1821:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2429,
                        "name": "_challenge",
                        "nodeType": "VariableDeclaration",
                        "scope": 2444,
                        "src": "1863:18:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2428,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1863:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2431,
                        "name": "_miner",
                        "nodeType": "VariableDeclaration",
                        "scope": 2444,
                        "src": "1882:14:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2430,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1882:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1820:77:7"
                  },
                  "returnParameters": {
                    "id": 2435,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2434,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2444,
                        "src": "1920:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2433,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1920:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1919:6:7"
                  },
                  "scope": 3196,
                  "src": "1804:187:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2463,
                    "nodeType": "Block",
                    "src": "2321:69:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2455,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2446,
                                  "src": "2338:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2456,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "disputesById",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3711,
                                "src": "2338:17:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                }
                              },
                              "id": 2458,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2457,
                                "name": "_disputeId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2448,
                                "src": "2356:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2338:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                "typeString": "struct ZapStorage.Dispute storage ref"
                              }
                            },
                            "id": 2459,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voted",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3623,
                            "src": "2338:35:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 2461,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2460,
                            "name": "_address",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2450,
                            "src": "2374:8:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2338:45:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 2454,
                        "id": 2462,
                        "nodeType": "Return",
                        "src": "2331:52:7"
                      }
                    ]
                  },
                  "documentation": "@dev Checks if an address voted in a dispute\n@param _disputeId to look up\n@param _address of voting party to look up\n@return bool of whether or not party voted",
                  "id": 2464,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "didVote",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2451,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2446,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2464,
                        "src": "2218:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2445,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "2218:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2448,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2464,
                        "src": "2259:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2447,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2259:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2450,
                        "name": "_address",
                        "nodeType": "VariableDeclaration",
                        "scope": 2464,
                        "src": "2276:16:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2449,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2276:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2217:76:7"
                  },
                  "returnParameters": {
                    "id": 2454,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2453,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2464,
                        "src": "2316:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2452,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2316:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2315:6:7"
                  },
                  "scope": 3196,
                  "src": "2201:189:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2478,
                    "nodeType": "Block",
                    "src": "2844:47:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2473,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2466,
                              "src": "2861:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2474,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "addressVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3689,
                            "src": "2861:16:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                              "typeString": "mapping(bytes32 => address)"
                            }
                          },
                          "id": 2476,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2475,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2468,
                            "src": "2878:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2861:23:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 2472,
                        "id": 2477,
                        "nodeType": "Return",
                        "src": "2854:30:7"
                      }
                    ]
                  },
                  "documentation": "@dev allows Zap to read data from the addressVars mapping\n@param _data is the keccak256(\"variable_name\") of the variable that is being accessed. \nThese are examples of how the variables are saved within other functions:\naddressVars[keccak256(\"_owner\")]\naddressVars[keccak256(\"zapContract\")]",
                  "id": 2479,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAddressVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2469,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2466,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2479,
                        "src": "2757:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2465,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "2757:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2468,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 2479,
                        "src": "2799:13:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2467,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2799:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2756:57:7"
                  },
                  "returnParameters": {
                    "id": 2472,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2471,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2479,
                        "src": "2836:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2470,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2836:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2835:9:7"
                  },
                  "scope": 3196,
                  "src": "2733:158:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2588,
                    "nodeType": "Block",
                    "src": "3831:653:7",
                    "statements": [
                      {
                        "assignments": [
                          2509
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2509,
                            "name": "disp",
                            "nodeType": "VariableDeclaration",
                            "scope": 2588,
                            "src": "3841:31:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                              "typeString": "struct ZapStorage.Dispute"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 2508,
                              "name": "ZapStorage.Dispute",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3624,
                              "src": "3841:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                "typeString": "struct ZapStorage.Dispute"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2514,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2510,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2481,
                              "src": "3875:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2511,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "disputesById",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3711,
                            "src": "3875:17:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                            }
                          },
                          "id": 2513,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2512,
                            "name": "_disputeId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2483,
                            "src": "3893:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3875:29:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                            "typeString": "struct ZapStorage.Dispute storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3841:63:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2515,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "3921:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2516,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "hash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3601,
                              "src": "3921:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2517,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "3931:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2518,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "executed",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3605,
                              "src": "3931:13:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2519,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "3946:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2520,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "disputeVotePassed",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3607,
                              "src": "3946:22:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2521,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "3970:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2522,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "isPropFork",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3609,
                              "src": "3970:15:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2523,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "3987:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2524,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "reportedMiner",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3611,
                              "src": "3987:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2525,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "4007:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2526,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "reportingParty",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3613,
                              "src": "4007:19:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2527,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "4027:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2528,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "proposedForkAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3615,
                              "src": "4027:24:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2529,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4053:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2530,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4053:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2534,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "726571756573744964",
                                        "id": 2532,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4084:11:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                          "typeString": "literal_string \"requestId\""
                                        },
                                        "value": "requestId"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_31b40192effc42bcf1e4289fe674c678e673a3052992548fef566d8c33a21b91",
                                          "typeString": "literal_string \"requestId\""
                                        }
                                      ],
                                      "id": 2531,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4074:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2533,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4074:22:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4053:44:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2535,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4099:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2536,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4099:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2540,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "74696d657374616d70",
                                        "id": 2538,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4130:11:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                          "typeString": "literal_string \"timestamp\""
                                        },
                                        "value": "timestamp"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_4ebf727c48eac2c66272456b06a885c5cc03e54d140f63b63b6fd10c1227958e",
                                          "typeString": "literal_string \"timestamp\""
                                        }
                                      ],
                                      "id": 2537,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4120:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2539,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4120:22:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4099:44:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2541,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4145:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2542,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4145:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2546,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "76616c7565",
                                        "id": 2544,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4176:7:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_81afeeaff0ed5cee7d05a21078399c2f56226b0cd5657062500cef4c4e736f85",
                                          "typeString": "literal_string \"value\""
                                        },
                                        "value": "value"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_81afeeaff0ed5cee7d05a21078399c2f56226b0cd5657062500cef4c4e736f85",
                                          "typeString": "literal_string \"value\""
                                        }
                                      ],
                                      "id": 2543,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4166:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2545,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4166:18:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4145:40:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2547,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4187:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2548,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4187:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2552,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "6d696e457865637574696f6e44617465",
                                        "id": 2550,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4218:18:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                          "typeString": "literal_string \"minExecutionDate\""
                                        },
                                        "value": "minExecutionDate"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_74c9bc34b0b2333f1b565fbee67d940cf7d78b5a980c5f23da43f6729965ed40",
                                          "typeString": "literal_string \"minExecutionDate\""
                                        }
                                      ],
                                      "id": 2549,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4208:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2551,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4208:29:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4187:51:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2553,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4240:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2554,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4240:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2558,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "6e756d6265724f66566f746573",
                                        "id": 2556,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4271:15:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_a0bc13ce85a2091e950a370bced0825e58ab3a3ffeb709ed50d5562cbd82faab",
                                          "typeString": "literal_string \"numberOfVotes\""
                                        },
                                        "value": "numberOfVotes"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_a0bc13ce85a2091e950a370bced0825e58ab3a3ffeb709ed50d5562cbd82faab",
                                          "typeString": "literal_string \"numberOfVotes\""
                                        }
                                      ],
                                      "id": 2555,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4261:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2557,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4261:26:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4240:48:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2559,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4290:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2560,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4290:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2564,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "626c6f636b4e756d626572",
                                        "id": 2562,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4321:13:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                          "typeString": "literal_string \"blockNumber\""
                                        },
                                        "value": "blockNumber"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_6f8f54d1af9b6cb8a219d88672c797f9f3ee97ce5d9369aa897fd0deb5e2dffa",
                                          "typeString": "literal_string \"blockNumber\""
                                        }
                                      ],
                                      "id": 2561,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4311:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2563,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4311:24:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4290:46:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2565,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4338:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2566,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4338:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2570,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "6d696e6572536c6f74",
                                        "id": 2568,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4369:11:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_8ef61a1efbc527d6428ff88c95fdff5c6e644b979bfe67e03cbf88c8162c5fac",
                                          "typeString": "literal_string \"minerSlot\""
                                        },
                                        "value": "minerSlot"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_8ef61a1efbc527d6428ff88c95fdff5c6e644b979bfe67e03cbf88c8162c5fac",
                                          "typeString": "literal_string \"minerSlot\""
                                        }
                                      ],
                                      "id": 2567,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4359:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2569,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4359:22:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4338:44:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2571,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4384:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2572,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4384:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2576,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "71756f72756d",
                                        "id": 2574,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4415:8:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                          "typeString": "literal_string \"quorum\""
                                        },
                                        "value": "quorum"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_30e85ae205656781c1a951cba9f9f53f884833c049d377a2a7046eb5e6d14b26",
                                          "typeString": "literal_string \"quorum\""
                                        }
                                      ],
                                      "id": 2573,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4405:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2575,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4405:19:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4384:41:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2577,
                                      "name": "disp",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2509,
                                      "src": "4426:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                        "typeString": "struct ZapStorage.Dispute storage pointer"
                                      }
                                    },
                                    "id": 2578,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "disputeUintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3619,
                                    "src": "4426:20:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2582,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "666565",
                                        "id": 2580,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4457:5:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                          "typeString": "literal_string \"fee\""
                                        },
                                        "value": "fee"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_833b9f6abf0b529613680afe2a00fa663cc95cbdc47d726d85a044462eabbf02",
                                          "typeString": "literal_string \"fee\""
                                        }
                                      ],
                                      "id": 2579,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "4447:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2581,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4447:16:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4426:38:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 2583,
                              "isConstant": false,
                              "isInlineArray": true,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4052:413:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
                                "typeString": "uint256[9] memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2584,
                                "name": "disp",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2509,
                                "src": "4466:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                                  "typeString": "struct ZapStorage.Dispute storage pointer"
                                }
                              },
                              "id": 2585,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "tally",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3603,
                              "src": "4466:10:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_int256",
                                "typeString": "int256"
                              }
                            }
                          ],
                          "id": 2586,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "3920:557:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes32_$_t_bool_$_t_bool_$_t_bool_$_t_address_$_t_address_$_t_address_$_t_array$_t_uint256_$9_memory_ptr_$_t_int256_$",
                            "typeString": "tuple(bytes32,bool,bool,bool,address,address,address,uint256[9] memory,int256)"
                          }
                        },
                        "functionReturnParameters": 2505,
                        "id": 2587,
                        "nodeType": "Return",
                        "src": "3914:563:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets all dispute variables\n@param _disputeId to look up\n@return bytes32 hash of dispute \n@return bool executed where true if it has been voted on\n@return bool disputeVotePassed\n@return bool isPropFork true if the dispute is a proposed fork\n@return address of reportedMiner\n@return address of reportingParty\n@return address of proposedForkAddress\n@return uint of requestId\n@return uint of timestamp\n@return uint of value\n@return uint of minExecutionDate\n@return uint of numberOfVotes\n@return uint of blocknumber\n@return uint of minerSlot\n@return uint of quorum\n@return uint of fee\n@return int count of the current tally",
                  "id": 2589,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getAllDisputeVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2484,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2481,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3678:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2480,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "3678:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2483,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3719:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2482,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3719:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3677:58:7"
                  },
                  "returnParameters": {
                    "id": 2505,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2486,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3758:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2485,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "3758:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2488,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3767:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2487,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3767:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2490,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3773:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2489,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3773:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2492,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3779:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2491,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3779:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2494,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3785:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2493,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3785:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2496,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3794:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2495,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3794:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2498,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3803:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2497,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3803:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2502,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3811:14:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$9_memory_ptr",
                          "typeString": "uint256[9]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2499,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "3811:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2501,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "39",
                            "id": 2500,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3816:1:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "9"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "3811:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$9_storage_ptr",
                            "typeString": "uint256[9]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2504,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2589,
                        "src": "3827:3:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        },
                        "typeName": {
                          "id": 2503,
                          "name": "int",
                          "nodeType": "ElementaryTypeName",
                          "src": "3827:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_int256",
                            "typeString": "int256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3757:74:7"
                  },
                  "scope": 3196,
                  "src": "3651:833:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2660,
                    "nodeType": "Block",
                    "src": "4906:418:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2606,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2591,
                                "src": "4928:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 2607,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "currentChallenge",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3674,
                              "src": "4928:21:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2608,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2591,
                                  "src": "4950:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2609,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "4950:13:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2613,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "63757272656e74526571756573744964",
                                    "id": 2611,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4974:18:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                      "typeString": "literal_string \"currentRequestId\""
                                    },
                                    "value": "currentRequestId"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                      "typeString": "literal_string \"currentRequestId\""
                                    }
                                  ],
                                  "id": 2610,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "4964:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2612,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4964:29:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4950:44:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2614,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2591,
                                  "src": "4995:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2615,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "uintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3693,
                                "src": "4995:13:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2619,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "646966666963756c7479",
                                    "id": 2617,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5019:12:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_b12aff7664b16cb99339be399b863feecd64d14817be7e1f042f97e3f358e64e",
                                      "typeString": "literal_string \"difficulty\""
                                    },
                                    "value": "difficulty"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_b12aff7664b16cb99339be399b863feecd64d14817be7e1f042f97e3f358e64e",
                                      "typeString": "literal_string \"difficulty\""
                                    }
                                  ],
                                  "id": 2616,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "5009:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2618,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5009:23:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4995:38:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2620,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2591,
                                    "src": "5034:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2621,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "requestDetails",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3730,
                                  "src": "5034:19:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                  }
                                },
                                "id": 2628,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2622,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2591,
                                      "src": "5054:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2623,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "uintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3693,
                                    "src": "5054:13:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2627,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "63757272656e74526571756573744964",
                                        "id": 2625,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5078:18:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                          "typeString": "literal_string \"currentRequestId\""
                                        },
                                        "value": "currentRequestId"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                          "typeString": "literal_string \"currentRequestId\""
                                        }
                                      ],
                                      "id": 2624,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "5068:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2626,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5068:29:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5054:44:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5034:65:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage",
                                  "typeString": "struct ZapStorage.Request storage ref"
                                }
                              },
                              "id": 2629,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "queryString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3636,
                              "src": "5034:77:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2630,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2591,
                                      "src": "5112:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2631,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "requestDetails",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3730,
                                    "src": "5112:19:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                      "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                    }
                                  },
                                  "id": 2638,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2632,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2591,
                                        "src": "5132:4:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 2633,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "uintVars",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3693,
                                      "src": "5132:13:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                        "typeString": "mapping(bytes32 => uint256)"
                                      }
                                    },
                                    "id": 2637,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "hexValue": "63757272656e74526571756573744964",
                                          "id": 2635,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "5156:18:7",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                            "typeString": "literal_string \"currentRequestId\""
                                          },
                                          "value": "currentRequestId"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                            "typeString": "literal_string \"currentRequestId\""
                                          }
                                        ],
                                        "id": 2634,
                                        "name": "keccak256",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4284,
                                        "src": "5146:9:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                        }
                                      },
                                      "id": 2636,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "5146:29:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5132:44:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5112:65:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage",
                                    "typeString": "struct ZapStorage.Request storage ref"
                                  }
                                },
                                "id": 2639,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "5112:77:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2643,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "6772616e756c6172697479",
                                    "id": 2641,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5200:13:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_ba3571a50e0c436953d31396edfb65be5925bcc7fef5a3441ed5d43dbce2548f",
                                      "typeString": "literal_string \"granularity\""
                                    },
                                    "value": "granularity"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_ba3571a50e0c436953d31396edfb65be5925bcc7fef5a3441ed5d43dbce2548f",
                                      "typeString": "literal_string \"granularity\""
                                    }
                                  ],
                                  "id": 2640,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "5190:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2642,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5190:24:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5112:103:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2644,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2591,
                                      "src": "5216:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2645,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "requestDetails",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3730,
                                    "src": "5216:19:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                      "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                    }
                                  },
                                  "id": 2652,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2646,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2591,
                                        "src": "5236:4:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 2647,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "uintVars",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3693,
                                      "src": "5236:13:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                        "typeString": "mapping(bytes32 => uint256)"
                                      }
                                    },
                                    "id": 2651,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "hexValue": "63757272656e74526571756573744964",
                                          "id": 2649,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "5260:18:7",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                            "typeString": "literal_string \"currentRequestId\""
                                          },
                                          "value": "currentRequestId"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_7584d7d8701714da9c117f5bf30af73b0b88aca5338a84a21eb28de2fe0d93b8",
                                            "typeString": "literal_string \"currentRequestId\""
                                          }
                                        ],
                                        "id": 2648,
                                        "name": "keccak256",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4284,
                                        "src": "5250:9:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                        }
                                      },
                                      "id": 2650,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "5250:29:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5236:44:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5216:65:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage",
                                    "typeString": "struct ZapStorage.Request storage ref"
                                  }
                                },
                                "id": 2653,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "5216:77:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2657,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "746f74616c546970",
                                    "id": 2655,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5304:10:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    },
                                    "value": "totalTip"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    }
                                  ],
                                  "id": 2654,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "5294:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2656,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5294:21:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5216:100:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 2658,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4927:390:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes32_$_t_uint256_$_t_uint256_$_t_string_storage_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(bytes32,uint256,uint256,string storage ref,uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 2605,
                        "id": 2659,
                        "nodeType": "Return",
                        "src": "4920:397:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for variables for the requestId being currently mined(currentRequestId)\n@return current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request ",
                  "id": 2661,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCurrentVariables",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2592,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2591,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4798:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2590,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "4798:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4797:42:7"
                  },
                  "returnParameters": {
                    "id": 2605,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2594,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4862:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2593,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4862:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2596,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4871:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2595,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4871:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2598,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4877:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2597,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4877:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2600,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4882:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2599,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4882:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2602,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4896:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2601,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4896:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2604,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2661,
                        "src": "4901:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2603,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4901:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4861:45:7"
                  },
                  "scope": 3196,
                  "src": "4769:555:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2675,
                    "nodeType": "Block",
                    "src": "5639:59:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2670,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2663,
                              "src": "5657:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2671,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "disputeIdByDisputeHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3738,
                            "src": "5657:27:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2673,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2672,
                            "name": "_hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2665,
                            "src": "5685:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "5657:34:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2669,
                        "id": 2674,
                        "nodeType": "Return",
                        "src": "5649:42:7"
                      }
                    ]
                  },
                  "documentation": "@dev Checks if a given hash of miner,requestId has been disputed\n@param _hash is the sha256(abi.encodePacked(_miners[2],_requestId));\n@return uint disputeId",
                  "id": 2676,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDisputeIdByDisputeHash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2666,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2663,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2676,
                        "src": "5556:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2662,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "5556:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2665,
                        "name": "_hash",
                        "nodeType": "VariableDeclaration",
                        "scope": 2676,
                        "src": "5597:13:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2664,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5597:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5555:56:7"
                  },
                  "returnParameters": {
                    "id": 2669,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2668,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2676,
                        "src": "5634:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2667,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "5634:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5633:6:7"
                  },
                  "scope": 3196,
                  "src": "5521:177:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2695,
                    "nodeType": "Block",
                    "src": "6318:76:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2687,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2678,
                                  "src": "6335:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2688,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "disputesById",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3711,
                                "src": "6335:17:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Dispute storage ref)"
                                }
                              },
                              "id": 2690,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2689,
                                "name": "_disputeId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2680,
                                "src": "6353:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6335:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Dispute_$3624_storage",
                                "typeString": "struct ZapStorage.Dispute storage ref"
                              }
                            },
                            "id": 2691,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "disputeUintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3619,
                            "src": "6335:45:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2693,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2692,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2682,
                            "src": "6381:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6335:52:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2686,
                        "id": 2694,
                        "nodeType": "Return",
                        "src": "6328:59:7"
                      }
                    ]
                  },
                  "documentation": "@dev Checks for uint variables in the disputeUintVars mapping based on the disuputeId\n@param _disputeId is the dispute id;\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the disputeUintVars under the Dispute struct\n@return uint value for the bytes32 data submitted",
                  "id": 2696,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getDisputeUintVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2683,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2678,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2696,
                        "src": "6219:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2677,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "6219:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2680,
                        "name": "_disputeId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2696,
                        "src": "6260:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2679,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6260:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2682,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 2696,
                        "src": "6276:13:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2681,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6276:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6218:72:7"
                  },
                  "returnParameters": {
                    "id": 2686,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2685,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2696,
                        "src": "6313:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2684,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6313:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6312:6:7"
                  },
                  "scope": 3196,
                  "src": "6191:203:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2726,
                    "nodeType": "Block",
                    "src": "6709:171:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2706,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2698,
                                  "src": "6740:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2707,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2698,
                                      "src": "6745:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2708,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "requestIdByTimestamp",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3703,
                                    "src": "6745:25:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                      "typeString": "mapping(uint256 => uint256)"
                                    }
                                  },
                                  "id": 2715,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2709,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2698,
                                        "src": "6771:4:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 2710,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "uintVars",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3693,
                                      "src": "6771:13:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                        "typeString": "mapping(bytes32 => uint256)"
                                      }
                                    },
                                    "id": 2714,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "hexValue": "74696d654f664c6173744e657756616c7565",
                                          "id": 2712,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "6795:20:7",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                            "typeString": "literal_string \"timeOfLastNewValue\""
                                          },
                                          "value": "timeOfLastNewValue"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                            "typeString": "literal_string \"timeOfLastNewValue\""
                                          }
                                        ],
                                        "id": 2711,
                                        "name": "keccak256",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4284,
                                        "src": "6785:9:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                          "typeString": "function (bytes memory) pure returns (bytes32)"
                                        }
                                      },
                                      "id": 2713,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6785:31:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes32",
                                        "typeString": "bytes32"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6771:46:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6745:73:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2716,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2698,
                                      "src": "6820:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 2717,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "uintVars",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3693,
                                    "src": "6820:13:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                      "typeString": "mapping(bytes32 => uint256)"
                                    }
                                  },
                                  "id": 2721,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "74696d654f664c6173744e657756616c7565",
                                        "id": 2719,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6844:20:7",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                          "typeString": "literal_string \"timeOfLastNewValue\""
                                        },
                                        "value": "timeOfLastNewValue"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                          "typeString": "literal_string \"timeOfLastNewValue\""
                                        }
                                      ],
                                      "id": 2718,
                                      "name": "keccak256",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4284,
                                      "src": "6834:9:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                        "typeString": "function (bytes memory) pure returns (bytes32)"
                                      }
                                    },
                                    "id": 2720,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6834:31:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6820:46:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2705,
                                "name": "retrieveData",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3180,
                                "src": "6727:12:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                  "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256)"
                                }
                              },
                              "id": 2722,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6727:140:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "74727565",
                              "id": 2723,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6868:4:7",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "true"
                            }
                          ],
                          "id": 2724,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "6726:147:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_bool_$",
                            "typeString": "tuple(uint256,bool)"
                          }
                        },
                        "functionReturnParameters": 2704,
                        "id": 2725,
                        "nodeType": "Return",
                        "src": "6719:154:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the a value for the latest timestamp available\n@return value for timestamp of last proof of work submited\n@return true if the is a timestamp for the lastNewValue",
                  "id": 2727,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getLastNewValue",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2699,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2698,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2727,
                        "src": "6635:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2697,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "6635:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6634:42:7"
                  },
                  "returnParameters": {
                    "id": 2704,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2701,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2727,
                        "src": "6699:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2700,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6699:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2703,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2727,
                        "src": "6704:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2702,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6704:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6698:11:7"
                  },
                  "scope": 3196,
                  "src": "6610:270:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2774,
                    "nodeType": "Block",
                    "src": "7242:325:7",
                    "statements": [
                      {
                        "assignments": [
                          2741
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2741,
                            "name": "_request",
                            "nodeType": "VariableDeclaration",
                            "scope": 2774,
                            "src": "7252:35:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                              "typeString": "struct ZapStorage.Request"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 2740,
                              "name": "ZapStorage.Request",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3672,
                              "src": "7252:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                "typeString": "struct ZapStorage.Request"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2746,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2742,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2729,
                              "src": "7290:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2743,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3730,
                            "src": "7290:19:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                            }
                          },
                          "id": 2745,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2744,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2731,
                            "src": "7310:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7290:31:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$3672_storage",
                            "typeString": "struct ZapStorage.Request storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7252:69:7"
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2747,
                                "name": "_request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2741,
                                "src": "7335:8:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                  "typeString": "struct ZapStorage.Request storage pointer"
                                }
                              },
                              "id": 2748,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "requestTimestamps",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3643,
                              "src": "7335:26:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 2749,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7335:33:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 2750,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7371:1:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "7335:37:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 2772,
                          "nodeType": "Block",
                          "src": "7520:41:7",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 2768,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7542:1:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "66616c7365",
                                    "id": 2769,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7544:5:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "false"
                                  }
                                ],
                                "id": 2770,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "7541:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_bool_$",
                                  "typeString": "tuple(int_const 0,bool)"
                                }
                              },
                              "functionReturnParameters": 2737,
                              "id": 2771,
                              "nodeType": "Return",
                              "src": "7534:16:7"
                            }
                          ]
                        },
                        "id": 2773,
                        "nodeType": "IfStatement",
                        "src": "7332:229:7",
                        "trueBody": {
                          "id": 2767,
                          "nodeType": "Block",
                          "src": "7373:134:7",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "components": [
                                  {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2753,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2729,
                                        "src": "7408:4:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 2754,
                                        "name": "_requestId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2731,
                                        "src": "7413:10:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "id": 2755,
                                            "name": "_request",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2741,
                                            "src": "7424:8:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                              "typeString": "struct ZapStorage.Request storage pointer"
                                            }
                                          },
                                          "id": 2756,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "requestTimestamps",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 3643,
                                          "src": "7424:26:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                            "typeString": "uint256[] storage ref"
                                          }
                                        },
                                        "id": 2762,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2761,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2757,
                                                "name": "_request",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2741,
                                                "src": "7451:8:7",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                                  "typeString": "struct ZapStorage.Request storage pointer"
                                                }
                                              },
                                              "id": 2758,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "requestTimestamps",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 3643,
                                              "src": "7451:26:7",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                                "typeString": "uint256[] storage ref"
                                              }
                                            },
                                            "id": 2759,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "length",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": null,
                                            "src": "7451:33:7",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "hexValue": "31",
                                            "id": 2760,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "7487:1:7",
                                            "subdenomination": null,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_1_by_1",
                                              "typeString": "int_const 1"
                                            },
                                            "value": "1"
                                          },
                                          "src": "7451:37:7",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "7424:65:7",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 2752,
                                      "name": "retrieveData",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3180,
                                      "src": "7395:12:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
                                        "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,uint256,uint256) view returns (uint256)"
                                      }
                                    },
                                    "id": 2763,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7395:95:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "74727565",
                                    "id": 2764,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "bool",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7491:4:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "value": "true"
                                  }
                                ],
                                "id": 2765,
                                "isConstant": false,
                                "isInlineArray": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "TupleExpression",
                                "src": "7394:102:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_uint256_$_t_bool_$",
                                  "typeString": "tuple(uint256,bool)"
                                }
                              },
                              "functionReturnParameters": 2737,
                              "id": 2766,
                              "nodeType": "Return",
                              "src": "7387:109:7"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Gets the a value for the latest timestamp available\n@param _requestId being requested\n@return value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't",
                  "id": 2775,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getLastNewValueById",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2732,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2729,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2775,
                        "src": "7152:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2728,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "7152:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2731,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2775,
                        "src": "7193:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2730,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7193:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7151:58:7"
                  },
                  "returnParameters": {
                    "id": 2737,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2734,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2775,
                        "src": "7232:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2733,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7232:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2736,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2775,
                        "src": "7237:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 2735,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7237:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7231:11:7"
                  },
                  "scope": 3196,
                  "src": "7123:444:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2794,
                    "nodeType": "Block",
                    "src": "7931:81:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2786,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2777,
                                  "src": "7948:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2787,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "7948:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 2789,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2788,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2779,
                                "src": "7968:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7948:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 2790,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "minedBlockNum",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3651,
                            "src": "7948:45:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 2792,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2791,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2781,
                            "src": "7994:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7948:57:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2785,
                        "id": 2793,
                        "nodeType": "Return",
                        "src": "7941:64:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets blocknumber for mined timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up blocknumber\n@return uint of the blocknumber which the dispute was mined",
                  "id": 2795,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMinedBlockNum",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2782,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2777,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2795,
                        "src": "7829:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2776,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "7829:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2779,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2795,
                        "src": "7870:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2778,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7870:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2781,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 2795,
                        "src": "7887:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2780,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7887:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7828:75:7"
                  },
                  "returnParameters": {
                    "id": 2785,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2784,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2795,
                        "src": "7926:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2783,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "7926:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7925:6:7"
                  },
                  "scope": 3196,
                  "src": "7803:209:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2816,
                    "nodeType": "Block",
                    "src": "8417:81:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2808,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2797,
                                  "src": "8434:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2809,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "8434:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 2811,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2810,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2799,
                                "src": "8454:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8434:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 2812,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "minersByValue",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3665,
                            "src": "8434:45:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_address_$5_storage_$",
                              "typeString": "mapping(uint256 => address[5] storage ref)"
                            }
                          },
                          "id": 2814,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2813,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2801,
                            "src": "8480:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8434:57:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$5_storage",
                            "typeString": "address[5] storage ref"
                          }
                        },
                        "functionReturnParameters": 2807,
                        "id": 2815,
                        "nodeType": "Return",
                        "src": "8427:64:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up miners for\n@return the 5 miners' addresses",
                  "id": 2817,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getMinersByRequestIdAndTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2802,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2797,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2817,
                        "src": "8301:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2796,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "8301:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2799,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2817,
                        "src": "8343:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2798,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8343:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2801,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 2817,
                        "src": "8360:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2800,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "8360:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8300:76:7"
                  },
                  "returnParameters": {
                    "id": 2807,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2806,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2817,
                        "src": "8399:17:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$5_memory_ptr",
                          "typeString": "address[5]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2803,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8399:7:7",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 2805,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 2804,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8407:1:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "8399:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$5_storage_ptr",
                            "typeString": "address[5]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8398:19:7"
                  },
                  "scope": 3196,
                  "src": "8259:239:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2826,
                    "nodeType": "Block",
                    "src": "8691:35:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "5a617020546f6b656e",
                          "id": 2824,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8708:11:7",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_75a59da0bc7530b43da19ff4e9bf16454d96fe8f4e2f30f21a52464a0cba21d1",
                            "typeString": "literal_string \"Zap Token\""
                          },
                          "value": "Zap Token"
                        },
                        "functionReturnParameters": 2823,
                        "id": 2825,
                        "nodeType": "Return",
                        "src": "8701:18:7"
                      }
                    ]
                  },
                  "documentation": "@dev Get the name of the token\n@return string of the token name",
                  "id": 2827,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getName",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2820,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2819,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2827,
                        "src": "8613:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2818,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "8613:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8612:42:7"
                  },
                  "returnParameters": {
                    "id": 2823,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2822,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2827,
                        "src": "8677:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2821,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "8677:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "8676:15:7"
                  },
                  "scope": 3196,
                  "src": "8596:130:7",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2843,
                    "nodeType": "Block",
                    "src": "9212:80:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2836,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2829,
                                  "src": "9229:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2837,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "9229:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 2839,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2838,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2831,
                                "src": "9249:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9229:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 2840,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestTimestamps",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3643,
                            "src": "9229:49:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 2841,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "9229:56:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2835,
                        "id": 2842,
                        "nodeType": "Return",
                        "src": "9222:63:7"
                      }
                    ]
                  },
                  "documentation": "@dev Counts the number of values that have been submited for the request \nif called for the currentRequest being mined it can tell you how many miners have submitted a value for that\nrequest so far\n@param _requestId the requestId to look up\n@return uint count of the number of values received for the requestId",
                  "id": 2844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getNewValueCountbyRequestId",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2832,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2829,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "9126:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2828,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "9126:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2831,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "9168:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2830,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9168:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9125:59:7"
                  },
                  "returnParameters": {
                    "id": 2835,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2834,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2844,
                        "src": "9207:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2833,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9207:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9206:6:7"
                  },
                  "scope": 3196,
                  "src": "9089:203:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2864,
                    "nodeType": "Block",
                    "src": "9579:92:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2856,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2854,
                                "name": "_index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2848,
                                "src": "9597:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3530",
                                "id": 2855,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9607:2:7",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_50_by_1",
                                  "typeString": "int_const 50"
                                },
                                "value": "50"
                              },
                              "src": "9597:12:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 2853,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "9589:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 2857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9589:21:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 2858,
                        "nodeType": "ExpressionStatement",
                        "src": "9589:21:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2859,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2846,
                              "src": "9627:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2860,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestIdByRequestQIndex",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3707,
                            "src": "9627:29:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 2862,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2861,
                            "name": "_index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2848,
                            "src": "9657:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9627:37:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2852,
                        "id": 2863,
                        "nodeType": "Return",
                        "src": "9620:44:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for the specified requestQ index\n@param _index to look up in the requestQ array\n@return uint of reqeuestId",
                  "id": 2865,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByRequestQIndex",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2849,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2846,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2865,
                        "src": "9497:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2845,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "9497:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2848,
                        "name": "_index",
                        "nodeType": "VariableDeclaration",
                        "scope": 2865,
                        "src": "9539:11:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2847,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9539:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9496:55:7"
                  },
                  "returnParameters": {
                    "id": 2852,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2851,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2865,
                        "src": "9574:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2850,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9574:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9573:6:7"
                  },
                  "scope": 3196,
                  "src": "9460:211:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2879,
                    "nodeType": "Block",
                    "src": "9949:65:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2874,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2867,
                              "src": "9970:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2875,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestIdByTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3703,
                            "src": "9970:25:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 2877,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2876,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2869,
                            "src": "9996:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9970:37:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2873,
                        "id": 2878,
                        "nodeType": "Return",
                        "src": "9963:44:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for requestId based on timestamp \n@param _timestamp to check requestId\n@return uint of reqeuestId",
                  "id": 2880,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2870,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2867,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2880,
                        "src": "9863:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2866,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "9863:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2869,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 2880,
                        "src": "9905:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2868,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9905:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9862:59:7"
                  },
                  "returnParameters": {
                    "id": 2873,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2872,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2880,
                        "src": "9944:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2871,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "9944:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "9943:6:7"
                  },
                  "scope": 3196,
                  "src": "9830:184:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2894,
                    "nodeType": "Block",
                    "src": "10349:65:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2889,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2882,
                              "src": "10370:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2890,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestIdByQueryHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3734,
                            "src": "10370:25:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2892,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2891,
                            "name": "_queryHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2884,
                            "src": "10396:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10370:37:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2888,
                        "id": 2893,
                        "nodeType": "Return",
                        "src": "10363:44:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for requestId based on the qeuaryHash\n@param _queryHash hash(of string api and granularity) to check if a request already exists\n@return uint requestId",
                  "id": 2895,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestIdByQueryHash",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2885,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2882,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2895,
                        "src": "10260:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2881,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "10260:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2884,
                        "name": "_queryHash",
                        "nodeType": "VariableDeclaration",
                        "scope": 2895,
                        "src": "10302:18:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2883,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "10302:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10259:62:7"
                  },
                  "returnParameters": {
                    "id": 2888,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2887,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2895,
                        "src": "10344:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2886,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "10344:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10343:6:7"
                  },
                  "scope": 3196,
                  "src": "10227:187:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2907,
                    "nodeType": "Block",
                    "src": "10621:37:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 2904,
                            "name": "self",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2897,
                            "src": "10638:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                              "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                            }
                          },
                          "id": 2905,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "requestQ",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3678,
                          "src": "10638:13:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_storage",
                            "typeString": "uint256[51] storage ref"
                          }
                        },
                        "functionReturnParameters": 2903,
                        "id": 2906,
                        "nodeType": "Return",
                        "src": "10631:20:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for the requestQ array\n@return the requestQ arrray",
                  "id": 2908,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestQ",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2898,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2897,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2908,
                        "src": "10541:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2896,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "10541:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10540:42:7"
                  },
                  "returnParameters": {
                    "id": 2903,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2902,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2908,
                        "src": "10605:15:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$51_memory_ptr",
                          "typeString": "uint256[51]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 2899,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "10605:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2901,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "3531",
                            "id": 2900,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10610:2:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "51"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "10605:8:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                            "typeString": "uint256[51]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "10604:17:7"
                  },
                  "scope": 3196,
                  "src": "10520:138:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2927,
                    "nodeType": "Block",
                    "src": "11355:74:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2919,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2910,
                                  "src": "11372:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 2920,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "11372:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 2922,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2921,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2912,
                                "src": "11392:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11372:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 2923,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "apiUintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3647,
                            "src": "11372:43:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 2925,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2924,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2914,
                            "src": "11416:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11372:50:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 2918,
                        "id": 2926,
                        "nodeType": "Return",
                        "src": "11365:57:7"
                      }
                    ]
                  },
                  "documentation": "@dev Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\nfor the requestId specified\n@param _requestId to look up\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the apiUintVars under the requestDetails struct\n@return uint value of the apiUintVars specified in _data for the requestId specified",
                  "id": 2928,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestUintVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2915,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2910,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2928,
                        "src": "11256:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2909,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "11256:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2912,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2928,
                        "src": "11297:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2911,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11297:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2914,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 2928,
                        "src": "11313:13:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2913,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11313:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11255:72:7"
                  },
                  "returnParameters": {
                    "id": 2918,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2917,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2928,
                        "src": "11350:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2916,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11350:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11349:6:7"
                  },
                  "scope": 3196,
                  "src": "11228:201:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 2982,
                    "nodeType": "Block",
                    "src": "12002:309:7",
                    "statements": [
                      {
                        "assignments": [
                          2950
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2950,
                            "name": "_request",
                            "nodeType": "VariableDeclaration",
                            "scope": 2982,
                            "src": "12012:35:7",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                              "typeString": "struct ZapStorage.Request"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 2949,
                              "name": "ZapStorage.Request",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3672,
                              "src": "12012:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                "typeString": "struct ZapStorage.Request"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2955,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2951,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2930,
                              "src": "12050:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 2952,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3730,
                            "src": "12050:19:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                              "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                            }
                          },
                          "id": 2954,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2953,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2932,
                            "src": "12070:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "12050:31:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$3672_storage",
                            "typeString": "struct ZapStorage.Request storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "12012:69:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2956,
                                "name": "_request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2950,
                                "src": "12100:8:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                  "typeString": "struct ZapStorage.Request storage pointer"
                                }
                              },
                              "id": 2957,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "queryString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3636,
                              "src": "12100:20:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2958,
                                "name": "_request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2950,
                                "src": "12121:8:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                  "typeString": "struct ZapStorage.Request storage pointer"
                                }
                              },
                              "id": 2959,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "dataSymbol",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3638,
                              "src": "12121:19:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2960,
                                "name": "_request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2950,
                                "src": "12141:8:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                  "typeString": "struct ZapStorage.Request storage pointer"
                                }
                              },
                              "id": 2961,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "queryHash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3640,
                              "src": "12141:18:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2962,
                                  "name": "_request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2950,
                                  "src": "12161:8:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                    "typeString": "struct ZapStorage.Request storage pointer"
                                  }
                                },
                                "id": 2963,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "12161:20:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2967,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "6772616e756c6172697479",
                                    "id": 2965,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "12192:13:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_ba3571a50e0c436953d31396edfb65be5925bcc7fef5a3441ed5d43dbce2548f",
                                      "typeString": "literal_string \"granularity\""
                                    },
                                    "value": "granularity"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_ba3571a50e0c436953d31396edfb65be5925bcc7fef5a3441ed5d43dbce2548f",
                                      "typeString": "literal_string \"granularity\""
                                    }
                                  ],
                                  "id": 2964,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "12182:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2966,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12182:24:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12161:46:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2968,
                                  "name": "_request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2950,
                                  "src": "12208:8:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                    "typeString": "struct ZapStorage.Request storage pointer"
                                  }
                                },
                                "id": 2969,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "12208:20:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2973,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "7265717565737451506f736974696f6e",
                                    "id": 2971,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "12239:18:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_1e344bd070f05f1c5b3f0b1266f4f20d837a0a8190a3a2da8b0375eac2ba86ea",
                                      "typeString": "literal_string \"requestQPosition\""
                                    },
                                    "value": "requestQPosition"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_1e344bd070f05f1c5b3f0b1266f4f20d837a0a8190a3a2da8b0375eac2ba86ea",
                                      "typeString": "literal_string \"requestQPosition\""
                                    }
                                  ],
                                  "id": 2970,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "12229:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2972,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12229:29:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12208:51:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2974,
                                  "name": "_request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2950,
                                  "src": "12260:8:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                                    "typeString": "struct ZapStorage.Request storage pointer"
                                  }
                                },
                                "id": 2975,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "12260:20:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 2979,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "746f74616c546970",
                                    "id": 2977,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "12291:10:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    },
                                    "value": "totalTip"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    }
                                  ],
                                  "id": 2976,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "12281:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 2978,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "12281:21:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12260:43:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 2980,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "12099:205:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_string_storage_$_t_string_storage_$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(string storage ref,string storage ref,bytes32,uint256,uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 2946,
                        "id": 2981,
                        "nodeType": "Return",
                        "src": "12092:212:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the API struct variables that are not mappings\n@param _requestId to look up\n@return string of api to query\n@return string of symbol of api to query\n@return bytes32 hash of string\n@return bytes32 of the granularity(decimal places) requested\n@return uint of index in requestQ array\n@return uint of current payout/tip for this requestId",
                  "id": 2983,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getRequestVars",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2933,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2930,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11867:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2929,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "11867:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2932,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11908:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2931,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11908:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11866:58:7"
                  },
                  "returnParameters": {
                    "id": 2946,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2935,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11947:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2934,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11947:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2937,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11961:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 2936,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "11961:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2939,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11976:7:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 2938,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "11976:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2941,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11984:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2940,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11984:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2943,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11990:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2942,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11990:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2945,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 2983,
                        "src": "11996:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2944,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "11996:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "11946:55:7"
                  },
                  "scope": 3196,
                  "src": "11843:468:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3006,
                    "nodeType": "Block",
                    "src": "12665:105:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2994,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2985,
                                    "src": "12683:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 2995,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "stakerDetails",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3726,
                                  "src": "12683:18:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                    "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                  }
                                },
                                "id": 2997,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2996,
                                  "name": "_staker",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2987,
                                  "src": "12702:7:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12683:27:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                  "typeString": "struct ZapStorage.StakeInfo storage ref"
                                }
                              },
                              "id": 2998,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "currentStatus",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3626,
                              "src": "12683:41:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2999,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2985,
                                    "src": "12725:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 3000,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "stakerDetails",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3726,
                                  "src": "12725:18:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                    "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                  }
                                },
                                "id": 3002,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3001,
                                  "name": "_staker",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2987,
                                  "src": "12744:7:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "12725:27:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                  "typeString": "struct ZapStorage.StakeInfo storage ref"
                                }
                              },
                              "id": 3003,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "startDate",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3628,
                              "src": "12725:37:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 3004,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "12682:81:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 2993,
                        "id": 3005,
                        "nodeType": "Return",
                        "src": "12675:88:7"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows users to retireve all information about a staker\n@param _staker address of staker inquiring about\n@return uint current state of staker\n@return uint startDate of staking",
                  "id": 3007,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getStakerInfo",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 2988,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2985,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3007,
                        "src": "12575:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 2984,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "12575:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2987,
                        "name": "_staker",
                        "nodeType": "VariableDeclaration",
                        "scope": 3007,
                        "src": "12616:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2986,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "12616:7:7",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12574:58:7"
                  },
                  "returnParameters": {
                    "id": 2993,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 2990,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3007,
                        "src": "12655:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2989,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12655:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 2992,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3007,
                        "src": "12660:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 2991,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "12660:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "12654:11:7"
                  },
                  "scope": 3196,
                  "src": "12552:218:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3028,
                    "nodeType": "Block",
                    "src": "13208:85:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3020,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3009,
                                  "src": "13225:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3021,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "13225:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 3023,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3022,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3011,
                                "src": "13245:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13225:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 3024,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "valuesByTimestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3671,
                            "src": "13225:49:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint256_$5_storage_$",
                              "typeString": "mapping(uint256 => uint256[5] storage ref)"
                            }
                          },
                          "id": 3026,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3025,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3013,
                            "src": "13275:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "13225:61:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$5_storage",
                            "typeString": "uint256[5] storage ref"
                          }
                        },
                        "functionReturnParameters": 3019,
                        "id": 3027,
                        "nodeType": "Return",
                        "src": "13218:68:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestampt to look up miners for\n@return address[5] array of 5 addresses ofminers that mined the requestId",
                  "id": 3029,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getSubmissionsByTimestamp",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3014,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3009,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3029,
                        "src": "13095:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3008,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "13095:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3011,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 3029,
                        "src": "13137:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3010,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13137:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3013,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 3029,
                        "src": "13154:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3012,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13154:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13094:76:7"
                  },
                  "returnParameters": {
                    "id": 3019,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3018,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3029,
                        "src": "13193:14:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$5_memory_ptr",
                          "typeString": "uint256[5]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 3015,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "13193:4:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3017,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 3016,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13198:1:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "13193:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$5_storage_ptr",
                            "typeString": "uint256[5]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13192:16:7"
                  },
                  "scope": 3196,
                  "src": "13060:233:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3038,
                    "nodeType": "Block",
                    "src": "13491:28:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "5454",
                          "id": 3036,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "13508:4:7",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_2ac50a34f0da9360cfd7e529a34ccdaa61aa98e2a0ac0928bf981af8e73352ba",
                            "typeString": "literal_string \"TT\""
                          },
                          "value": "TT"
                        },
                        "functionReturnParameters": 3035,
                        "id": 3037,
                        "nodeType": "Return",
                        "src": "13501:11:7"
                      }
                    ]
                  },
                  "documentation": "@dev Get the symbol of the token\n@return string of the token symbol",
                  "id": 3039,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getSymbol",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3032,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3031,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3039,
                        "src": "13413:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3030,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "13413:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13412:42:7"
                  },
                  "returnParameters": {
                    "id": 3035,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3034,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3039,
                        "src": "13477:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3033,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "13477:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13476:15:7"
                  },
                  "scope": 3196,
                  "src": "13394:125:7",
                  "stateMutability": "pure",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3058,
                    "nodeType": "Block",
                    "src": "13877:81:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3050,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3041,
                                  "src": "13894:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3051,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "13894:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 3053,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3052,
                                "name": "_requestID",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3043,
                                "src": "13914:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "13894:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 3054,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "requestTimestamps",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3643,
                            "src": "13894:49:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 3056,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3055,
                            "name": "_index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3045,
                            "src": "13944:6:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "13894:57:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3049,
                        "id": 3057,
                        "nodeType": "Return",
                        "src": "13887:64:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the timestamp for the value based on their index\n@param _requestID is the requestId to look up\n@param _index is the value index to look up\n@return uint timestamp",
                  "id": 3059,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getTimestampbyRequestIDandIndex",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3046,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3041,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3059,
                        "src": "13779:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3040,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "13779:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3043,
                        "name": "_requestID",
                        "nodeType": "VariableDeclaration",
                        "scope": 3059,
                        "src": "13820:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3042,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13820:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3045,
                        "name": "_index",
                        "nodeType": "VariableDeclaration",
                        "scope": 3059,
                        "src": "13837:11:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3044,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13837:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13778:71:7"
                  },
                  "returnParameters": {
                    "id": 3049,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3048,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3059,
                        "src": "13872:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3047,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "13872:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "13871:6:7"
                  },
                  "scope": 3196,
                  "src": "13738:220:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3073,
                    "nodeType": "Block",
                    "src": "14630:44:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3068,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3061,
                              "src": "14647:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 3069,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "uintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3693,
                            "src": "14647:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 3071,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3070,
                            "name": "_data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3063,
                            "src": "14661:5:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "14647:20:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3067,
                        "id": 3072,
                        "nodeType": "Return",
                        "src": "14640:27:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter for the variables saved under the ZapStorageStruct uintVars variable\n@param _data the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \nthe variables/strings used to save the data in the mapping. The variables names are  \ncommented out under the uintVars under the ZapStorageStruct struct\nThis is an example of how data is saved into the mapping within other functions: \nself.uintVars[keccak256(\"stakerCount\")]\n@return uint of specified variable  ",
                  "id": 3074,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getUintVar",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3064,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3061,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3074,
                        "src": "14547:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3060,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "14547:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3063,
                        "name": "_data",
                        "nodeType": "VariableDeclaration",
                        "scope": 3074,
                        "src": "14588:13:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "typeName": {
                          "id": 3062,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "14588:7:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14546:56:7"
                  },
                  "returnParameters": {
                    "id": 3067,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3066,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3074,
                        "src": "14625:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3065,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "14625:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14624:6:7"
                  },
                  "scope": 3196,
                  "src": "14527:147:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3108,
                    "nodeType": "Block",
                    "src": "15029:205:7",
                    "statements": [
                      {
                        "assignments": [
                          3086
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3086,
                            "name": "newRequestId",
                            "nodeType": "VariableDeclaration",
                            "scope": 3108,
                            "src": "15040:17:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3085,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "15040:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3090,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3088,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3076,
                              "src": "15076:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            ],
                            "id": 3087,
                            "name": "getTopRequestID",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3140,
                            "src": "15060:15:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$_t_uint256_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer) view returns (uint256)"
                            }
                          },
                          "id": 3089,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15060:21:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15040:41:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "id": 3091,
                              "name": "newRequestId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3086,
                              "src": "15099:12:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 3092,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3076,
                                      "src": "15112:4:7",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 3093,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "requestDetails",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3730,
                                    "src": "15112:19:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                      "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                    }
                                  },
                                  "id": 3095,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 3094,
                                    "name": "newRequestId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3086,
                                    "src": "15132:12:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "15112:33:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Request_$3672_storage",
                                    "typeString": "struct ZapStorage.Request storage ref"
                                  }
                                },
                                "id": 3096,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "apiUintVars",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3647,
                                "src": "15112:45:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                  "typeString": "mapping(bytes32 => uint256)"
                                }
                              },
                              "id": 3100,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "746f74616c546970",
                                    "id": 3098,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "15168:10:7",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    },
                                    "value": "totalTip"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_2a9e355a92978430eca9c1aa3a9ba590094bac282594bccf82de16b83046e2c3",
                                      "typeString": "literal_string \"totalTip\""
                                    }
                                  ],
                                  "id": 3097,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4284,
                                  "src": "15158:9:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 3099,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "15158:21:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "15112:68:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3101,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3076,
                                    "src": "15181:4:7",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 3102,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "requestDetails",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3730,
                                  "src": "15181:19:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                    "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                  }
                                },
                                "id": 3104,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 3103,
                                  "name": "newRequestId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3086,
                                  "src": "15201:12:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "15181:33:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Request_$3672_storage",
                                  "typeString": "struct ZapStorage.Request storage ref"
                                }
                              },
                              "id": 3105,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "queryString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3636,
                              "src": "15181:45:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            }
                          ],
                          "id": 3106,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15098:129:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_string_storage_$",
                            "typeString": "tuple(uint256,uint256,string storage ref)"
                          }
                        },
                        "functionReturnParameters": 3084,
                        "id": 3107,
                        "nodeType": "Return",
                        "src": "15091:136:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for next requestId on queue/request with highest payout at time the function is called\n@return onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string",
                  "id": 3109,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getVariablesOnDeck",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3077,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3076,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3109,
                        "src": "14940:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3075,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "14940:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "14939:42:7"
                  },
                  "returnParameters": {
                    "id": 3084,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3079,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3109,
                        "src": "15004:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3078,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "15004:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3081,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3109,
                        "src": "15010:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3080,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "15010:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3083,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3109,
                        "src": "15015:13:7",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 3082,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "15015:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "15003:26:7"
                  },
                  "scope": 3196,
                  "src": "14912:322:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3139,
                    "nodeType": "Block",
                    "src": "15583:181:7",
                    "statements": [
                      {
                        "assignments": [
                          3117
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3117,
                            "name": "_max",
                            "nodeType": "VariableDeclaration",
                            "scope": 3139,
                            "src": "15597:9:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3116,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "15597:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3118,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15597:9:7"
                      },
                      {
                        "assignments": [
                          3120
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3120,
                            "name": "_index",
                            "nodeType": "VariableDeclaration",
                            "scope": 3139,
                            "src": "15620:11:7",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3119,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "15620:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3121,
                        "initialValue": null,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "15620:11:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "id": 3122,
                                "name": "_max",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3117,
                                "src": "15646:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 3123,
                                "name": "_index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3120,
                                "src": "15651:6:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 3124,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "TupleExpression",
                            "src": "15645:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3127,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3111,
                                  "src": "15678:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3128,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestQ",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3678,
                                "src": "15678:13:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$51_storage",
                                  "typeString": "uint256[51] storage ref"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_array$_t_uint256_$51_storage",
                                  "typeString": "uint256[51] storage ref"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 3125,
                                "name": "Utilities",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "15661:9:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Utilities_$1403_$",
                                  "typeString": "type(library Utilities)"
                                }
                              },
                              "id": 3126,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getMax",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1402,
                              "src": "15661:16:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_array$_t_uint256_$51_memory_ptr_$returns$_t_uint256_$_t_uint256_$",
                                "typeString": "function (uint256[51] memory) pure returns (uint256,uint256)"
                              }
                            },
                            "id": 3129,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15661:31:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                              "typeString": "tuple(uint256,uint256)"
                            }
                          },
                          "src": "15645:47:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3131,
                        "nodeType": "ExpressionStatement",
                        "src": "15645:47:7"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3137,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 3132,
                            "name": "_requestId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3114,
                            "src": "15707:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3133,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3111,
                                "src": "15720:4:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3134,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "requestIdByRequestQIndex",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3707,
                              "src": "15720:29:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                                "typeString": "mapping(uint256 => uint256)"
                              }
                            },
                            "id": 3136,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3135,
                              "name": "_index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3120,
                              "src": "15750:6:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15720:37:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15707:50:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3138,
                        "nodeType": "ExpressionStatement",
                        "src": "15707:50:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter function for the request with highest payout. This function is used withing the getVariablesOnDeck function\n@return uint _requestId of request with highest payout at the time the function is called",
                  "id": 3140,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getTopRequestID",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3112,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3111,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3140,
                        "src": "15503:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3110,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "15503:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "15502:42:7"
                  },
                  "returnParameters": {
                    "id": 3115,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3114,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 3140,
                        "src": "15567:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3113,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "15567:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "15566:17:7"
                  },
                  "scope": 3196,
                  "src": "15478:286:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3159,
                    "nodeType": "Block",
                    "src": "16161:77:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3151,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3142,
                                  "src": "16178:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3152,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "16178:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 3154,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3153,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3144,
                                "src": "16198:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "16178:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 3155,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "inDispute",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3659,
                            "src": "16178:41:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 3157,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3156,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3146,
                            "src": "16220:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "16178:53:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "functionReturnParameters": 3150,
                        "id": 3158,
                        "nodeType": "Return",
                        "src": "16171:60:7"
                      }
                    ]
                  },
                  "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \n@param _requestId to look up\n@param _timestamp is the timestamp to look up miners for\n@return bool true if requestId/timestamp is under dispute",
                  "id": 3160,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isInDispute",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3147,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3142,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3160,
                        "src": "16058:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3141,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "16058:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3144,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 3160,
                        "src": "16100:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3143,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16100:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3146,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 3160,
                        "src": "16117:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3145,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16117:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16057:76:7"
                  },
                  "returnParameters": {
                    "id": 3150,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3149,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3160,
                        "src": "16156:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3148,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "16156:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16155:6:7"
                  },
                  "scope": 3196,
                  "src": "16037:201:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3179,
                    "nodeType": "Block",
                    "src": "16605:79:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3171,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3162,
                                  "src": "16622:4:7",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3172,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "requestDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3730,
                                "src": "16622:19:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                                  "typeString": "mapping(uint256 => struct ZapStorage.Request storage ref)"
                                }
                              },
                              "id": 3174,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3173,
                                "name": "_requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3164,
                                "src": "16642:10:7",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "16622:31:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Request_$3672_storage",
                                "typeString": "struct ZapStorage.Request storage ref"
                              }
                            },
                            "id": 3175,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "finalValues",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3655,
                            "src": "16622:43:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                              "typeString": "mapping(uint256 => uint256)"
                            }
                          },
                          "id": 3177,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3176,
                            "name": "_timestamp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3166,
                            "src": "16666:10:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "16622:55:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3170,
                        "id": 3178,
                        "nodeType": "Return",
                        "src": "16615:62:7"
                      }
                    ]
                  },
                  "documentation": "@dev Retreive value from oracle based on requestId/timestamp\n@param _requestId being requested\n@param _timestamp to retreive data/value from\n@return uint value for requestId/timestamp submitted",
                  "id": 3180,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "retrieveData",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3167,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3162,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3180,
                        "src": "16500:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3161,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "16500:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3164,
                        "name": "_requestId",
                        "nodeType": "VariableDeclaration",
                        "scope": 3180,
                        "src": "16542:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3163,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16542:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3166,
                        "name": "_timestamp",
                        "nodeType": "VariableDeclaration",
                        "scope": 3180,
                        "src": "16559:15:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3165,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16559:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16499:76:7"
                  },
                  "returnParameters": {
                    "id": 3170,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3169,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3180,
                        "src": "16599:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3168,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16599:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16598:6:7"
                  },
                  "scope": 3196,
                  "src": "16478:206:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 3194,
                    "nodeType": "Block",
                    "src": "16886:63:7",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3187,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3182,
                              "src": "16902:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 3188,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "uintVars",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3693,
                            "src": "16902:13:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                              "typeString": "mapping(bytes32 => uint256)"
                            }
                          },
                          "id": 3192,
                          "indexExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "746f74616c5f737570706c79",
                                "id": 3190,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16926:14:7",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                  "typeString": "literal_string \"total_supply\""
                                },
                                "value": "total_supply"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                  "typeString": "literal_string \"total_supply\""
                                }
                              ],
                              "id": 3189,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4284,
                              "src": "16916:9:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory) pure returns (bytes32)"
                              }
                            },
                            "id": 3191,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16916:25:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "16902:40:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3186,
                        "id": 3193,
                        "nodeType": "Return",
                        "src": "16895:47:7"
                      }
                    ]
                  },
                  "documentation": "@dev Getter for the total_supply of oracle tokens\n@return uint total supply",
                  "id": 3195,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "totalSupply",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3183,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3182,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3195,
                        "src": "16815:40:7",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3181,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "16815:27:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16814:42:7"
                  },
                  "returnParameters": {
                    "id": 3186,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3185,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3195,
                        "src": "16880:4:7",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3184,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "16880:4:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "16879:6:7"
                  },
                  "scope": 3196,
                  "src": "16794:155:7",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3197,
              "src": "277:16675:7"
            }
          ],
          "src": "0:16953:7"
        },
        "id": 7
      },
      "contracts/libraries/ZapStake.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/ZapStake.sol",
          "exportedSymbols": {
            "ZapStake": [
              3592
            ]
          },
          "id": 3593,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3198,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:8"
            },
            {
              "absolutePath": "contracts/libraries/ZapStorage.sol",
              "file": "./ZapStorage.sol",
              "id": 3199,
              "nodeType": "ImportDirective",
              "scope": 3593,
              "sourceUnit": 3741,
              "src": "25:26:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapTransfer.sol",
              "file": "./ZapTransfer.sol",
              "id": 3200,
              "nodeType": "ImportDirective",
              "scope": 3593,
              "sourceUnit": 4276,
              "src": "52:27:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapDispute.sol",
              "file": "./ZapDispute.sol",
              "id": 3201,
              "nodeType": "ImportDirective",
              "scope": 3593,
              "sourceUnit": 2350,
              "src": "80:26:8",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title Zap Dispute\n@dev Contais the methods related to miners staking and unstaking. Zap.sol \nreferences this library for function's logic.",
              "fullyImplemented": true,
              "id": 3592,
              "linearizedBaseContracts": [
                3592
              ],
              "name": "ZapStake",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3205,
                  "name": "NewStake",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3204,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3203,
                        "indexed": true,
                        "name": "_sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3205,
                        "src": "300:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3202,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "300:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "299:25:8"
                  },
                  "src": "285:40:8"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3209,
                  "name": "StakeWithdrawn",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3208,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3207,
                        "indexed": true,
                        "name": "_sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3209,
                        "src": "374:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3206,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "374:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "373:25:8"
                  },
                  "src": "353:46:8"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3213,
                  "name": "StakeWithdrawRequested",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3212,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3211,
                        "indexed": true,
                        "name": "_sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3213,
                        "src": "478:23:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3210,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "478:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "477:25:8"
                  },
                  "src": "449:54:8"
                },
                {
                  "body": {
                    "id": 3391,
                    "nodeType": "Block",
                    "src": "843:1729:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3226,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3219,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3215,
                                    "src": "861:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 3220,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "uintVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3693,
                                  "src": "861:13:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 3224,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "646563696d616c73",
                                      "id": 3222,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "885:10:8",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_784c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9",
                                        "typeString": "literal_string \"decimals\""
                                      },
                                      "value": "decimals"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_784c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9",
                                        "typeString": "literal_string \"decimals\""
                                      }
                                    ],
                                    "id": 3221,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "875:9:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 3223,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "875:21:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "861:36:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 3225,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "901:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "861:41:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3218,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "853:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3227,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "853:50:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3228,
                        "nodeType": "ExpressionStatement",
                        "src": "853:50:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3232,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3215,
                                  "src": "1030:4:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3233,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balances",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3716,
                                "src": "1030:13:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                  "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                }
                              },
                              "id": 3237,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 3235,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4315,
                                    "src": "1052:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ZapStake_$3592",
                                      "typeString": "library ZapStake"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_ZapStake_$3592",
                                      "typeString": "library ZapStake"
                                    }
                                  ],
                                  "id": 3234,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1044:7:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 3236,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1044:13:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1030:28:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564033457584007913129639935_by_1",
                                "typeString": "int_const 1157...(70 digits omitted)...9935"
                              },
                              "id": 3244,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
                                  "typeString": "int_const 1157...(70 digits omitted)...9935"
                                },
                                "id": 3242,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639936_by_1",
                                    "typeString": "int_const 1157...(70 digits omitted)...9936"
                                  },
                                  "id": 3240,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "32",
                                    "id": 3238,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1060:1:8",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "323536",
                                    "id": 3239,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1063:3:8",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_256_by_1",
                                      "typeString": "int_const 256"
                                    },
                                    "value": "256"
                                  },
                                  "src": "1060:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639936_by_1",
                                    "typeString": "int_const 1157...(70 digits omitted)...9936"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 3241,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1067:1:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "1060:8:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1",
                                  "typeString": "int_const 1157...(70 digits omitted)...9935"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "36303030653138",
                                "id": 3243,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1071:7:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6000000000000000000000_by_1",
                                  "typeString": "int_const 6000000000000000000000"
                                },
                                "value": "6000e18"
                              },
                              "src": "1060:18:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564033457584007913129639935_by_1",
                                "typeString": "int_const 1157...(70 digits omitted)...9935"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_rational_115792089237316195423570985008687907853269984665640564033457584007913129639935_by_1",
                                "typeString": "int_const 1157...(70 digits omitted)...9935"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 3229,
                              "name": "ZapTransfer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4275,
                              "src": "999:11:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                "typeString": "type(library ZapTransfer)"
                              }
                            },
                            "id": 3231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "updateBalanceAtNow",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 4274,
                            "src": "999:30:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.Checkpoint storage ref[] storage pointer,uint256)"
                            }
                          },
                          "id": 3245,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "999:80:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3246,
                        "nodeType": "ExpressionStatement",
                        "src": "999:80:8"
                      },
                      {
                        "assignments": [
                          3250
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3250,
                            "name": "_initalMiners",
                            "nodeType": "VariableDeclaration",
                            "scope": 3391,
                            "src": "1189:39:8",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$6_memory_ptr",
                              "typeString": "address payable[6]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 3247,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1189:15:8",
                                "stateMutability": "payable",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 3249,
                              "length": {
                                "argumentTypes": null,
                                "hexValue": "36",
                                "id": 3248,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1205:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                },
                                "value": "6"
                              },
                              "nodeType": "ArrayTypeName",
                              "src": "1189:18:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$6_storage_ptr",
                                "typeString": "address payable[6]"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3270,
                        "initialValue": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307864463365313864363442433641393833663637334162333139434361453466316135374337303937",
                                  "id": 3252,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1253:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3251,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1245:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3253,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1245:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307863643342373636434344643641453732313134314634353243353530436136333539363463653731",
                                  "id": 3255,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1318:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0xcd3B766CCDd6AE721141F452C550Ca635964ce71"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1310:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3256,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1310:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307832353436426344336338343632316539373644383138356139314139323261453737454345633330",
                                  "id": 3258,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1383:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0x2546BcD3c84621e976D8185a91A922aE77ECEc30"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3257,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1375:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3259,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1375:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307862444135373437624644363546303864656235346362343635654238374434306535314231393745",
                                  "id": 3261,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1448:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0xbDA5747bFD65F08deb54cb465eB87D40e51B197E"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3260,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1440:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3262,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1440:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307864443246443435383132373165323330333630323330463933333744356330343330426634344330",
                                  "id": 3264,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1513:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0xdD2FD4581271e230360230F9337D5c0430Bf44C0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3263,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1505:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3265,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1505:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307838363236663639343045326562323839333065466234436546343942326431463243394331313939",
                                  "id": 3267,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1578:42:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  "value": "0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 3266,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1570:7:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 3268,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1570:51:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "id": 3269,
                          "isConstant": false,
                          "isInlineArray": true,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "1231:400:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$6_memory_ptr",
                            "typeString": "address payable[6] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1189:442:8"
                      },
                      {
                        "body": {
                          "id": 3300,
                          "nodeType": "Block",
                          "src": "1715:260:8",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 3284,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3215,
                                        "src": "1877:4:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 3285,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "balances",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3716,
                                      "src": "1877:13:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                        "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                      }
                                    },
                                    "id": 3289,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 3286,
                                        "name": "_initalMiners",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3250,
                                        "src": "1891:13:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_address_payable_$6_memory_ptr",
                                          "typeString": "address payable[6] memory"
                                        }
                                      },
                                      "id": 3288,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 3287,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3272,
                                        "src": "1905:1:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "1891:16:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1877:31:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "31303030653138",
                                    "id": 3290,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1909:7:8",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1000000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000000"
                                    },
                                    "value": "1000e18"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                    },
                                    {
                                      "typeIdentifier": "t_rational_1000000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000000"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3281,
                                    "name": "ZapTransfer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4275,
                                    "src": "1846:11:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                      "typeString": "type(library ZapTransfer)"
                                    }
                                  },
                                  "id": 3283,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "updateBalanceAtNow",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4274,
                                  "src": "1846:30:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_delegatecall_nonpayable$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
                                    "typeString": "function (struct ZapStorage.Checkpoint storage ref[] storage pointer,uint256)"
                                  }
                                },
                                "id": 3291,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1846:71:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3292,
                              "nodeType": "ExpressionStatement",
                              "src": "1846:71:8"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 3294,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3215,
                                    "src": "1941:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 3295,
                                      "name": "_initalMiners",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3250,
                                      "src": "1947:13:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_payable_$6_memory_ptr",
                                        "typeString": "address payable[6] memory"
                                      }
                                    },
                                    "id": 3297,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 3296,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3272,
                                      "src": "1961:1:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1947:16:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    },
                                    {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    }
                                  ],
                                  "id": 3293,
                                  "name": "newStake",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3591,
                                  "src": "1932:8:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$__$",
                                    "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address)"
                                  }
                                },
                                "id": 3298,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1932:32:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 3299,
                              "nodeType": "ExpressionStatement",
                              "src": "1932:32:8"
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 3277,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 3275,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3272,
                            "src": "1707:1:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "36",
                            "id": 3276,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1709:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_6_by_1",
                              "typeString": "int_const 6"
                            },
                            "value": "6"
                          },
                          "src": "1707:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 3301,
                        "initializationExpression": {
                          "assignments": [
                            3272
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 3272,
                              "name": "i",
                              "nodeType": "VariableDeclaration",
                              "scope": 3301,
                              "src": "1698:6:8",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 3271,
                                "name": "uint",
                                "nodeType": "ElementaryTypeName",
                                "src": "1698:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "value": null,
                              "visibility": "internal"
                            }
                          ],
                          "id": 3274,
                          "initialValue": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 3273,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1705:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "1698:8:8"
                        },
                        "loopExpression": {
                          "expression": {
                            "argumentTypes": null,
                            "id": 3279,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "1711:3:8",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 3278,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3272,
                              "src": "1711:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3280,
                          "nodeType": "ExpressionStatement",
                          "src": "1711:3:8"
                        },
                        "nodeType": "ForStatement",
                        "src": "1694:281:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3302,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2020:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3307,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2020:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3308,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "746f74616c5f737570706c79",
                                  "id": 3305,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2044:14:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                    "typeString": "literal_string \"total_supply\""
                                  },
                                  "value": "total_supply"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_b1557182e4359a1f0c6301278e8f5b35a776ab58d39892581e357578fb287836",
                                    "typeString": "literal_string \"total_supply\""
                                  }
                                ],
                                "id": 3304,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2034:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3306,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2034:25:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2020:40:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "36303030653138",
                            "id": 3309,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2064:7:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_6000000000000000000000_by_1",
                              "typeString": "int_const 6000000000000000000000"
                            },
                            "value": "6000e18"
                          },
                          "src": "2020:51:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3311,
                        "nodeType": "ExpressionStatement",
                        "src": "2020:51:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3320,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3312,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2137:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3317,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2137:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3318,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "646563696d616c73",
                                  "id": 3315,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2161:10:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_784c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9",
                                    "typeString": "literal_string \"decimals\""
                                  },
                                  "value": "decimals"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_784c4fb1ab068f6039d5780c68dd0fa2f8742cceb3426d19667778ca7f3518a9",
                                    "typeString": "literal_string \"decimals\""
                                  }
                                ],
                                "id": 3314,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2151:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3316,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2151:21:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2137:36:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "3138",
                            "id": 3319,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2176:2:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_18_by_1",
                              "typeString": "int_const 18"
                            },
                            "value": "18"
                          },
                          "src": "2137:41:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3321,
                        "nodeType": "ExpressionStatement",
                        "src": "2137:41:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3322,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2188:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3327,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2188:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3328,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7461726765744d696e657273",
                                  "id": 3325,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2212:14:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                    "typeString": "literal_string \"targetMiners\""
                                  },
                                  "value": "targetMiners"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_abef544d8048318ece54fb2c6385255cd1b06e176525d149a0338a7acca6deb3",
                                    "typeString": "literal_string \"targetMiners\""
                                  }
                                ],
                                "id": 3324,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2202:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2202:25:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2188:40:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "323030",
                            "id": 3329,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2231:3:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_200_by_1",
                              "typeString": "int_const 200"
                            },
                            "value": "200"
                          },
                          "src": "2188:46:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3331,
                        "nodeType": "ExpressionStatement",
                        "src": "2188:46:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3332,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2244:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3337,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2244:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3338,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7374616b65416d6f756e74",
                                  "id": 3335,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2268:13:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                    "typeString": "literal_string \"stakeAmount\""
                                  },
                                  "value": "stakeAmount"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                    "typeString": "literal_string \"stakeAmount\""
                                  }
                                ],
                                "id": 3334,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2258:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3336,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2258:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2244:39:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "31303030653138",
                            "id": 3339,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2286:7:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000000"
                            },
                            "value": "1000e18"
                          },
                          "src": "2244:49:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3341,
                        "nodeType": "ExpressionStatement",
                        "src": "2244:49:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3342,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2303:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3347,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2303:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3348,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "64697370757465466565",
                                  "id": 3345,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2327:12:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  },
                                  "value": "disputeFee"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_8b75eb45d88e80f0e4ec77d23936268694c0e7ac2e0c9085c5c6bdfcfbc49239",
                                    "typeString": "literal_string \"disputeFee\""
                                  }
                                ],
                                "id": 3344,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2317:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3346,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2317:23:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2303:38:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "393730653138",
                            "id": 3349,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2344:6:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_970000000000000000000_by_1",
                              "typeString": "int_const 970000000000000000000"
                            },
                            "value": "970e18"
                          },
                          "src": "2303:47:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3351,
                        "nodeType": "ExpressionStatement",
                        "src": "2303:47:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3360,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3352,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2360:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3357,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2360:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3358,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "74696d65546172676574",
                                  "id": 3355,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2384:12:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_ad16221efc80aaf1b7e69bd3ecb61ba5ffa539adf129c3b4ffff769c9b5bbc33",
                                    "typeString": "literal_string \"timeTarget\""
                                  },
                                  "value": "timeTarget"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_ad16221efc80aaf1b7e69bd3ecb61ba5ffa539adf129c3b4ffff769c9b5bbc33",
                                    "typeString": "literal_string \"timeTarget\""
                                  }
                                ],
                                "id": 3354,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2374:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3356,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2374:23:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2360:38:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "363030",
                            "id": 3359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2400:3:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_600_by_1",
                              "typeString": "int_const 600"
                            },
                            "value": "600"
                          },
                          "src": "2360:43:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3361,
                        "nodeType": "ExpressionStatement",
                        "src": "2360:43:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3362,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2413:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3367,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2413:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3368,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "74696d654f664c6173744e657756616c7565",
                                  "id": 3365,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2437:20:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                    "typeString": "literal_string \"timeOfLastNewValue\""
                                  },
                                  "value": "timeOfLastNewValue"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_97e6eb29f6a85471f7cc9b57f9e4c3deaf398cfc9798673160d7798baf0b13a4",
                                    "typeString": "literal_string \"timeOfLastNewValue\""
                                  }
                                ],
                                "id": 3364,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2427:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3366,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2427:31:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2413:46:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 3378,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 3369,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4292,
                              "src": "2462:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3377,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3370,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4292,
                                "src": "2468:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3371,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3215,
                                    "src": "2475:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 3372,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "uintVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3693,
                                  "src": "2475:13:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 3376,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "74696d65546172676574",
                                      "id": 3374,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2499:12:8",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_ad16221efc80aaf1b7e69bd3ecb61ba5ffa539adf129c3b4ffff769c9b5bbc33",
                                        "typeString": "literal_string \"timeTarget\""
                                      },
                                      "value": "timeTarget"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_ad16221efc80aaf1b7e69bd3ecb61ba5ffa539adf129c3b4ffff769c9b5bbc33",
                                        "typeString": "literal_string \"timeTarget\""
                                      }
                                    ],
                                    "id": 3373,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "2489:9:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 3375,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2489:23:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2475:38:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2468:45:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2462:51:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2413:100:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3380,
                        "nodeType": "ExpressionStatement",
                        "src": "2413:100:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3389,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3381,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3215,
                                "src": "2523:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3386,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "2523:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3387,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "646966666963756c7479",
                                  "id": 3384,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2547:12:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_b12aff7664b16cb99339be399b863feecd64d14817be7e1f042f97e3f358e64e",
                                    "typeString": "literal_string \"difficulty\""
                                  },
                                  "value": "difficulty"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_b12aff7664b16cb99339be399b863feecd64d14817be7e1f042f97e3f358e64e",
                                    "typeString": "literal_string \"difficulty\""
                                  }
                                ],
                                "id": 3383,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "2537:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3385,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2537:23:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2523:38:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 3388,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2564:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "2523:42:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3390,
                        "nodeType": "ExpressionStatement",
                        "src": "2523:42:8"
                      }
                    ]
                  },
                  "documentation": "@dev This function stakes the five initial miners, sets the supply and all the constant variables.\nThis function is called by the constructor function on ZapMaster.sol",
                  "id": 3392,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "init",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3216,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3215,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3392,
                        "src": "795:40:8",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3214,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "795:27:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "794:42:8"
                  },
                  "returnParameters": {
                    "id": 3217,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "843:0:8"
                  },
                  "scope": 3592,
                  "src": "781:1791:8",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3452,
                    "nodeType": "Block",
                    "src": "2898:667:8",
                    "statements": [
                      {
                        "assignments": [
                          3400
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3400,
                            "name": "stakes",
                            "nodeType": "VariableDeclaration",
                            "scope": 3452,
                            "src": "2908:35:8",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                              "typeString": "struct ZapStorage.StakeInfo"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 3399,
                              "name": "ZapStorage.StakeInfo",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3629,
                              "src": "2908:20:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                "typeString": "struct ZapStorage.StakeInfo"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3406,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3401,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3394,
                              "src": "2946:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 3402,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "stakerDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3726,
                            "src": "2946:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                              "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                            }
                          },
                          "id": 3405,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3403,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "2965:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "2965:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2946:30:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                            "typeString": "struct ZapStorage.StakeInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2908:68:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3411,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3408,
                                  "name": "stakes",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3400,
                                  "src": "3037:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                    "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                  }
                                },
                                "id": 3409,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "currentStatus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3626,
                                "src": "3037:20:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 3410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3061:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "3037:25:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3407,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "3029:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3412,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3029:34:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3413,
                        "nodeType": "ExpressionStatement",
                        "src": "3029:34:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3418,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3414,
                              "name": "stakes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3400,
                              "src": "3138:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                "typeString": "struct ZapStorage.StakeInfo storage pointer"
                              }
                            },
                            "id": 3416,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "currentStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3626,
                            "src": "3138:20:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "32",
                            "id": 3417,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3161:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_2_by_1",
                              "typeString": "int_const 2"
                            },
                            "value": "2"
                          },
                          "src": "3138:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3419,
                        "nodeType": "ExpressionStatement",
                        "src": "3138:24:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3429,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3420,
                              "name": "stakes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3400,
                              "src": "3340:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                "typeString": "struct ZapStorage.StakeInfo storage pointer"
                              }
                            },
                            "id": 3422,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "startDate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3628,
                            "src": "3340:16:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 3428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 3423,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4292,
                              "src": "3359:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3426,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 3424,
                                    "name": "now",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4292,
                                    "src": "3365:3:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "%",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3836343030",
                                    "id": 3425,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3371:5:8",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_86400_by_1",
                                      "typeString": "int_const 86400"
                                    },
                                    "value": "86400"
                                  },
                                  "src": "3365:11:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 3427,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3364:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3359:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3340:37:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3430,
                        "nodeType": "ExpressionStatement",
                        "src": "3340:37:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3439,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3431,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3394,
                                "src": "3422:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3436,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "3422:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3437,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7374616b6572436f756e74",
                                  "id": 3434,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3446:13:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                    "typeString": "literal_string \"stakerCount\""
                                  },
                                  "value": "stakerCount"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                    "typeString": "literal_string \"stakerCount\""
                                  }
                                ],
                                "id": 3433,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "3436:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3435,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3436:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3422:39:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 3438,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3465:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "3422:44:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3440,
                        "nodeType": "ExpressionStatement",
                        "src": "3422:44:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3444,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3394,
                              "src": "3504:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 3441,
                              "name": "ZapDispute",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2349,
                              "src": "3476:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapDispute_$2349_$",
                                "typeString": "type(library ZapDispute)"
                              }
                            },
                            "id": 3443,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "updateDisputeFee",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2348,
                            "src": "3476:27:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer)"
                            }
                          },
                          "id": 3445,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3476:33:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3446,
                        "nodeType": "ExpressionStatement",
                        "src": "3476:33:8"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3448,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "3547:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3449,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3547:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 3447,
                            "name": "StakeWithdrawRequested",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3213,
                            "src": "3524:22:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 3450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3524:34:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3451,
                        "nodeType": "EmitStatement",
                        "src": "3519:39:8"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows stakers to request to withdraw their stake (no longer stake)\nonce they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they\ncan withdraw the deposit",
                  "id": 3453,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "requestStakingWithdraw",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3395,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3394,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3453,
                        "src": "2849:40:8",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3393,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "2849:27:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2848:42:8"
                  },
                  "returnParameters": {
                    "id": 3396,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2898:0:8"
                  },
                  "scope": 3592,
                  "src": "2817:748:8",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3500,
                    "nodeType": "Block",
                    "src": "3764:416:8",
                    "statements": [
                      {
                        "assignments": [
                          3461
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3461,
                            "name": "stakes",
                            "nodeType": "VariableDeclaration",
                            "scope": 3500,
                            "src": "3774:35:8",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                              "typeString": "struct ZapStorage.StakeInfo"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 3460,
                              "name": "ZapStorage.StakeInfo",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 3629,
                              "src": "3774:20:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                "typeString": "struct ZapStorage.StakeInfo"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3467,
                        "initialValue": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3462,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3455,
                              "src": "3812:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            "id": 3463,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "stakerDetails",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3726,
                            "src": "3812:18:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                              "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                            }
                          },
                          "id": 3466,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3464,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4290,
                              "src": "3831:3:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 3465,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3831:10:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3812:30:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                            "typeString": "struct ZapStorage.StakeInfo storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3774:68:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3479,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3477,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 3474,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 3469,
                                    "name": "now",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4292,
                                    "src": "4005:3:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 3472,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 3470,
                                          "name": "now",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4292,
                                          "src": "4012:3:8",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "%",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "3836343030",
                                          "id": 3471,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "4018:5:8",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_86400_by_1",
                                            "typeString": "int_const 86400"
                                          },
                                          "value": "86400"
                                        },
                                        "src": "4012:11:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "id": 3473,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "4011:13:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4005:19:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3475,
                                    "name": "stakes",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3461,
                                    "src": "4027:6:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                      "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                    }
                                  },
                                  "id": 3476,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "startDate",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3628,
                                  "src": "4027:16:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4005:38:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "37",
                                "id": 3478,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4047:6:8",
                                "subdenomination": "days",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_604800_by_1",
                                  "typeString": "int_const 604800"
                                },
                                "value": "7"
                              },
                              "src": "4005:48:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3468,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "3997:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3480,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3997:57:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3481,
                        "nodeType": "ExpressionStatement",
                        "src": "3997:57:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3483,
                                  "name": "stakes",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3461,
                                  "src": "4072:6:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                    "typeString": "struct ZapStorage.StakeInfo storage pointer"
                                  }
                                },
                                "id": 3484,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "currentStatus",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3626,
                                "src": "4072:20:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "32",
                                "id": 3485,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4096:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2_by_1",
                                  "typeString": "int_const 2"
                                },
                                "value": "2"
                              },
                              "src": "4072:25:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3482,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "4064:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4064:34:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3488,
                        "nodeType": "ExpressionStatement",
                        "src": "4064:34:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3493,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 3489,
                              "name": "stakes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3461,
                              "src": "4108:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                                "typeString": "struct ZapStorage.StakeInfo storage pointer"
                              }
                            },
                            "id": 3491,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberName": "currentStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3626,
                            "src": "4108:20:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 3492,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4131:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4108:24:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3494,
                        "nodeType": "ExpressionStatement",
                        "src": "4108:24:8"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3496,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "4162:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3497,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "4162:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 3495,
                            "name": "StakeWithdrawn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3209,
                            "src": "4147:14:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 3498,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4147:26:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3499,
                        "nodeType": "EmitStatement",
                        "src": "4142:31:8"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows users to withdraw their stake after a 7 day waiting period from request ",
                  "id": 3501,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "withdrawStake",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3456,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3455,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3501,
                        "src": "3715:40:8",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3454,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "3715:27:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3714:42:8"
                  },
                  "returnParameters": {
                    "id": 3457,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3764:0:8"
                  },
                  "scope": 3592,
                  "src": "3692:488:8",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3518,
                    "nodeType": "Block",
                    "src": "4336:116:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3507,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3503,
                              "src": "4353:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3508,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "4359:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3509,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "4359:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 3506,
                            "name": "newStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3591,
                            "src": "4344:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address)"
                            }
                          },
                          "id": 3510,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4344:26:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3511,
                        "nodeType": "ExpressionStatement",
                        "src": "4344:26:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3515,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3503,
                              "src": "4440:4:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 3512,
                              "name": "ZapDispute",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2349,
                              "src": "4412:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_ZapDispute_$2349_$",
                                "typeString": "type(library ZapDispute)"
                              }
                            },
                            "id": 3514,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "updateDisputeFee",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 2348,
                            "src": "4412:27:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer)"
                            }
                          },
                          "id": 3516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4412:33:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3517,
                        "nodeType": "ExpressionStatement",
                        "src": "4412:33:8"
                      }
                    ]
                  },
                  "documentation": "@dev This function allows miners to deposit their stake.",
                  "id": 3519,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "depositStake",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3504,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3503,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3519,
                        "src": "4287:40:8",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3502,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "4287:27:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4286:42:8"
                  },
                  "returnParameters": {
                    "id": 3505,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4336:0:8"
                  },
                  "scope": 3592,
                  "src": "4265:187:8",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3590,
                    "nodeType": "Block",
                    "src": "4823:667:8",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 3529,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3521,
                                    "src": "4863:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 3530,
                                    "name": "staker",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3523,
                                    "src": "4868:6:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3527,
                                    "name": "ZapTransfer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4275,
                                    "src": "4841:11:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_contract$_ZapTransfer_$4275_$",
                                      "typeString": "type(library ZapTransfer)"
                                    }
                                  },
                                  "id": 3528,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 4002,
                                  "src": "4841:21:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_delegatecall_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address) view returns (uint256)"
                                  }
                                },
                                "id": 3531,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4841:34:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3532,
                                    "name": "self",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3521,
                                    "src": "4879:4:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                      "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                    }
                                  },
                                  "id": 3533,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "uintVars",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3693,
                                  "src": "4879:13:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                    "typeString": "mapping(bytes32 => uint256)"
                                  }
                                },
                                "id": 3537,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "7374616b65416d6f756e74",
                                      "id": 3535,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "string",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4903:13:8",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                        "typeString": "literal_string \"stakeAmount\""
                                      },
                                      "value": "stakeAmount"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                        "typeString": "literal_string \"stakeAmount\""
                                      }
                                    ],
                                    "id": 3534,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4284,
                                    "src": "4893:9:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                      "typeString": "function (bytes memory) pure returns (bytes32)"
                                    }
                                  },
                                  "id": 3536,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4893:24:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4879:39:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4841:77:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3526,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "4833:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3539,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4833:86:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3540,
                        "nodeType": "ExpressionStatement",
                        "src": "4833:86:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 3556,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 3542,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3521,
                                        "src": "5100:4:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 3543,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "stakerDetails",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3726,
                                      "src": "5100:18:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                        "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                      }
                                    },
                                    "id": 3545,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 3544,
                                      "name": "staker",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3523,
                                      "src": "5119:6:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5100:26:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                      "typeString": "struct ZapStorage.StakeInfo storage ref"
                                    }
                                  },
                                  "id": 3546,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "currentStatus",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3626,
                                  "src": "5100:40:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 3547,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5144:1:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "5100:45:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3555,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 3549,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 3521,
                                        "src": "5149:4:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 3550,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "stakerDetails",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3726,
                                      "src": "5149:18:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                        "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                      }
                                    },
                                    "id": 3552,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 3551,
                                      "name": "staker",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3523,
                                      "src": "5168:6:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5149:26:8",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                      "typeString": "struct ZapStorage.StakeInfo storage ref"
                                    }
                                  },
                                  "id": 3553,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "currentStatus",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3626,
                                  "src": "5149:40:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "32",
                                  "id": 3554,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5193:1:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "5149:45:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "5100:94:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3541,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "5092:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3557,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5092:103:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3558,
                        "nodeType": "ExpressionStatement",
                        "src": "5092:103:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3559,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3521,
                                "src": "5205:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3564,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "uintVars",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3693,
                              "src": "5205:13:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                "typeString": "mapping(bytes32 => uint256)"
                              }
                            },
                            "id": 3565,
                            "indexExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "7374616b6572436f756e74",
                                  "id": 3562,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5229:13:8",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                    "typeString": "literal_string \"stakerCount\""
                                  },
                                  "value": "stakerCount"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_edddb9344bfe0dadc78c558b8ffca446679cbffc17be64eb83973fce7bea5f34",
                                    "typeString": "literal_string \"stakerCount\""
                                  }
                                ],
                                "id": 3561,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4284,
                                "src": "5219:9:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 3563,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5219:24:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5205:39:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 3566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5248:1:8",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5205:44:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3568,
                        "nodeType": "ExpressionStatement",
                        "src": "5205:44:8"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3584,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3569,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3521,
                                "src": "5259:4:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3572,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "stakerDetails",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3726,
                              "src": "5259:18:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                              }
                            },
                            "id": 3573,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3571,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3523,
                              "src": "5278:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "5259:26:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                              "typeString": "struct ZapStorage.StakeInfo storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 3576,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5338:1:8",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 3577,
                                  "name": "now",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4292,
                                  "src": "5422:3:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "components": [
                                    {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 3580,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 3578,
                                        "name": "now",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4292,
                                        "src": "5429:3:8",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "%",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "3836343030",
                                        "id": 3579,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5435:5:8",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_86400_by_1",
                                          "typeString": "int_const 86400"
                                        },
                                        "value": "86400"
                                      },
                                      "src": "5429:11:8",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 3581,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "5428:13:8",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5422:19:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3574,
                                "name": "ZapStorage",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3740,
                                "src": "5288:10:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_ZapStorage_$3740_$",
                                  "typeString": "type(library ZapStorage)"
                                }
                              },
                              "id": 3575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "StakeInfo",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3629,
                              "src": "5288:20:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_StakeInfo_$3629_storage_ptr_$",
                                "typeString": "type(struct ZapStorage.StakeInfo storage pointer)"
                              }
                            },
                            "id": 3583,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "currentStatus",
                              "startDate"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "5288:164:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_StakeInfo_$3629_memory",
                              "typeString": "struct ZapStorage.StakeInfo memory"
                            }
                          },
                          "src": "5259:193:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                            "typeString": "struct ZapStorage.StakeInfo storage ref"
                          }
                        },
                        "id": 3585,
                        "nodeType": "ExpressionStatement",
                        "src": "5259:193:8"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3587,
                              "name": "staker",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3523,
                              "src": "5476:6:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 3586,
                            "name": "NewStake",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3205,
                            "src": "5467:8:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 3588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5467:16:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3589,
                        "nodeType": "EmitStatement",
                        "src": "5462:21:8"
                      }
                    ]
                  },
                  "documentation": "@dev This function is used by the init function to succesfully stake the initial 5 miners.\nThe function updates their status/state and status start date so they are locked it so they can't withdraw\nand updates the number of stakers in the system.",
                  "id": 3591,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "newStake",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3524,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3521,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3591,
                        "src": "4756:40:8",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3520,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "4756:27:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3523,
                        "name": "staker",
                        "nodeType": "VariableDeclaration",
                        "scope": 3591,
                        "src": "4798:14:8",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3522,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4798:7:8",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4755:58:8"
                  },
                  "returnParameters": {
                    "id": 3525,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4823:0:8"
                  },
                  "scope": 3592,
                  "src": "4738:752:8",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "internal"
                }
              ],
              "scope": 3593,
              "src": "262:5230:8"
            }
          ],
          "src": "0:5493:8"
        },
        "id": 8
      },
      "contracts/libraries/ZapStorage.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/ZapStorage.sol",
          "exportedSymbols": {
            "ZapStorage": [
              3740
            ]
          },
          "id": 3741,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3594,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:9"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title Zap Oracle Storage Library\n@dev Contains all the variables/structs used by Zap",
              "fullyImplemented": true,
              "id": 3740,
              "linearizedBaseContracts": [
                3740
              ],
              "name": "ZapStorage",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ZapStorage.Details",
                  "id": 3599,
                  "members": [
                    {
                      "constant": false,
                      "id": 3596,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 3599,
                      "src": "281:13:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3595,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "281:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3598,
                      "name": "miner",
                      "nodeType": "VariableDeclaration",
                      "scope": 3599,
                      "src": "304:13:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3597,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "304:7:9",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "Details",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "256:68:9",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ZapStorage.Dispute",
                  "id": 3624,
                  "members": [
                    {
                      "constant": false,
                      "id": 3601,
                      "name": "hash",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "355:12:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 3600,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "355:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3603,
                      "name": "tally",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "443:12:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 3602,
                        "name": "int256",
                        "nodeType": "ElementaryTypeName",
                        "src": "443:6:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3605,
                      "name": "executed",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "512:13:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 3604,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "512:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3607,
                      "name": "disputeVotePassed",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "560:22:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 3606,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "560:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3609,
                      "name": "isPropFork",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "613:15:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 3608,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "613:4:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3611,
                      "name": "reportedMiner",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "667:21:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3610,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "667:7:9",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3613,
                      "name": "reportingParty",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "789:22:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3612,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "789:7:9",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3615,
                      "name": "proposedForkAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "924:27:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 3614,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "924:7:9",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3619,
                      "name": "disputeUintVars",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "999:43:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 3618,
                        "keyType": {
                          "id": 3616,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1007:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "999:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 3617,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1018:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3623,
                      "name": "voted",
                      "nodeType": "VariableDeclaration",
                      "scope": 3624,
                      "src": "1983:30:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "typeName": {
                        "id": 3622,
                        "keyType": {
                          "id": 3620,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1991:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "1983:24:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        },
                        "valueType": {
                          "id": 3621,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2002:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "Dispute",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "330:1740:9",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ZapStorage.StakeInfo",
                  "id": 3629,
                  "members": [
                    {
                      "constant": false,
                      "id": 3626,
                      "name": "currentStatus",
                      "nodeType": "VariableDeclaration",
                      "scope": 3629,
                      "src": "2103:21:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3625,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2103:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3628,
                      "name": "startDate",
                      "nodeType": "VariableDeclaration",
                      "scope": 3629,
                      "src": "2193:17:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3627,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2193:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "StakeInfo",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "2076:160:9",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ZapStorage.Checkpoint",
                  "id": 3634,
                  "members": [
                    {
                      "constant": false,
                      "id": 3631,
                      "name": "fromBlock",
                      "nodeType": "VariableDeclaration",
                      "scope": 3634,
                      "src": "2359:17:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 3630,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "2359:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3633,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 3634,
                      "src": "2453:13:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 3632,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "2453:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "Checkpoint",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "2331:202:9",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ZapStorage.Request",
                  "id": 3672,
                  "members": [
                    {
                      "constant": false,
                      "id": 3636,
                      "name": "queryString",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "2564:18:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3635,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2564:6:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3638,
                      "name": "dataSymbol",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "2611:17:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 3637,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2611:6:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3640,
                      "name": "queryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "2667:17:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 3639,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2667:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3643,
                      "name": "requestTimestamps",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "2784:27:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 3641,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2784:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3642,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "2784:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3647,
                      "name": "apiUintVars",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "2865:39:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 3646,
                        "keyType": {
                          "id": 3644,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "2873:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "2865:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 3645,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2884:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3651,
                      "name": "minedBlockNum",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "3340:41:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      },
                      "typeName": {
                        "id": 3650,
                        "keyType": {
                          "id": 3648,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3348:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "3340:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        },
                        "valueType": {
                          "id": 3649,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3359:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3655,
                      "name": "finalValues",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "3431:39:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      },
                      "typeName": {
                        "id": 3654,
                        "keyType": {
                          "id": 3652,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3439:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "3431:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        },
                        "valueType": {
                          "id": 3653,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3450:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3659,
                      "name": "inDispute",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "3586:34:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                        "typeString": "mapping(uint256 => bool)"
                      },
                      "typeName": {
                        "id": 3658,
                        "keyType": {
                          "id": 3656,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3594:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "3586:24:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        },
                        "valueType": {
                          "id": 3657,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "3605:4:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3665,
                      "name": "minersByValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "3677:44:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_address_$5_storage_$",
                        "typeString": "mapping(uint256 => address[5])"
                      },
                      "typeName": {
                        "id": 3664,
                        "keyType": {
                          "id": 3660,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3685:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "3677:30:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_address_$5_storage_$",
                          "typeString": "mapping(uint256 => address[5])"
                        },
                        "valueType": {
                          "baseType": {
                            "id": 3661,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3696:7:9",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 3663,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 3662,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3704:1:9",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "3696:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$5_storage_ptr",
                            "typeString": "address[5]"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3671,
                      "name": "valuesByTimestamp",
                      "nodeType": "VariableDeclaration",
                      "scope": 3672,
                      "src": "3731:48:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint256_$5_storage_$",
                        "typeString": "mapping(uint256 => uint256[5])"
                      },
                      "typeName": {
                        "id": 3670,
                        "keyType": {
                          "id": 3666,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3739:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "3731:30:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint256_$5_storage_$",
                          "typeString": "mapping(uint256 => uint256[5])"
                        },
                        "valueType": {
                          "baseType": {
                            "id": 3667,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3750:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 3669,
                          "length": {
                            "argumentTypes": null,
                            "hexValue": "35",
                            "id": 3668,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3758:1:9",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            },
                            "value": "5"
                          },
                          "nodeType": "ArrayTypeName",
                          "src": "3750:10:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$5_storage_ptr",
                            "typeString": "uint256[5]"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "Request",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "2539:1247:9",
                  "visibility": "public"
                },
                {
                  "canonicalName": "ZapStorage.ZapStorageStruct",
                  "id": 3739,
                  "members": [
                    {
                      "constant": false,
                      "id": 3674,
                      "name": "currentChallenge",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "3826:24:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 3673,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3826:7:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3678,
                      "name": "requestQ",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "3893:20:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                        "typeString": "uint256[51]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 3675,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3893:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3677,
                        "length": {
                          "argumentTypes": null,
                          "hexValue": "3531",
                          "id": 3676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3901:2:9",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": null,
                            "typeString": null
                          },
                          "value": "51"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "3893:11:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$51_storage_ptr",
                          "typeString": "uint256[51]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3681,
                      "name": "newValueTimestamps",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "3978:28:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 3679,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3978:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3680,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "3978:9:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3685,
                      "name": "currentMiners",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "4052:24:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Details_$3599_storage_$5_storage_ptr",
                        "typeString": "struct ZapStorage.Details[5]"
                      },
                      "typeName": {
                        "baseType": {
                          "contractScope": null,
                          "id": 3682,
                          "name": "Details",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3599,
                          "src": "4052:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Details_$3599_storage_ptr",
                            "typeString": "struct ZapStorage.Details"
                          }
                        },
                        "id": 3684,
                        "length": {
                          "argumentTypes": null,
                          "hexValue": "35",
                          "id": 3683,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4060:1:9",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": null,
                            "typeString": null
                          },
                          "value": "5"
                        },
                        "nodeType": "ArrayTypeName",
                        "src": "4052:10:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Details_$3599_storage_$5_storage_ptr",
                          "typeString": "struct ZapStorage.Details[5]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3689,
                      "name": "addressVars",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "4159:39:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      },
                      "typeName": {
                        "id": 3688,
                        "keyType": {
                          "id": 3686,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4167:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "4159:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        },
                        "valueType": {
                          "id": 3687,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4178:7:9",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3693,
                      "name": "uintVars",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "4604:36:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 3692,
                        "keyType": {
                          "id": 3690,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4612:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "4604:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 3691,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4623:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3699,
                      "name": "minersByChallenge",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "5990:62:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                        "typeString": "mapping(bytes32 => mapping(address => bool))"
                      },
                      "typeName": {
                        "id": 3698,
                        "keyType": {
                          "id": 3694,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "5998:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "5990:44:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                          "typeString": "mapping(bytes32 => mapping(address => bool))"
                        },
                        "valueType": {
                          "id": 3697,
                          "keyType": {
                            "id": 3695,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6017:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "6009:24:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          },
                          "valueType": {
                            "id": 3696,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "6028:4:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3703,
                      "name": "requestIdByTimestamp",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6154:48:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      },
                      "typeName": {
                        "id": 3702,
                        "keyType": {
                          "id": 3700,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6162:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6154:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        },
                        "valueType": {
                          "id": 3701,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6173:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3707,
                      "name": "requestIdByRequestQIndex",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6238:52:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      },
                      "typeName": {
                        "id": 3706,
                        "keyType": {
                          "id": 3704,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6246:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6238:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                          "typeString": "mapping(uint256 => uint256)"
                        },
                        "valueType": {
                          "id": 3705,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6257:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3711,
                      "name": "disputesById",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6369:40:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                        "typeString": "mapping(uint256 => struct ZapStorage.Dispute)"
                      },
                      "typeName": {
                        "id": 3710,
                        "keyType": {
                          "id": 3708,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6377:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6369:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Dispute_$3624_storage_$",
                          "typeString": "mapping(uint256 => struct ZapStorage.Dispute)"
                        },
                        "valueType": {
                          "contractScope": null,
                          "id": 3709,
                          "name": "Dispute",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3624,
                          "src": "6388:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Dispute_$3624_storage_ptr",
                            "typeString": "struct ZapStorage.Dispute"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3716,
                      "name": "balances",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6449:41:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                        "typeString": "mapping(address => struct ZapStorage.Checkpoint[])"
                      },
                      "typeName": {
                        "id": 3715,
                        "keyType": {
                          "id": 3712,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6457:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6449:32:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                          "typeString": "mapping(address => struct ZapStorage.Checkpoint[])"
                        },
                        "valueType": {
                          "baseType": {
                            "contractScope": null,
                            "id": 3713,
                            "name": "Checkpoint",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 3634,
                            "src": "6468:10:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                              "typeString": "struct ZapStorage.Checkpoint"
                            }
                          },
                          "id": 3714,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "6468:12:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                            "typeString": "struct ZapStorage.Checkpoint[]"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3722,
                      "name": "allowed",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6535:55:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                        "typeString": "mapping(address => mapping(address => uint256))"
                      },
                      "typeName": {
                        "id": 3721,
                        "keyType": {
                          "id": 3717,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6543:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6535:47:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(address => uint256))"
                        },
                        "valueType": {
                          "id": 3720,
                          "keyType": {
                            "id": 3718,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6562:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Mapping",
                          "src": "6554:27:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          },
                          "valueType": {
                            "id": 3719,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "6573:7:9",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3726,
                      "name": "stakerDetails",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6643:43:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                        "typeString": "mapping(address => struct ZapStorage.StakeInfo)"
                      },
                      "typeName": {
                        "id": 3725,
                        "keyType": {
                          "id": 3723,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6651:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6643:29:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                          "typeString": "mapping(address => struct ZapStorage.StakeInfo)"
                        },
                        "valueType": {
                          "contractScope": null,
                          "id": 3724,
                          "name": "StakeInfo",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3629,
                          "src": "6662:9:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_StakeInfo_$3629_storage_ptr",
                            "typeString": "struct ZapStorage.StakeInfo"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3730,
                      "name": "requestDetails",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6751:42:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                        "typeString": "mapping(uint256 => struct ZapStorage.Request)"
                      },
                      "typeName": {
                        "id": 3729,
                        "keyType": {
                          "id": 3727,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6759:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6751:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Request_$3672_storage_$",
                          "typeString": "mapping(uint256 => struct ZapStorage.Request)"
                        },
                        "valueType": {
                          "contractScope": null,
                          "id": 3728,
                          "name": "Request",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3672,
                          "src": "6770:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Request_$3672_storage_ptr",
                            "typeString": "struct ZapStorage.Request"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3734,
                      "name": "requestIdByQueryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6833:48:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 3733,
                        "keyType": {
                          "id": 3731,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6841:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6833:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 3732,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6852:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 3738,
                      "name": "disputeIdByDisputeHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 3739,
                      "src": "6946:50:9",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                        "typeString": "mapping(bytes32 => uint256)"
                      },
                      "typeName": {
                        "id": 3737,
                        "keyType": {
                          "id": 3735,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "6954:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Mapping",
                        "src": "6946:27:9",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                          "typeString": "mapping(bytes32 => uint256)"
                        },
                        "valueType": {
                          "id": 3736,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6965:7:9",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "name": "ZapStorageStruct",
                  "nodeType": "StructDefinition",
                  "scope": 3740,
                  "src": "3792:3251:9",
                  "visibility": "public"
                }
              ],
              "scope": 3741,
              "src": "171:6874:9"
            }
          ],
          "src": "0:7046:9"
        },
        "id": 9
      },
      "contracts/libraries/ZapTransfer.sol": {
        "ast": {
          "absolutePath": "contracts/libraries/ZapTransfer.sol",
          "exportedSymbols": {
            "ZapTransfer": [
              4275
            ]
          },
          "id": 4276,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 3742,
              "literals": [
                "solidity",
                "^",
                "0.5",
                ".1"
              ],
              "nodeType": "PragmaDirective",
              "src": "0:23:10"
            },
            {
              "absolutePath": "contracts/libraries/SafeMathM.sol",
              "file": "./SafeMathM.sol",
              "id": 3743,
              "nodeType": "ImportDirective",
              "scope": 4276,
              "sourceUnit": 1375,
              "src": "25:25:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "absolutePath": "contracts/libraries/ZapStorage.sol",
              "file": "./ZapStorage.sol",
              "id": 3744,
              "nodeType": "ImportDirective",
              "scope": 4276,
              "sourceUnit": 3741,
              "src": "51:26:10",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "library",
              "documentation": "@title Zap Transfer\n@dev Contais the methods related to transfers and ERC20. Zap.sol and ZapGetters.sol\nreference this library for function's logic.",
              "fullyImplemented": true,
              "id": 4275,
              "linearizedBaseContracts": [
                4275
              ],
              "name": "ZapTransfer",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "id": 3747,
                  "libraryName": {
                    "contractScope": null,
                    "id": 3745,
                    "name": "SafeMathM",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 1374,
                    "src": "273:9:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_SafeMathM_$1374",
                      "typeString": "library SafeMathM"
                    }
                  },
                  "nodeType": "UsingForDirective",
                  "src": "267:28:10",
                  "typeName": {
                    "id": 3746,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "287:7:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3755,
                  "name": "Approval",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3754,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3749,
                        "indexed": true,
                        "name": "_owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 3755,
                        "src": "316:22:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3748,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "316:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3751,
                        "indexed": true,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3755,
                        "src": "340:24:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3750,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "340:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3753,
                        "indexed": false,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 3755,
                        "src": "366:14:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3752,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "366:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "315:66:10"
                  },
                  "src": "301:81:10"
                },
                {
                  "anonymous": false,
                  "documentation": null,
                  "id": 3763,
                  "name": "Transfer",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 3762,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3757,
                        "indexed": true,
                        "name": "_from",
                        "nodeType": "VariableDeclaration",
                        "scope": 3763,
                        "src": "424:21:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3756,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "424:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3759,
                        "indexed": true,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 3763,
                        "src": "447:19:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3758,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "447:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3761,
                        "indexed": false,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 3763,
                        "src": "468:14:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3760,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "468:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "423:60:10"
                  },
                  "src": "409:75:10"
                },
                {
                  "body": {
                    "id": 3784,
                    "nodeType": "Block",
                    "src": "862:79:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3775,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3765,
                              "src": "883:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3776,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "888:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3777,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "888:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3778,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3767,
                              "src": "900:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3779,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3769,
                              "src": "905:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3774,
                            "name": "doTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3985,
                            "src": "872:10:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                            }
                          },
                          "id": 3780,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "872:41:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3781,
                        "nodeType": "ExpressionStatement",
                        "src": "872:41:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 3782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "930:4:10",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 3773,
                        "id": 3783,
                        "nodeType": "Return",
                        "src": "923:11:10"
                      }
                    ]
                  },
                  "documentation": "@dev Allows for a transfer of tokens to _to\n@param _to The address to send tokens to\n@param _amount The amount of tokens to send\n@return true if transfer is successful",
                  "id": 3785,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3770,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3765,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3785,
                        "src": "760:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3764,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "760:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3767,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 3785,
                        "src": "802:11:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3766,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "802:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3769,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 3785,
                        "src": "815:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3768,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "815:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "759:72:10"
                  },
                  "returnParameters": {
                    "id": 3773,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3772,
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 3785,
                        "src": "848:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3771,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "848:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "847:14:10"
                  },
                  "scope": 4275,
                  "src": "742:199:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3830,
                    "nodeType": "Block",
                    "src": "1425:187:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3807,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 3799,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 3787,
                                      "src": "1443:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    "id": 3800,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "allowed",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 3722,
                                    "src": "1443:12:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 3802,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 3801,
                                    "name": "_from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 3789,
                                    "src": "1456:5:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1443:19:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 3805,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3803,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "1463:3:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 3804,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "1463:10:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1443:31:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 3806,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3793,
                                "src": "1478:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1443:42:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3798,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1435:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1435:51:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3809,
                        "nodeType": "ExpressionStatement",
                        "src": "1435:51:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3819,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3810,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3787,
                                  "src": "1496:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3815,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allowed",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3722,
                                "src": "1496:12:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 3816,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3812,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3789,
                                "src": "1509:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1496:19:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 3817,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3813,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "1516:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1516:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1496:31:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 3818,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3793,
                            "src": "1531:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1496:42:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3820,
                        "nodeType": "ExpressionStatement",
                        "src": "1496:42:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3822,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3787,
                              "src": "1559:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3823,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3789,
                              "src": "1564:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3824,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3791,
                              "src": "1571:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3825,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3793,
                              "src": "1576:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3821,
                            "name": "doTransfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3985,
                            "src": "1548:10:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,address,uint256)"
                            }
                          },
                          "id": 3826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1548:36:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3827,
                        "nodeType": "ExpressionStatement",
                        "src": "1548:36:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 3828,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1601:4:10",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 3797,
                        "id": 3829,
                        "nodeType": "Return",
                        "src": "1594:11:10"
                      }
                    ]
                  },
                  "documentation": "@notice Send _amount tokens to _to from _from on the condition it\nis approved by _from\n@param _from The address holding the tokens being transferred\n@param _to The address of the recipient\n@param _amount The amount of tokens to be transferred\n@return True if the transfer was successful",
                  "id": 3831,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3794,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3787,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3831,
                        "src": "1308:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3786,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "1308:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3789,
                        "name": "_from",
                        "nodeType": "VariableDeclaration",
                        "scope": 3831,
                        "src": "1350:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3788,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1350:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3791,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 3831,
                        "src": "1365:11:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3790,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1365:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3793,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 3831,
                        "src": "1378:15:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3792,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1378:7:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1307:87:10"
                  },
                  "returnParameters": {
                    "id": 3797,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3796,
                        "name": "success",
                        "nodeType": "VariableDeclaration",
                        "scope": 3831,
                        "src": "1411:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3795,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1411:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1410:14:10"
                  },
                  "scope": 4275,
                  "src": "1286:326:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3879,
                    "nodeType": "Block",
                    "src": "1965:235:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 3844,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3833,
                                  "src": "1998:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 3845,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4290,
                                    "src": "2003:3:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 3846,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "2003:10:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 3847,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3837,
                                  "src": "2014:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  },
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 3843,
                                "name": "allowedToTrade",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4199,
                                "src": "1983:14:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (bool)"
                                }
                              },
                              "id": 3848,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1983:39:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3842,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "1975:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1975:48:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3850,
                        "nodeType": "ExpressionStatement",
                        "src": "1975:48:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3856,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3852,
                                "name": "_spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3835,
                                "src": "2041:8:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 3854,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2061:1:10",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3853,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2053:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 3855,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2053:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "2041:22:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3851,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "2033:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2033:31:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3858,
                        "nodeType": "ExpressionStatement",
                        "src": "2033:31:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3868,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3859,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3833,
                                  "src": "2074:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3864,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "allowed",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3722,
                                "src": "2074:12:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 3865,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3861,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4290,
                                  "src": "2087:3:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 3862,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "2087:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2074:24:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 3866,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3863,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3835,
                              "src": "2099:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2074:34:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "id": 3867,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3837,
                            "src": "2111:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2074:44:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3869,
                        "nodeType": "ExpressionStatement",
                        "src": "2074:44:10"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3871,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4290,
                                "src": "2142:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 3872,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2142:10:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3873,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3835,
                              "src": "2154:8:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3874,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3837,
                              "src": "2164:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3870,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3755,
                            "src": "2133:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 3875,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2133:39:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3876,
                        "nodeType": "EmitStatement",
                        "src": "2128:44:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 3877,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2189:4:10",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 3841,
                        "id": 3878,
                        "nodeType": "Return",
                        "src": "2182:11:10"
                      }
                    ]
                  },
                  "documentation": "@dev This function approves a _spender an _amount of tokens to use\n@param _spender address\n@param _amount amount the spender is being approved for\n@return true if spender appproved successfully",
                  "id": 3880,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3838,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3833,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3880,
                        "src": "1869:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3832,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "1869:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3835,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3880,
                        "src": "1911:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3834,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1911:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3837,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 3880,
                        "src": "1929:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3836,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1929:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1868:74:10"
                  },
                  "returnParameters": {
                    "id": 3841,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3840,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3880,
                        "src": "1959:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 3839,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1959:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "1958:6:10"
                  },
                  "scope": 4275,
                  "src": "1852:348:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3898,
                    "nodeType": "Block",
                    "src": "2555:61:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3891,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3882,
                                "src": "2579:4:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              "id": 3892,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allowed",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 3722,
                              "src": "2579:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 3894,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 3893,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3884,
                              "src": "2592:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2579:19:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 3896,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 3895,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3886,
                            "src": "2599:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2579:29:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3890,
                        "id": 3897,
                        "nodeType": "Return",
                        "src": "2572:36:10"
                      }
                    ]
                  },
                  "documentation": "@param _user address of party with the balance\n@param _spender address of spender of parties said balance\n@return Returns the remaining allowance of tokens granted to the _spender from the _user",
                  "id": 3899,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3887,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3882,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3899,
                        "src": "2454:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3881,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "2454:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3884,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 3899,
                        "src": "2495:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3883,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2495:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3886,
                        "name": "_spender",
                        "nodeType": "VariableDeclaration",
                        "scope": 3899,
                        "src": "2510:16:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3885,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2510:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2453:74:10"
                  },
                  "returnParameters": {
                    "id": 3890,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3889,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 3899,
                        "src": "2549:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3888,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2549:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2548:6:10"
                  },
                  "scope": 4275,
                  "src": "2435:181:10",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 3984,
                    "nodeType": "Block",
                    "src": "2954:627:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3913,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3911,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3907,
                                "src": "2972:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 3912,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2982:1:10",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2972:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3910,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "2964:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3914,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2964:20:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3915,
                        "nodeType": "ExpressionStatement",
                        "src": "2964:20:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 3921,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3917,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3905,
                                "src": "3002:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 3919,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3017:1:10",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 3918,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3009:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 3920,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3009:10:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "3002:17:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3916,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "2994:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3922,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2994:26:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3923,
                        "nodeType": "ExpressionStatement",
                        "src": "2994:26:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 3926,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3901,
                                  "src": "3053:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 3927,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3903,
                                  "src": "3058:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 3928,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3907,
                                  "src": "3064:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 3925,
                                "name": "allowedToTrade",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4199,
                                "src": "3038:14:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (bool)"
                                }
                              },
                              "id": 3929,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3038:34:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3924,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "3030:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3930,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3030:43:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3931,
                        "nodeType": "ExpressionStatement",
                        "src": "3030:43:10"
                      },
                      {
                        "assignments": [
                          3933
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 3933,
                            "name": "previousBalance",
                            "nodeType": "VariableDeclaration",
                            "scope": 3984,
                            "src": "3170:20:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 3932,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "3170:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 3940,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3935,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3901,
                              "src": "3205:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3936,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3903,
                              "src": "3210:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3937,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4280,
                                "src": "3217:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 3938,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3217:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3934,
                            "name": "balanceOfAt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4046,
                            "src": "3193:11:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 3939,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3193:37:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3170:60:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3942,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3901,
                                  "src": "3259:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3943,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balances",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3716,
                                "src": "3259:13:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                  "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                }
                              },
                              "id": 3945,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3944,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3903,
                                "src": "3273:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3259:20:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3948,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3946,
                                "name": "previousBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3933,
                                "src": "3281:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 3947,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3907,
                                "src": "3299:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3281:25:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3941,
                            "name": "updateBalanceAtNow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4274,
                            "src": "3240:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.Checkpoint storage ref[] storage pointer,uint256)"
                            }
                          },
                          "id": 3949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3240:67:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3950,
                        "nodeType": "ExpressionStatement",
                        "src": "3240:67:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 3958,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 3951,
                            "name": "previousBalance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3933,
                            "src": "3317:15:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 3953,
                                "name": "self",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3901,
                                "src": "3347:4:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 3954,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3905,
                                "src": "3352:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3955,
                                  "name": "block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4280,
                                  "src": "3357:5:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_block",
                                    "typeString": "block"
                                  }
                                },
                                "id": 3956,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "number",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "3357:12:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                  "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 3952,
                              "name": "balanceOfAt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4046,
                              "src": "3335:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$",
                                "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (uint256)"
                              }
                            },
                            "id": 3957,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3335:35:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3317:53:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 3959,
                        "nodeType": "ExpressionStatement",
                        "src": "3317:53:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 3963,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 3961,
                                  "name": "previousBalance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3933,
                                  "src": "3388:15:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 3962,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3907,
                                  "src": "3406:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3388:25:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 3964,
                                "name": "previousBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3933,
                                "src": "3417:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3388:44:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 3960,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4293,
                              4294
                            ],
                            "referencedDeclaration": 4293,
                            "src": "3380:7:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 3966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3380:53:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3967,
                        "nodeType": "ExpressionStatement",
                        "src": "3380:53:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 3969,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 3901,
                                  "src": "3484:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 3970,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balances",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3716,
                                "src": "3484:13:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                  "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                }
                              },
                              "id": 3972,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 3971,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3905,
                                "src": "3498:3:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3484:18:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 3975,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 3973,
                                "name": "previousBalance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3933,
                                "src": "3504:15:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 3974,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3907,
                                "src": "3522:7:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3504:25:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3968,
                            "name": "updateBalanceAtNow",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4274,
                            "src": "3465:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr_$_t_uint256_$returns$__$",
                              "typeString": "function (struct ZapStorage.Checkpoint storage ref[] storage pointer,uint256)"
                            }
                          },
                          "id": 3976,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3465:65:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3977,
                        "nodeType": "ExpressionStatement",
                        "src": "3465:65:10"
                      },
                      {
                        "eventCall": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3979,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3903,
                              "src": "3554:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3980,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3905,
                              "src": "3561:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3981,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3907,
                              "src": "3566:7:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3978,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3763,
                            "src": "3545:8:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 3982,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3545:29:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 3983,
                        "nodeType": "EmitStatement",
                        "src": "3540:34:10"
                      }
                    ]
                  },
                  "documentation": "@dev Completes POWO transfers by updating the balances on the current block number\n@param _from address to transfer from\n@param _to addres to transfer to\n@param _amount to transfer",
                  "id": 3985,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "doTransfer",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3908,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3901,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 3985,
                        "src": "2863:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3900,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "2863:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3903,
                        "name": "_from",
                        "nodeType": "VariableDeclaration",
                        "scope": 3985,
                        "src": "2905:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3902,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2905:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3905,
                        "name": "_to",
                        "nodeType": "VariableDeclaration",
                        "scope": 3985,
                        "src": "2920:11:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3904,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2920:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3907,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 3985,
                        "src": "2933:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3906,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "2933:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2862:84:10"
                  },
                  "returnParameters": {
                    "id": 3909,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2954:0:10"
                  },
                  "scope": 4275,
                  "src": "2843:738:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4001,
                    "nodeType": "Block",
                    "src": "3886:61:10",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 3995,
                              "name": "self",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3987,
                              "src": "3915:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 3996,
                              "name": "_user",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3989,
                              "src": "3920:5:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 3997,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4280,
                                "src": "3927:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 3998,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "number",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3927:12:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 3994,
                            "name": "balanceOfAt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4046,
                            "src": "3903:11:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$_t_uint256_$returns$_t_uint256_$",
                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address,uint256) view returns (uint256)"
                            }
                          },
                          "id": 3999,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3903:37:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 3993,
                        "id": 4000,
                        "nodeType": "Return",
                        "src": "3896:44:10"
                      }
                    ]
                  },
                  "documentation": "@dev Gets balance of owner specified\n@param _user is the owner address used to look up the balance\n@return Returns the balance associated with the passed in _user",
                  "id": 4002,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 3990,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3987,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 4002,
                        "src": "3803:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 3986,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "3803:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 3989,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 4002,
                        "src": "3844:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 3988,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3844:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3802:56:10"
                  },
                  "returnParameters": {
                    "id": 3993,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3992,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 4002,
                        "src": "3880:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 3991,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "3880:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "3879:6:10"
                  },
                  "scope": 4275,
                  "src": "3784:163:10",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4045,
                    "nodeType": "Block",
                    "src": "4354:231:10",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4031,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4019,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 4013,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4004,
                                        "src": "4369:4:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 4014,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "balances",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3716,
                                      "src": "4369:13:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                        "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                      }
                                    },
                                    "id": 4016,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 4015,
                                      "name": "_user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4006,
                                      "src": "4383:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4369:20:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                    }
                                  },
                                  "id": 4017,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "4369:27:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 4018,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4400:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "4369:32:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 4020,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4368:34:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4029,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 4021,
                                          "name": "self",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4004,
                                          "src": "4407:4:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                            "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                          }
                                        },
                                        "id": 4022,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "balances",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 3716,
                                        "src": "4407:13:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                          "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                        }
                                      },
                                      "id": 4024,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 4023,
                                        "name": "_user",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4006,
                                        "src": "4421:5:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4407:20:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                        "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                      }
                                    },
                                    "id": 4026,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 4025,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4428:1:10",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4407:23:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref"
                                    }
                                  },
                                  "id": 4027,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "fromBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3631,
                                  "src": "4407:33:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 4028,
                                  "name": "_blockNumber",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4008,
                                  "src": "4443:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4407:48:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 4030,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4406:50:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "4368:88:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 4043,
                          "nodeType": "Block",
                          "src": "4506:73:10",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 4036,
                                        "name": "self",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4004,
                                        "src": "4536:4:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                          "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                        }
                                      },
                                      "id": 4037,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "balances",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 3716,
                                      "src": "4536:13:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_$",
                                        "typeString": "mapping(address => struct ZapStorage.Checkpoint storage ref[] storage ref)"
                                      }
                                    },
                                    "id": 4039,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 4038,
                                      "name": "_user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4006,
                                      "src": "4550:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4536:20:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 4040,
                                    "name": "_blockNumber",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4008,
                                    "src": "4558:12:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage ref"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 4035,
                                  "name": "getBalanceAt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4142,
                                  "src": "4523:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (struct ZapStorage.Checkpoint storage ref[] storage pointer,uint256) view returns (uint256)"
                                  }
                                },
                                "id": 4041,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4523:48:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "functionReturnParameters": 4012,
                              "id": 4042,
                              "nodeType": "Return",
                              "src": "4516:55:10"
                            }
                          ]
                        },
                        "id": 4044,
                        "nodeType": "IfStatement",
                        "src": "4364:215:10",
                        "trueBody": {
                          "id": 4034,
                          "nodeType": "Block",
                          "src": "4458:37:10",
                          "statements": [
                            {
                              "expression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 4032,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4483:1:10",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "functionReturnParameters": 4012,
                              "id": 4033,
                              "nodeType": "Return",
                              "src": "4476:8:10"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Queries the balance of _user at a specific _blockNumber\n@param _user The address from which the balance will be retrieved\n@param _blockNumber The block number when the balance is queried\n@return The balance at _blockNumber specified",
                  "id": 4046,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOfAt",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4009,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4004,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 4046,
                        "src": "4252:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 4003,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "4252:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4006,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 4046,
                        "src": "4293:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4005,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4293:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4008,
                        "name": "_blockNumber",
                        "nodeType": "VariableDeclaration",
                        "scope": 4046,
                        "src": "4308:17:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4007,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4308:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4251:75:10"
                  },
                  "returnParameters": {
                    "id": 4012,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4011,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 4046,
                        "src": "4348:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4010,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4348:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4347:6:10"
                  },
                  "scope": 4275,
                  "src": "4231:354:10",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4141,
                    "nodeType": "Block",
                    "src": "4960:617:10",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4059,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 4056,
                              "name": "checkpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4049,
                              "src": "4974:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                              }
                            },
                            "id": 4057,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4974:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 4058,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4996:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "4974:23:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 4062,
                        "nodeType": "IfStatement",
                        "src": "4970:37:10",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 4060,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5006:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 4055,
                          "id": 4061,
                          "nodeType": "Return",
                          "src": "4999:8:10"
                        }
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4071,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 4063,
                            "name": "_block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4051,
                            "src": "5021:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 4064,
                                "name": "checkpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4049,
                                "src": "5031:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                  "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                }
                              },
                              "id": 4069,
                              "indexExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4068,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4065,
                                    "name": "checkpoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4049,
                                    "src": "5043:11:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 4066,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "5043:18:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 4067,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5062:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "5043:20:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5031:33:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref"
                              }
                            },
                            "id": 4070,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "fromBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3631,
                            "src": "5031:43:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "5021:53:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 4080,
                        "nodeType": "IfStatement",
                        "src": "5017:117:10",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 4072,
                                "name": "checkpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4049,
                                "src": "5095:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                  "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                }
                              },
                              "id": 4077,
                              "indexExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4076,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4073,
                                    "name": "checkpoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4049,
                                    "src": "5107:11:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 4074,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "5107:18:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 4075,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5126:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "5107:20:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5095:33:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref"
                              }
                            },
                            "id": 4078,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3633,
                            "src": "5095:39:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "functionReturnParameters": 4055,
                          "id": 4079,
                          "nodeType": "Return",
                          "src": "5088:46:10"
                        }
                      },
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4086,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 4081,
                            "name": "_block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4051,
                            "src": "5148:6:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 4082,
                                "name": "checkpoints",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4049,
                                "src": "5157:11:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                  "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                }
                              },
                              "id": 4084,
                              "indexExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 4083,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5169:1:10",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5157:14:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                "typeString": "struct ZapStorage.Checkpoint storage ref"
                              }
                            },
                            "id": 4085,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "fromBlock",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3631,
                            "src": "5157:24:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          "src": "5148:33:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 4089,
                        "nodeType": "IfStatement",
                        "src": "5144:47:10",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 4087,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5190:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 4055,
                          "id": 4088,
                          "nodeType": "Return",
                          "src": "5183:8:10"
                        }
                      },
                      {
                        "assignments": [
                          4091
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4091,
                            "name": "min",
                            "nodeType": "VariableDeclaration",
                            "scope": 4141,
                            "src": "5252:8:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4090,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5252:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 4093,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 4092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5263:1:10",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5252:12:10"
                      },
                      {
                        "assignments": [
                          4095
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4095,
                            "name": "max",
                            "nodeType": "VariableDeclaration",
                            "scope": 4141,
                            "src": "5274:8:10",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 4094,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5274:4:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 4100,
                        "initialValue": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4099,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 4096,
                              "name": "checkpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4049,
                              "src": "5285:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                              }
                            },
                            "id": 4097,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "5285:18:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 4098,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5304:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5285:20:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5274:31:10"
                      },
                      {
                        "body": {
                          "id": 4134,
                          "nodeType": "Block",
                          "src": "5333:199:10",
                          "statements": [
                            {
                              "assignments": [
                                4105
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 4105,
                                  "name": "mid",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 4134,
                                  "src": "5347:8:10",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 4104,
                                    "name": "uint",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5347:4:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 4114,
                              "initialValue": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4113,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "components": [
                                    {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 4110,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 4108,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 4106,
                                          "name": "max",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4095,
                                          "src": "5359:3:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "+",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "id": 4107,
                                          "name": "min",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4091,
                                          "src": "5365:3:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "src": "5359:9:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 4109,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "5371:1:10",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "5359:13:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 4111,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "5358:15:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "32",
                                  "id": 4112,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5375:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "src": "5358:18:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5347:29:10"
                            },
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4120,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 4115,
                                      "name": "checkpoints",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4049,
                                      "src": "5394:11:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                        "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 4117,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 4116,
                                      "name": "mid",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4105,
                                      "src": "5406:3:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5394:16:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref"
                                    }
                                  },
                                  "id": 4118,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "fromBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3631,
                                  "src": "5394:26:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 4119,
                                  "name": "_block",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4051,
                                  "src": "5422:6:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5394:34:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 4132,
                                "nodeType": "Block",
                                "src": "5478:44:10",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4130,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 4126,
                                        "name": "max",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4095,
                                        "src": "5496:3:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 4129,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "id": 4127,
                                          "name": "mid",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4105,
                                          "src": "5502:3:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "-",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "hexValue": "31",
                                          "id": 4128,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "5506:1:10",
                                          "subdenomination": null,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1_by_1",
                                            "typeString": "int_const 1"
                                          },
                                          "value": "1"
                                        },
                                        "src": "5502:5:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "5496:11:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4131,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5496:11:10"
                                  }
                                ]
                              },
                              "id": 4133,
                              "nodeType": "IfStatement",
                              "src": "5390:132:10",
                              "trueBody": {
                                "id": 4125,
                                "nodeType": "Block",
                                "src": "5430:42:10",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4123,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "argumentTypes": null,
                                        "id": 4121,
                                        "name": "min",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4091,
                                        "src": "5448:3:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "argumentTypes": null,
                                        "id": 4122,
                                        "name": "mid",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4105,
                                        "src": "5454:3:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "5448:9:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4124,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5448:9:10"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 4101,
                            "name": "max",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4095,
                            "src": "5322:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 4102,
                            "name": "min",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4091,
                            "src": "5328:3:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5322:9:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4135,
                        "nodeType": "WhileStatement",
                        "src": "5315:217:10"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 4136,
                              "name": "checkpoints",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4049,
                              "src": "5548:11:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                              }
                            },
                            "id": 4138,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 4137,
                              "name": "min",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4091,
                              "src": "5560:3:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5548:16:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                              "typeString": "struct ZapStorage.Checkpoint storage ref"
                            }
                          },
                          "id": 4139,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3633,
                          "src": "5548:22:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint128",
                            "typeString": "uint128"
                          }
                        },
                        "functionReturnParameters": 4055,
                        "id": 4140,
                        "nodeType": "Return",
                        "src": "5541:29:10"
                      }
                    ]
                  },
                  "documentation": "@dev Getter for balance for owner on the specified _block number\n@param checkpoints gets the mapping for the balances[owner]\n@param _block is the block number to search the balance on\n@return the balance at the checkpoint",
                  "id": 4142,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getBalanceAt",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4052,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4049,
                        "name": "checkpoints",
                        "nodeType": "VariableDeclaration",
                        "scope": 4142,
                        "src": "4875:43:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                          "typeString": "struct ZapStorage.Checkpoint[]"
                        },
                        "typeName": {
                          "baseType": {
                            "contractScope": null,
                            "id": 4047,
                            "name": "ZapStorage.Checkpoint",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 3634,
                            "src": "4875:21:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                              "typeString": "struct ZapStorage.Checkpoint"
                            }
                          },
                          "id": 4048,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "4875:23:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                            "typeString": "struct ZapStorage.Checkpoint[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4051,
                        "name": "_block",
                        "nodeType": "VariableDeclaration",
                        "scope": 4142,
                        "src": "4920:11:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4050,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4920:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4874:58:10"
                  },
                  "returnParameters": {
                    "id": 4055,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4054,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 4142,
                        "src": "4954:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4053,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "4954:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "4953:6:10"
                  },
                  "scope": 4275,
                  "src": "4853:724:10",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4198,
                    "nodeType": "Block",
                    "src": "6050:411:10",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 4159,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 4153,
                                  "name": "self",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4144,
                                  "src": "6063:4:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                    "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                  }
                                },
                                "id": 4154,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "stakerDetails",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 3726,
                                "src": "6063:18:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_struct$_StakeInfo_$3629_storage_$",
                                  "typeString": "mapping(address => struct ZapStorage.StakeInfo storage ref)"
                                }
                              },
                              "id": 4156,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 4155,
                                "name": "_user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4146,
                                "src": "6082:5:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6063:25:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_StakeInfo_$3629_storage",
                                "typeString": "struct ZapStorage.StakeInfo storage ref"
                              }
                            },
                            "id": 4157,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentStatus",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 3626,
                            "src": "6063:39:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 4158,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6104:1:10",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "6063:42:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 4187,
                                  "name": "_amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4148,
                                  "src": "6379:7:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 4183,
                                      "name": "self",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4144,
                                      "src": "6363:4:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "id": 4184,
                                      "name": "_user",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4146,
                                      "src": "6368:5:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                        "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                      },
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 4182,
                                    "name": "balanceOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4002,
                                    "src": "6353:9:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address) view returns (uint256)"
                                    }
                                  },
                                  "id": 4185,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6353:21:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 4186,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sub",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1373,
                                "src": "6353:25:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 4188,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6353:34:10",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 4189,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6391:1:10",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "6353:39:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": null,
                          "id": 4194,
                          "nodeType": "IfStatement",
                          "src": "6350:83:10",
                          "trueBody": {
                            "id": 4193,
                            "nodeType": "Block",
                            "src": "6393:40:10",
                            "statements": [
                              {
                                "expression": {
                                  "argumentTypes": null,
                                  "hexValue": "74727565",
                                  "id": 4191,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6418:4:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "functionReturnParameters": 4152,
                                "id": 4192,
                                "nodeType": "Return",
                                "src": "6411:11:10"
                              }
                            ]
                          }
                        },
                        "id": 4195,
                        "nodeType": "IfStatement",
                        "src": "6060:373:10",
                        "trueBody": {
                          "id": 4181,
                          "nodeType": "Block",
                          "src": "6106:230:10",
                          "statements": [
                            {
                              "condition": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4176,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 4173,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4148,
                                      "src": "6268:7:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 4165,
                                              "name": "self",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4144,
                                              "src": "6223:4:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                              }
                                            },
                                            "id": 4166,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "uintVars",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 3693,
                                            "src": "6223:13:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
                                              "typeString": "mapping(bytes32 => uint256)"
                                            }
                                          },
                                          "id": 4170,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "arguments": [
                                              {
                                                "argumentTypes": null,
                                                "hexValue": "7374616b65416d6f756e74",
                                                "id": 4168,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "6247:13:10",
                                                "subdenomination": null,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                  "typeString": "literal_string \"stakeAmount\""
                                                },
                                                "value": "stakeAmount"
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_7be108969d31a3f0b261465c71f2b0ba9301cd914d55d9091c3b36a49d4d41b2",
                                                  "typeString": "literal_string \"stakeAmount\""
                                                }
                                              ],
                                              "id": 4167,
                                              "name": "keccak256",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4284,
                                              "src": "6237:9:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                                "typeString": "function (bytes memory) pure returns (bytes32)"
                                              }
                                            },
                                            "id": 4169,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "6237:24:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bytes32",
                                              "typeString": "bytes32"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "6223:39:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "arguments": [
                                            {
                                              "argumentTypes": null,
                                              "id": 4161,
                                              "name": "self",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4144,
                                              "src": "6207:4:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                              }
                                            },
                                            {
                                              "argumentTypes": null,
                                              "id": 4162,
                                              "name": "_user",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 4146,
                                              "src": "6212:5:10",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                                                "typeString": "struct ZapStorage.ZapStorageStruct storage pointer"
                                              },
                                              {
                                                "typeIdentifier": "t_address",
                                                "typeString": "address"
                                              }
                                            ],
                                            "id": 4160,
                                            "name": "balanceOf",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 4002,
                                            "src": "6197:9:10",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_function_internal_view$_t_struct$_ZapStorageStruct_$3739_storage_ptr_$_t_address_$returns$_t_uint256_$",
                                              "typeString": "function (struct ZapStorage.ZapStorageStruct storage pointer,address) view returns (uint256)"
                                            }
                                          },
                                          "id": 4163,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "functionCall",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "6197:21:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 4164,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "sub",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 1373,
                                        "src": "6197:25:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 4171,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "6197:66:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4172,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sub",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1373,
                                    "src": "6197:70:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 4174,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "6197:79:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 4175,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6280:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "6197:84:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": null,
                              "id": 4180,
                              "nodeType": "IfStatement",
                              "src": "6194:132:10",
                              "trueBody": {
                                "id": 4179,
                                "nodeType": "Block",
                                "src": "6282:44:10",
                                "statements": [
                                  {
                                    "expression": {
                                      "argumentTypes": null,
                                      "hexValue": "74727565",
                                      "id": 4177,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "6307:4:10",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "functionReturnParameters": 4152,
                                    "id": 4178,
                                    "nodeType": "Return",
                                    "src": "6300:11:10"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 4196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6449:5:10",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 4152,
                        "id": 4197,
                        "nodeType": "Return",
                        "src": "6442:12:10"
                      }
                    ]
                  },
                  "documentation": "@dev This function returns whether or not a given user is allowed to trade a given amount \nand removing the staked amount from their balance if they are staked\n@param _user address of user\n@param _amount to check if the user can spend\n@return true if they are allowed to spend the amount being checked",
                  "id": 4199,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowedToTrade",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4149,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4144,
                        "name": "self",
                        "nodeType": "VariableDeclaration",
                        "scope": 4199,
                        "src": "5955:40:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                          "typeString": "struct ZapStorage.ZapStorageStruct"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 4143,
                          "name": "ZapStorage.ZapStorageStruct",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 3739,
                          "src": "5955:27:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ZapStorageStruct_$3739_storage_ptr",
                            "typeString": "struct ZapStorage.ZapStorageStruct"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4146,
                        "name": "_user",
                        "nodeType": "VariableDeclaration",
                        "scope": 4199,
                        "src": "5996:13:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4145,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5996:7:10",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4148,
                        "name": "_amount",
                        "nodeType": "VariableDeclaration",
                        "scope": 4199,
                        "src": "6010:12:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4147,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6010:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5954:69:10"
                  },
                  "returnParameters": {
                    "id": 4152,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4151,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 4199,
                        "src": "6044:4:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 4150,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "6044:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6043:6:10"
                  },
                  "scope": 4275,
                  "src": "5931:530:10",
                  "stateMutability": "view",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 4273,
                    "nodeType": "Block",
                    "src": "6771:507:10",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4210,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4207,
                                    "name": "checkpoints",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4202,
                                    "src": "6786:11:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                    }
                                  },
                                  "id": 4208,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "length",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "6786:18:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 4209,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6808:1:10",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "6786:23:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 4211,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "6785:25:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "argumentTypes": null,
                            "components": [
                              {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 4221,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 4212,
                                      "name": "checkpoints",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4202,
                                      "src": "6815:11:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                        "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 4217,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 4216,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 4213,
                                          "name": "checkpoints",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 4202,
                                          "src": "6827:11:10",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                            "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                          }
                                        },
                                        "id": 4214,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "length",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": null,
                                        "src": "6827:18:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "31",
                                        "id": 4215,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6847:1:10",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "6827:21:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6815:34:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                      "typeString": "struct ZapStorage.Checkpoint storage ref"
                                    }
                                  },
                                  "id": 4218,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "fromBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3631,
                                  "src": "6815:44:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4219,
                                    "name": "block",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4280,
                                    "src": "6862:5:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_block",
                                      "typeString": "block"
                                    }
                                  },
                                  "id": 4220,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "number",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "6862:12:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "6815:59:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              }
                            ],
                            "id": 4222,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "6814:61:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "6785:90:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 4271,
                          "nodeType": "Block",
                          "src": "7111:161:10",
                          "statements": [
                            {
                              "assignments": [
                                4255
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 4255,
                                  "name": "oldCheckPoint",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 4271,
                                  "src": "7128:43:10",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                    "typeString": "struct ZapStorage.Checkpoint"
                                  },
                                  "typeName": {
                                    "contractScope": null,
                                    "id": 4254,
                                    "name": "ZapStorage.Checkpoint",
                                    "nodeType": "UserDefinedTypeName",
                                    "referencedDeclaration": 3634,
                                    "src": "7128:21:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 4262,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 4256,
                                  "name": "checkpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4202,
                                  "src": "7174:11:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                    "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                  }
                                },
                                "id": 4261,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 4260,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4257,
                                      "name": "checkpoints",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4202,
                                      "src": "7186:11:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                        "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 4258,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "7186:18:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 4259,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "7205:1:10",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    },
                                    "value": "1"
                                  },
                                  "src": "7186:20:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7174:33:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                  "typeString": "struct ZapStorage.Checkpoint storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "7128:79:10"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 4269,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4263,
                                    "name": "oldCheckPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4255,
                                    "src": "7224:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage pointer"
                                    }
                                  },
                                  "id": 4265,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3633,
                                  "src": "7224:19:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 4267,
                                      "name": "_value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4204,
                                      "src": "7254:6:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 4266,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7246:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint128_$",
                                      "typeString": "type(uint128)"
                                    },
                                    "typeName": "uint128"
                                  },
                                  "id": 4268,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7246:15:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "src": "7224:37:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "id": 4270,
                              "nodeType": "ExpressionStatement",
                              "src": "7224:37:10"
                            }
                          ]
                        },
                        "id": 4272,
                        "nodeType": "IfStatement",
                        "src": "6781:491:10",
                        "trueBody": {
                          "id": 4251,
                          "nodeType": "Block",
                          "src": "6877:228:10",
                          "statements": [
                            {
                              "assignments": [
                                4227
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 4227,
                                  "name": "newCheckPoint",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 4251,
                                  "src": "6894:43:10",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                    "typeString": "struct ZapStorage.Checkpoint"
                                  },
                                  "typeName": {
                                    "contractScope": null,
                                    "id": 4226,
                                    "name": "ZapStorage.Checkpoint",
                                    "nodeType": "UserDefinedTypeName",
                                    "referencedDeclaration": 3634,
                                    "src": "6894:21:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 4233,
                              "initialValue": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 4228,
                                  "name": "checkpoints",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4202,
                                  "src": "6940:11:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                    "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                  }
                                },
                                "id": 4232,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 4231,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "++",
                                  "prefix": false,
                                  "src": "6953:20:10",
                                  "subExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 4229,
                                      "name": "checkpoints",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4202,
                                      "src": "6953:11:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                                        "typeString": "struct ZapStorage.Checkpoint storage ref[] storage pointer"
                                      }
                                    },
                                    "id": 4230,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": true,
                                    "memberName": "length",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "6953:18:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6940:35:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Checkpoint_$3634_storage",
                                  "typeString": "struct ZapStorage.Checkpoint storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "6894:81:10"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 4241,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4234,
                                    "name": "newCheckPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4227,
                                    "src": "6992:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage pointer"
                                    }
                                  },
                                  "id": 4236,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "fromBlock",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3631,
                                  "src": "6992:23:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 4238,
                                        "name": "block",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4280,
                                        "src": "7027:5:10",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_block",
                                          "typeString": "block"
                                        }
                                      },
                                      "id": 4239,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "number",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "7027:12:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 4237,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7019:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint128_$",
                                      "typeString": "type(uint128)"
                                    },
                                    "typeName": "uint128"
                                  },
                                  "id": 4240,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7019:21:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "src": "6992:48:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "id": 4242,
                              "nodeType": "ExpressionStatement",
                              "src": "6992:48:10"
                            },
                            {
                              "expression": {
                                "argumentTypes": null,
                                "id": 4249,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 4243,
                                    "name": "newCheckPoint",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4227,
                                    "src": "7057:13:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                                      "typeString": "struct ZapStorage.Checkpoint storage pointer"
                                    }
                                  },
                                  "id": 4245,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 3633,
                                  "src": "7057:19:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 4247,
                                      "name": "_value",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4204,
                                      "src": "7087:6:10",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 4246,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "7079:7:10",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint128_$",
                                      "typeString": "type(uint128)"
                                    },
                                    "typeName": "uint128"
                                  },
                                  "id": 4248,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "7079:15:10",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint128",
                                    "typeString": "uint128"
                                  }
                                },
                                "src": "7057:37:10",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "id": 4250,
                              "nodeType": "ExpressionStatement",
                              "src": "7057:37:10"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "documentation": "@dev Updates balance for from and to on the current block number via doTransfer\n@param checkpoints gets the mapping for the balances[owner]\n@param _value is the new balance",
                  "id": 4274,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateBalanceAtNow",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4205,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 4202,
                        "name": "checkpoints",
                        "nodeType": "VariableDeclaration",
                        "scope": 4274,
                        "src": "6706:43:10",
                        "stateVariable": false,
                        "storageLocation": "storage",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                          "typeString": "struct ZapStorage.Checkpoint[]"
                        },
                        "typeName": {
                          "baseType": {
                            "contractScope": null,
                            "id": 4200,
                            "name": "ZapStorage.Checkpoint",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 3634,
                            "src": "6706:21:10",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Checkpoint_$3634_storage_ptr",
                              "typeString": "struct ZapStorage.Checkpoint"
                            }
                          },
                          "id": 4201,
                          "length": null,
                          "nodeType": "ArrayTypeName",
                          "src": "6706:23:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Checkpoint_$3634_storage_$dyn_storage_ptr",
                            "typeString": "struct ZapStorage.Checkpoint[]"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 4204,
                        "name": "_value",
                        "nodeType": "VariableDeclaration",
                        "scope": 4274,
                        "src": "6751:11:10",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4203,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "6751:4:10",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "6705:58:10"
                  },
                  "returnParameters": {
                    "id": 4206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6771:0:10"
                  },
                  "scope": 4275,
                  "src": "6678:600:10",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 4276,
              "src": "241:7039:10"
            }
          ],
          "src": "0:7281:10"
        },
        "id": 10
      }
    }
  }
}
