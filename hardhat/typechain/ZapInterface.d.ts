/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "respondBytes32Array(uint256,bytes32[])": FunctionFragment;
    "escrowDots(address,address,bytes32,uint256)": FunctionFragment;
    "getZapBound(address,bytes32)": FunctionFragment;
    "getDotsIssued(address,bytes32)": FunctionFragment;
    "dotLimit(address,bytes32)": FunctionFragment;
    "initiateProviderCurve(bytes32,int256[],address)": FunctionFragment;
    "respond4(uint256,string,string,string,string)": FunctionFragment;
    "getContract(string)": FunctionFragment;
    "releaseDots(address,address,bytes32,uint256)": FunctionFragment;
    "respond3(uint256,string,string,string)": FunctionFragment;
    "respond1(uint256,string)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "query(address,string,bytes32,bytes32[])": FunctionFragment;
    "bond(address,bytes32,uint256)": FunctionFragment;
    "unbond(address,bytes32,uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "initiateProvider(uint256,bytes32)": FunctionFragment;
    "calcZapForDots(address,bytes32,uint256)": FunctionFragment;
    "getBoundDots(address,address,bytes32)": FunctionFragment;
    "delegateBond(address,address,bytes32,uint256)": FunctionFragment;
    "currentCostOfDot(address,bytes32,uint256)": FunctionFragment;
    "respondIntArray(uint256,int256[])": FunctionFragment;
    "returnDots(address,address,bytes32,uint256)": FunctionFragment;
    "respond2(uint256,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respondBytes32Array",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZapBound",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDotsIssued",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dotLimit",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProviderCurve",
    values: [BytesLike, BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "respond4",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond3",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "respond1",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [string, string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProvider",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcZapForDots",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoundDots",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBond",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentCostOfDot",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respondIntArray",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "returnDots",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond2",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "respondBytes32Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrowDots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getZapBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDotsIssued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dotLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateProviderCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "respond4", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "respond3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcZapForDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoundDots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCostOfDot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondIntArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnDots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond2", data: BytesLike): Result;

  events: {
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ZapInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapInterfaceInterface;

  functions: {
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initiateProviderCurve(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateProvider(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initiateProvider(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respondBytes32Array(
    arg0: BigNumberish,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respondBytes32Array(uint256,bytes32[])"(
    arg0: BigNumberish,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrowDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "escrowDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getZapBound(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getZapBound(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDotsIssued(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDotsIssued(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dotLimit(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dotLimit(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initiateProviderCurve(
    arg0: BytesLike,
    arg1: BigNumberish[],
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initiateProviderCurve(bytes32,int256[],address)"(
    arg0: BytesLike,
    arg1: BigNumberish[],
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond4(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond4(uint256,string,string,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContract(contractName: string, overrides?: CallOverrides): Promise<string>;

  "getContract(string)"(
    contractName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  releaseDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "releaseDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond3(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond3(uint256,string,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond1(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond1(uint256,string)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    who: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  query(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "query(address,string,bytes32,bytes32[])"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bond(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bond(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unbond(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unbond(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateProvider(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initiateProvider(uint256,bytes32)"(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcZapForDots(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcZapForDots(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBoundDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBoundDots(address,address,bytes32)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delegateBond(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "delegateBond(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentCostOfDot(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "currentCostOfDot(address,bytes32,uint256)"(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  respondIntArray(
    arg0: BigNumberish,
    arg1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respondIntArray(uint256,int256[])"(
    arg0: BigNumberish,
    arg1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnDots(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "returnDots(address,address,bytes32,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond2(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond2(uint256,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateProviderCurve(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initiateProvider(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initiateProvider(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateProviderCurve(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(who: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateProvider(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initiateProvider(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrowDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "escrowDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getZapBound(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getZapBound(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDotsIssued(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDotsIssued(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dotLimit(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dotLimit(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateProviderCurve(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initiateProviderCurve(bytes32,int256[],address)"(
      arg0: BytesLike,
      arg1: BigNumberish[],
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContract(string)"(
      contractName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "releaseDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      who: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unbond(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unbond(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateProvider(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initiateProvider(uint256,bytes32)"(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcZapForDots(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcZapForDots(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoundDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoundDots(address,address,bytes32)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateBond(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "delegateBond(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentCostOfDot(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentCostOfDot(address,bytes32,uint256)"(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnDots(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "returnDots(address,address,bytes32,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
