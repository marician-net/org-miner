/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapDisputeInterface extends ethers.utils.Interface {
  functions: {
    "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)": FunctionFragment;
    "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)": FunctionFragment;
    "proposeFork(ZapStorage.ZapStorageStruct storage,address)": FunctionFragment;
    "updateDisputeFee(ZapStorage.ZapStorageStruct storage)": FunctionFragment;
    "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "tallyVotes",
    values: [any, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beginDispute",
    values: [any, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeFork",
    values: [any, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDisputeFee",
    values: [any]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [any, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "tallyVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beginDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeFork",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDisputeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "NewDispute(uint256,uint256,uint256,address)": EventFragment;
    "Voted(uint256,bool,address)": EventFragment;
    "DisputeVoteTallied(uint256,int256,address,address,bool)": EventFragment;
    "NewZapAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeVoteTallied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewZapAddress"): EventFragment;
}

export class ZapDispute extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapDisputeInterface;

  functions: {
    tallyVotes(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)"(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beginDispute(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)"(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeFork(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "proposeFork(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateDisputeFee(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDisputeFee(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)"(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  tallyVotes(
    self: any,
    _disputeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)"(
    self: any,
    _disputeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beginDispute(
    self: any,
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)"(
    self: any,
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    _minerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeFork(
    self: any,
    _propNewZapAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "proposeFork(ZapStorage.ZapStorageStruct storage,address)"(
    self: any,
    _propNewZapAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateDisputeFee(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDisputeFee(ZapStorage.ZapStorageStruct storage)"(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    self: any,
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)"(
    self: any,
    _disputeId: BigNumberish,
    _supportsDispute: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    tallyVotes(
      self: any,
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)"(
      self: any,
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    beginDispute(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)"(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeFork(
      self: any,
      _propNewZapAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeFork(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _propNewZapAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDisputeFee(self: any, overrides?: CallOverrides): Promise<void>;

    "updateDisputeFee(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)"(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewDispute(
      _disputeId: BigNumberish | null,
      _requestId: BigNumberish | null,
      _timestamp: null,
      _miner: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string],
      {
        _disputeId: BigNumber;
        _requestId: BigNumber;
        _timestamp: BigNumber;
        _miner: string;
      }
    >;

    Voted(
      _disputeID: BigNumberish | null,
      _position: null,
      _voter: string | null
    ): TypedEventFilter<
      [BigNumber, boolean, string],
      { _disputeID: BigNumber; _position: boolean; _voter: string }
    >;

    DisputeVoteTallied(
      _disputeID: BigNumberish | null,
      _result: null,
      _reportedMiner: string | null,
      _reportingParty: null,
      _active: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string, boolean],
      {
        _disputeID: BigNumber;
        _result: BigNumber;
        _reportedMiner: string;
        _reportingParty: string;
        _active: boolean;
      }
    >;

    NewZapAddress(
      _newZap: null
    ): TypedEventFilter<[string], { _newZap: string }>;
  };

  estimateGas: {
    tallyVotes(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)"(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beginDispute(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)"(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeFork(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "proposeFork(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateDisputeFee(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDisputeFee(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)"(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    tallyVotes(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tallyVotes(ZapStorage.ZapStorageStruct storage,uint256)"(
      self: any,
      _disputeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beginDispute(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "beginDispute(ZapStorage.ZapStorageStruct storage,uint256,uint256,uint256)"(
      self: any,
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      _minerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeFork(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "proposeFork(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _propNewZapAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateDisputeFee(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDisputeFee(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "vote(ZapStorage.ZapStorageStruct storage,uint256,bool)"(
      self: any,
      _disputeId: BigNumberish,
      _supportsDispute: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
