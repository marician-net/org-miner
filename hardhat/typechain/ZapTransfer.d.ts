/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapTransferInterface extends ethers.utils.Interface {
  functions: {
    "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)": FunctionFragment;
    "approve(ZapStorage.ZapStorageStruct storage,address,uint256)": FunctionFragment;
    "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)": FunctionFragment;
    "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)": FunctionFragment;
    "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)": FunctionFragment;
    "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)": FunctionFragment;
    "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)": FunctionFragment;
    "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)": FunctionFragment;
    "balanceOf(ZapStorage.ZapStorageStruct storage,address)": FunctionFragment;
    "allowance(ZapStorage.ZapStorageStruct storage,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "updateBalanceAtNow",
    values: [any, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [any, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAt",
    values: [any, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [any, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doTransfer",
    values: [any, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedToTrade",
    values: [any, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [any, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [any, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [any, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [any, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "updateBalanceAtNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "doTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ZapTransfer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapTransferInterface;

  functions: {
    updateBalanceAtNow(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalanceAt(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doTransfer(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowedToTrade(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOfAt(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(ZapStorage.ZapStorageStruct storage,address,address)"(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  updateBalanceAtNow(
    checkpoints: any,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)"(
    checkpoints: any,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    self: any,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(ZapStorage.ZapStorageStruct storage,address,uint256)"(
    self: any,
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalanceAt(
    checkpoints: any,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)"(
    checkpoints: any,
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    self: any,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)"(
    self: any,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doTransfer(
    self: any,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
    self: any,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowedToTrade(
    self: any,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)"(
    self: any,
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOfAt(
    self: any,
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)"(
    self: any,
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    self: any,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
    self: any,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    self: any,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(ZapStorage.ZapStorageStruct storage,address)"(
    self: any,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    self: any,
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(ZapStorage.ZapStorageStruct storage,address,address)"(
    self: any,
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    updateBalanceAtNow(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalanceAt(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doTransfer(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowedToTrade(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOfAt(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(ZapStorage.ZapStorageStruct storage,address,address)"(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _owner: string; _spender: string; _value: BigNumber }
    >;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _from: string; _to: string; _value: BigNumber }
    >;
  };

  estimateGas: {
    updateBalanceAtNow(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalanceAt(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doTransfer(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowedToTrade(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(ZapStorage.ZapStorageStruct storage,address,address)"(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    updateBalanceAtNow(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBalanceAtNow(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalanceAt(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalanceAt(ZapStorage.Checkpoint[] storage,uint256)"(
      checkpoints: any,
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doTransfer(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "doTransfer(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowedToTrade(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedToTrade(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(ZapStorage.ZapStorageStruct storage,address,uint256)"(
      self: any,
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(ZapStorage.ZapStorageStruct storage,address,address,uint256)"(
      self: any,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(ZapStorage.ZapStorageStruct storage,address)"(
      self: any,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(ZapStorage.ZapStorageStruct storage,address,address)"(
      self: any,
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
