/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DispatchInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "getCancel(uint256)": FunctionFragment;
    "respondBytes32Array(uint256,bytes32[])": FunctionFragment;
    "getSubscriber(uint256)": FunctionFragment;
    "respond4(uint256,string,string,string,string)": FunctionFragment;
    "getSubscriberOnchain(uint256)": FunctionFragment;
    "respond3(uint256,string,string,string)": FunctionFragment;
    "getProvider(uint256)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "respond1(uint256,string)": FunctionFragment;
    "cancelQuery(uint256)": FunctionFragment;
    "query(address,string,bytes32,bytes32[])": FunctionFragment;
    "getEndpoint(uint256)": FunctionFragment;
    "getUserQuery(uint256)": FunctionFragment;
    "respondIntArray(uint256,int256[])": FunctionFragment;
    "respond2(uint256,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respondBytes32Array",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond4",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriberOnchain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond3",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respond1",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [string, string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "respondIntArray",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "respond2",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getCancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "respondBytes32Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "respond4", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriberOnchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "respond3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "respond1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "respondIntArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "respond2", data: BytesLike): Result;

  events: {};
}

export class DispatchInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DispatchInterfaceInterface;

  functions: {
    getCancel(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCancel(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSubscriber(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getSubscriber(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSubscriberOnchain(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getSubscriberOnchain(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProvider(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getProvider(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelQuery(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelQuery(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEndpoint(id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getEndpoint(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserQuery(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUserQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCancel(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getCancel(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  respondBytes32Array(
    arg0: BigNumberish,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respondBytes32Array(uint256,bytes32[])"(
    arg0: BigNumberish,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSubscriber(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getSubscriber(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  respond4(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond4(uint256,string,string,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSubscriberOnchain(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getSubscriberOnchain(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  respond3(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond3(uint256,string,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProvider(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getProvider(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getStatus(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getStatus(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  respond1(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond1(uint256,string)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelQuery(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelQuery(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  query(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "query(address,string,bytes32,bytes32[])"(
    arg0: string,
    arg1: string,
    arg2: BytesLike,
    arg3: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEndpoint(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getEndpoint(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserQuery(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getUserQuery(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  respondIntArray(
    arg0: BigNumberish,
    arg1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respondIntArray(uint256,int256[])"(
    arg0: BigNumberish,
    arg1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  respond2(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "respond2(uint256,string,string)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCancel(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getCancel(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSubscriber(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getSubscriber(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSubscriberOnchain(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getSubscriberOnchain(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProvider(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getProvider(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getStatus(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelQuery(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelQuery(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEndpoint(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getEndpoint(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserQuery(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getUserQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getCancel(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getCancel(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSubscriber(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriber(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSubscriberOnchain(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriberOnchain(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProvider(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProvider(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatus(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelQuery(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelQuery(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEndpoint(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEndpoint(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserQuery(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCancel(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCancel(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respondBytes32Array(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respondBytes32Array(uint256,bytes32[])"(
      arg0: BigNumberish,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSubscriber(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriber(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respond4(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond4(uint256,string,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSubscriberOnchain(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriberOnchain(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respond3(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond3(uint256,string,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProvider(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProvider(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respond1(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond1(uint256,string)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelQuery(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelQuery(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    query(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "query(address,string,bytes32,bytes32[])"(
      arg0: string,
      arg1: string,
      arg2: BytesLike,
      arg3: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEndpoint(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEndpoint(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserQuery(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    respondIntArray(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respondIntArray(uint256,int256[])"(
      arg0: BigNumberish,
      arg1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    respond2(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "respond2(uint256,string,string)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
