/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapStakeInterface extends ethers.utils.Interface {
  functions: {
    "depositStake(ZapStorage.ZapStorageStruct storage)": FunctionFragment;
    "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)": FunctionFragment;
    "init(ZapStorage.ZapStorageStruct storage)": FunctionFragment;
    "withdrawStake(ZapStorage.ZapStorageStruct storage)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "depositStake", values: [any]): string;
  encodeFunctionData(
    functionFragment: "requestStakingWithdraw",
    values: [any]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [any]): string;
  encodeFunctionData(functionFragment: "withdrawStake", values: [any]): string;

  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestStakingWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "NewStake(address)": EventFragment;
    "StakeWithdrawn(address)": EventFragment;
    "StakeWithdrawRequested(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawRequested"): EventFragment;
}

export class ZapStake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapStakeInterface;

  functions: {
    depositStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestStakingWithdraw(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  depositStake(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositStake(ZapStorage.ZapStorageStruct storage)"(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestStakingWithdraw(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)"(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(ZapStorage.ZapStorageStruct storage)"(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawStake(ZapStorage.ZapStorageStruct storage)"(
    self: any,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositStake(self: any, overrides?: CallOverrides): Promise<void>;

    "depositStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: CallOverrides
    ): Promise<void>;

    requestStakingWithdraw(self: any, overrides?: CallOverrides): Promise<void>;

    "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: CallOverrides
    ): Promise<void>;

    init(self: any, overrides?: CallOverrides): Promise<void>;

    "init(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(self: any, overrides?: CallOverrides): Promise<void>;

    "withdrawStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NewStake(
      _sender: string | null
    ): TypedEventFilter<[string], { _sender: string }>;

    StakeWithdrawn(
      _sender: string | null
    ): TypedEventFilter<[string], { _sender: string }>;

    StakeWithdrawRequested(
      _sender: string | null
    ): TypedEventFilter<[string], { _sender: string }>;
  };

  estimateGas: {
    depositStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestStakingWithdraw(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestStakingWithdraw(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestStakingWithdraw(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawStake(ZapStorage.ZapStorageStruct storage)"(
      self: any,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
