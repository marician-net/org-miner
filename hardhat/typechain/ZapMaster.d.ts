/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ZapMasterInterface extends ethers.utils.Interface {
  functions: {
    "mintingFinished()": FunctionFragment;
    "name()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "getRequestIdByTimestamp(uint256)": FunctionFragment;
    "getSubmissionsByTimestamp(uint256,uint256)": FunctionFragment;
    "getAddressVars(bytes32)": FunctionFragment;
    "getSymbol()": FunctionFragment;
    "getName()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "getVariablesOnDeck()": FunctionFragment;
    "totalTokenSupply()": FunctionFragment;
    "getRequestIdByQueryHash(bytes32)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "getLastNewValueById(uint256)": FunctionFragment;
    "isInDispute(uint256,uint256)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "getNewValueCountbyRequestId(uint256)": FunctionFragment;
    "changeDeity(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "getUintVar(bytes32)": FunctionFragment;
    "getRequestIdByRequestQIndex(uint256)": FunctionFragment;
    "didMine(bytes32,address)": FunctionFragment;
    "decreaseApproval(address,uint256)": FunctionFragment;
    "getMinersByRequestIdAndTimestamp(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getStakerInfo(address)": FunctionFragment;
    "getTimestampbyRequestIDandIndex(uint256,uint256)": FunctionFragment;
    "finishMinting()": FunctionFragment;
    "getDisputeUintVars(uint256,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "retrieveData(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "allowedToTrade(address,uint256)": FunctionFragment;
    "getCurrentVariables()": FunctionFragment;
    "didVote(uint256,address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "getAllDisputeVars(uint256)": FunctionFragment;
    "getRequestQ()": FunctionFragment;
    "allocate(address,uint256)": FunctionFragment;
    "getMinedBlockNum(uint256,uint256)": FunctionFragment;
    "increaseApproval(address,uint256)": FunctionFragment;
    "getDisputeIdByDisputeHash(bytes32)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "getRequestUintVars(uint256,bytes32)": FunctionFragment;
    "getRequestVars(uint256)": FunctionFragment;
    "changeZapContract(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getLastNewValue()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mintingFinished",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionsByTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressVars",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSymbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVariablesOnDeck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByQueryHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastNewValueById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInDispute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewValueCountbyRequestId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeDeity", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUintVar",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdByRequestQIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "didMine",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getStakerInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampbyRequestIDandIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finishMinting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedToTrade",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVariables",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "didVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDisputeVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestQ",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinedBlockNum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseApproval",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisputeIdByDisputeHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestUintVars",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestVars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeZapContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastNewValue",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "mintingFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionsByTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVariablesOnDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByQueryHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValueById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNewValueCountbyRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDeity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUintVar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdByRequestQIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didMine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinersByRequestIdAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampbyRequestIDandIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishMinting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedToTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDisputeVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisputeIdByDisputeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestUintVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestVars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeZapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastNewValue",
    data: BytesLike
  ): Result;

  events: {
    "NewZapAddress(address)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "MintFinished()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewZapAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class ZapMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ZapMasterInterface;

  functions: {
    mintingFinished(overrides?: CallOverrides): Promise<[boolean]>;

    "mintingFinished()"(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]]>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSymbol(overrides?: CallOverrides): Promise<[string]>;

    "getSymbol()"(overrides?: CallOverrides): Promise<[string]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    "getVariablesOnDeck()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    totalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalTokenSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "decimals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeDeity(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeDeity(address)"(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string]]>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string]]>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "finishMinting()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    "getCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber
      ]
    >;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber
      ]
    >;

    getRequestQ(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    "getRequestQ()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ]
    >;

    allocate(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "allocate(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    changeZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeZapContract(address)"(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    "getLastNewValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;
  };

  mintingFinished(overrides?: CallOverrides): Promise<boolean>;

  "mintingFinished()"(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRequestIdByTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubmissionsByTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getSubmissionsByTimestamp(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getAddressVars(_data: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddressVars(bytes32)"(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSymbol(overrides?: CallOverrides): Promise<string>;

  "getSymbol()"(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getVariablesOnDeck(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>;

  "getVariablesOnDeck()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, string]>;

  totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRequestIdByQueryHash(
    _request: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByQueryHash(bytes32)"(
    _request: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLastNewValueById(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  "getLastNewValueById(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  isInDispute(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isInDispute(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNewValueCountbyRequestId(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNewValueCountbyRequestId(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeDeity(
    _newDeity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeDeity(address)"(
    _newDeity: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOfAt(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    _user: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "getUintVar(bytes32)"(
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestIdByRequestQIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestIdByRequestQIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  didMine(
    _challenge: BytesLike,
    _miner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "didMine(bytes32,address)"(
    _challenge: BytesLike,
    _miner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decreaseApproval(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseApproval(address,uint256)"(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinersByRequestIdAndTimestamp(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakerInfo(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getStakerInfo(address)"(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getTimestampbyRequestIDandIndex(
    _requestID: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimestampbyRequestIDandIndex(uint256,uint256)"(
    _requestID: BigNumberish,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finishMinting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "finishMinting()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDisputeUintVars(
    _disputeId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeUintVars(uint256,bytes32)"(
    _disputeId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  retrieveData(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retrieveData(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  allowedToTrade(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowedToTrade(address,uint256)"(
    _user: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getCurrentVariables(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

  "getCurrentVariables()"(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

  didVote(
    _disputeId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "didVote(uint256,address)"(
    _disputeId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDisputeVars(
    _disputeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      boolean,
      string,
      string,
      string,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber
    ]
  >;

  "getAllDisputeVars(uint256)"(
    _disputeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      boolean,
      boolean,
      boolean,
      string,
      string,
      string,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      BigNumber
    ]
  >;

  getRequestQ(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  "getRequestQ()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  allocate(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "allocate(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinedBlockNum(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinedBlockNum(uint256,uint256)"(
    _requestId: BigNumberish,
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseApproval(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseApproval(address,uint256)"(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDisputeIdByDisputeHash(
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDisputeIdByDisputeHash(bytes32)"(
    _hash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _user: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestUintVars(
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRequestUintVars(uint256,bytes32)"(
    _requestId: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRequestVars(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

  "getRequestVars(uint256)"(
    _requestId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

  changeZapContract(
    _zapContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeZapContract(address)"(
    _zapContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

  "getLastNewValue()"(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

  callStatic: {
    mintingFinished(overrides?: CallOverrides): Promise<boolean>;

    "mintingFinished()"(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSymbol(overrides?: CallOverrides): Promise<string>;

    "getSymbol()"(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    "getVariablesOnDeck()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, string]>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeDeity(_newDeity: string, overrides?: CallOverrides): Promise<void>;

    "changeDeity(address)"(
      _newDeity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishMinting(overrides?: CallOverrides): Promise<boolean>;

    "finishMinting()"(overrides?: CallOverrides): Promise<boolean>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    "getCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, string, BigNumber, BigNumber]>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber
      ]
    >;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ],
        BigNumber
      ]
    >;

    getRequestQ(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    "getRequestQ()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    allocate(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "allocate(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, BigNumber, BigNumber, BigNumber]>;

    changeZapContract(
      _zapContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeZapContract(address)"(
      _zapContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLastNewValue(overrides?: CallOverrides): Promise<[BigNumber, boolean]>;

    "getLastNewValue()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;
  };

  filters: {
    NewZapAddress(
      _newZap: null
    ): TypedEventFilter<[string], { _newZap: string }>;

    Mint(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    MintFinished(): TypedEventFilter<[], {}>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    mintingFinished(overrides?: CallOverrides): Promise<BigNumber>;

    "mintingFinished()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    "getSymbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVariablesOnDeck(overrides?: CallOverrides): Promise<BigNumber>;

    "getVariablesOnDeck()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeDeity(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeDeity(address)"(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUintVar(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "finishMinting()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVariables(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentVariables()"(overrides?: CallOverrides): Promise<BigNumber>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestQ(overrides?: CallOverrides): Promise<BigNumber>;

    "getRequestQ()"(overrides?: CallOverrides): Promise<BigNumber>;

    allocate(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "allocate(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeZapContract(address)"(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLastNewValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastNewValue()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    mintingFinished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintingFinished()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRequestIdByTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionsByTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubmissionsByTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressVars(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddressVars(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSymbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVariablesOnDeck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVariablesOnDeck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalTokenSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByQueryHash(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByQueryHash(bytes32)"(
      _request: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastNewValueById(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastNewValueById(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInDispute(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInDispute(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNewValueCountbyRequestId(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewValueCountbyRequestId(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeDeity(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeDeity(address)"(
      _newDeity: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      _user: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUintVar(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUintVar(bytes32)"(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestIdByRequestQIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestIdByRequestQIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    didMine(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "didMine(bytes32,address)"(
      _challenge: BytesLike,
      _miner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseApproval(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseApproval(address,uint256)"(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinersByRequestIdAndTimestamp(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinersByRequestIdAndTimestamp(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerInfo(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakerInfo(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampbyRequestIDandIndex(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimestampbyRequestIDandIndex(uint256,uint256)"(
      _requestID: BigNumberish,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finishMinting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "finishMinting()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDisputeUintVars(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeUintVars(uint256,bytes32)"(
      _disputeId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retrieveData(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retrieveData(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedToTrade(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedToTrade(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVariables(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentVariables()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    didVote(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "didVote(uint256,address)"(
      _disputeId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDisputeVars(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllDisputeVars(uint256)"(
      _disputeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestQ(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRequestQ()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocate(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "allocate(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinedBlockNum(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinedBlockNum(uint256,uint256)"(
      _requestId: BigNumberish,
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseApproval(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseApproval(address,uint256)"(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDisputeIdByDisputeHash(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDisputeIdByDisputeHash(bytes32)"(
      _hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _user: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestUintVars(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestUintVars(uint256,bytes32)"(
      _requestId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestVars(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequestVars(uint256)"(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeZapContract(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeZapContract(address)"(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLastNewValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLastNewValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
