/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestClientInterface extends ethers.utils.Interface {
  functions: {
    "callback(uint256,bytes32[])": FunctionFragment;
    "cancelQuery(uint256)": FunctionFragment;
    "testQuery(address,string,bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "callback",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testQuery",
    values: [string, string, BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "callback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testQuery", data: BytesLike): Result;

  events: {
    "MadeQuery(address,string,uint256)": EventFragment;
    "Result1(uint256,string)": EventFragment;
    "Result2(uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MadeQuery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result1"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Result2"): EventFragment;
}

export class TestClient extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestClientInterface;

  functions: {
    "callback(uint256,bytes32[])"(
      id: BigNumberish,
      response: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callback(uint256,string)"(
      id: BigNumberish,
      response1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "callback(uint256,string,string)"(
      id: BigNumberish,
      response1: string,
      response2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "testQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "callback(uint256,bytes32[])"(
    id: BigNumberish,
    response: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callback(uint256,string)"(
    id: BigNumberish,
    response1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "callback(uint256,string,string)"(
    id: BigNumberish,
    response1: string,
    response2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelQuery(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelQuery(uint256)"(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testQuery(
    oracleAddr: string,
    query: string,
    specifier: BytesLike,
    params: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "testQuery(address,string,bytes32,bytes32[])"(
    oracleAddr: string,
    query: string,
    specifier: BytesLike,
    params: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "callback(uint256,bytes32[])"(
      id: BigNumberish,
      response: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "callback(uint256,string)"(
      id: BigNumberish,
      response1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "callback(uint256,string,string)"(
      id: BigNumberish,
      response1: string,
      response2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelQuery(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    MadeQuery(
      oracle: null,
      query: null,
      id: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oracle: string; query: string; id: BigNumber }
    >;

    Result1(
      id: null,
      response1: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; response1: string }
    >;

    Result2(
      id: null,
      response1: null,
      response2: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { id: BigNumber; response1: string; response2: string }
    >;
  };

  estimateGas: {
    "callback(uint256,bytes32[])"(
      id: BigNumberish,
      response: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callback(uint256,string)"(
      id: BigNumberish,
      response1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "callback(uint256,string,string)"(
      id: BigNumberish,
      response1: string,
      response2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "testQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "callback(uint256,bytes32[])"(
      id: BigNumberish,
      response: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callback(uint256,string)"(
      id: BigNumberish,
      response1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "callback(uint256,string,string)"(
      id: BigNumberish,
      response1: string,
      response2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelQuery(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelQuery(uint256)"(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testQuery(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "testQuery(address,string,bytes32,bytes32[])"(
      oracleAddr: string,
      query: string,
      specifier: BytesLike,
      params: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
